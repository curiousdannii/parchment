{
  "version": 3,
  "sources": ["../../node_modules/file-saver/src/FileSaver.js", "../../node_modules/base32768/src/index.js", "../../src/tools/file-exporter.ts", "../../node_modules/fflate/esm/browser.js"],
  "sourcesContent": ["/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n", "/**\r\n  Base32768 is a binary-to-text encoding optimised for UTF-16-encoded text.\r\n  (e.g. Windows, Java, JavaScript)\r\n*/\r\n\r\n// Z is a number, usually a uint15 but sometimes a uint7\r\n\r\nconst BITS_PER_CHAR = 15 // Base32768 is a 15-bit encoding\r\nconst BITS_PER_BYTE = 8\r\n\r\nconst pairStrings = [\r\n  '\u04A0\u04BF\u0500\u051F\u0680\u06BF\u0760\u079F\u07C0\u07DF\u1000\u101F\u10A0\u10BF\u1100\u115F\u1180\u119F\u11E0\u123F\u1260\u127F\u12E0\u12FF\u1320\u133F\u13A0\u13DF\u1420\u165F\u16A0\u16DF\u1780\u179F\u1820\u185F\u18C0\u18DF\u1980\u199F\u19E0\u19FF\u1A20\u1A3F\u1BC0\u1BDF\u1C00\u1C1F\u1D00\u1D1F\u21E0\u21FF\u22C0\u22DF\u2340\u23DF\u2400\u241F\u2500\u275F\u2780\u27BF\u2800\u297F\u29A0\u29BF\u2A20\u2A5F\u2A80\u2ABF\u2AE0\u2B5F\u2C00\u2C1F\u2C80\u2CDF\u2D00\u2D1F\u2D40\u2D5F\u2EA0\u2EDF\u31C0\u31DF\u3400\u4D9F\u4DC0\u9FBF\uA000\uA47F\uA4A0\uA4BF\uA500\uA5FF\uA640\uA65F\uA6A0\uA6DF\uA700\uA75F\uA780\uA79F\uA840\uA85F',\r\n  '\u0180\u019F\u0240\u029F'\r\n]\r\n\r\nconst lookupE = {}\r\nconst lookupD = {}\r\npairStrings.forEach((pairString, r) => {\r\n  // Decompression\r\n  const encodeRepertoire = []\r\n  pairString.match(/../gu).forEach(pair => {\r\n    const first = pair.codePointAt(0)\r\n    const last = pair.codePointAt(1)\r\n    for (let codePoint = first; codePoint <= last; codePoint++) {\r\n      encodeRepertoire.push(String.fromCodePoint(codePoint))\r\n    }\r\n  })\r\n\r\n  const numZBits = BITS_PER_CHAR - BITS_PER_BYTE * r // 0 -> 15, 1 -> 7\r\n  lookupE[numZBits] = encodeRepertoire\r\n  encodeRepertoire.forEach((chr, z) => {\r\n    lookupD[chr] = [numZBits, z]\r\n  })\r\n})\r\n\r\nconst encode = uint8Array => {\r\n  const length = uint8Array.length\r\n\r\n  let str = ''\r\n  let z = 0\r\n  let numZBits = 0\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const uint8 = uint8Array[i]\r\n\r\n    // Take most significant bit first\r\n    for (let j = BITS_PER_BYTE - 1; j >= 0; j--) {\r\n      const bit = (uint8 >> j) & 1\r\n\r\n      z = (z << 1) + bit\r\n      numZBits++\r\n\r\n      if (numZBits === BITS_PER_CHAR) {\r\n        str += lookupE[numZBits][z]\r\n        z = 0\r\n        numZBits = 0\r\n      }\r\n    }\r\n  }\r\n\r\n  if (numZBits !== 0) {\r\n    // Final bits require special treatment.\r\n\r\n    // z = bbbbbbcccccccc, numZBits = 14, padBits = 1\r\n    // z = bbbbbcccccccc, numZBits = 13, padBits = 2\r\n    // z = bbbbcccccccc, numZBits = 12, padBits = 3\r\n    // z = bbbcccccccc, numZBits = 11, padBits = 4\r\n    // z = bbcccccccc, numZBits = 10, padBits = 5\r\n    // z = bcccccccc, numZBits = 9, padBits = 6\r\n    // z = cccccccc, numZBits = 8, padBits = 7\r\n    // => Pad `z` out to 15 bits using 1s, then encode as normal (r = 0)\r\n\r\n    // z = ccccccc, numZBits = 7, padBits = 0\r\n    // z = cccccc, numZBits = 6, padBits = 1\r\n    // z = ccccc, numZBits = 5, padBits = 2\r\n    // z = cccc, numZBits = 4, padBits = 3\r\n    // z = ccc, numZBits = 3, padBits = 4\r\n    // z = cc, numZBits = 2, padBits = 5\r\n    // z = c, numZBits = 1, padBits = 6\r\n    // => Pad `z` out to 7 bits using 1s, then encode specially (r = 1)\r\n\r\n    while (!(numZBits in lookupE)) {\r\n      z = (z << 1) + 1\r\n      numZBits++\r\n    }\r\n\r\n    str += lookupE[numZBits][z]\r\n  }\r\n\r\n  return str\r\n}\r\n\r\nconst decode = str => {\r\n  const length = str.length\r\n\r\n  // This length is a guess. There's a chance we allocate one more byte here\r\n  // than we actually need. But we can count and slice it off later\r\n  const uint8Array = new Uint8Array(Math.floor(length * BITS_PER_CHAR / BITS_PER_BYTE))\r\n  let numUint8s = 0\r\n  let uint8 = 0\r\n  let numUint8Bits = 0\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const chr = str.charAt(i)\r\n\r\n    if (!(chr in lookupD)) {\r\n      throw new Error(`Unrecognised Base32768 character: ${chr}`)\r\n    }\r\n\r\n    const [numZBits, z] = lookupD[chr]\r\n\r\n    if (numZBits !== BITS_PER_CHAR && i !== length - 1) {\r\n      throw new Error('Secondary character found before end of input at position ' + String(i))\r\n    }\r\n\r\n    // Take most significant bit first\r\n    for (let j = numZBits - 1; j >= 0; j--) {\r\n      const bit = (z >> j) & 1\r\n\r\n      uint8 = (uint8 << 1) + bit\r\n      numUint8Bits++\r\n\r\n      if (numUint8Bits === BITS_PER_BYTE) {\r\n        uint8Array[numUint8s] = uint8\r\n        numUint8s++\r\n        uint8 = 0\r\n        numUint8Bits = 0\r\n      }\r\n    }\r\n  }\r\n\r\n  // Final padding bits! Requires special consideration!\r\n  // Remember how we always pad with 1s?\r\n  // Note: there could be 0 such bits, check still works though\r\n  if (uint8 !== ((1 << numUint8Bits) - 1)) {\r\n    throw new Error('Padding mismatch')\r\n  }\r\n\r\n  return new Uint8Array(uint8Array.buffer, 0, numUint8s)\r\n}\r\n\r\nexport { encode, decode }\r\n", "/*\n\nParchment file exporter\n=======================\n\nCopyright (c) 2023 Dannii Willis\nMIT licenced\nhttps://github.com/curiousdannii/parchment\n\n*/\n\nimport {decode as base32768_decode} from 'base32768'\nimport filesaver from 'file-saver'\nimport {ZippableFile, zipSync} from 'fflate'\n\ndeclare global {\n    interface Window {run: () => void}\n}\n\nconst extension_map: Record<string, string> = {\n    command: 'txt',\n    data: 'glkdata',\n    save: 'glksave',\n    transcript: 'txt',\n}\nconst metadata_parts = /modified:(\\d+)$/\nconst record_parts = /^content:(\\w+):\\w*:(.+)$/\n\nwindow.run = function() {\n    // Check we have the correct Dialog storage version\n    const version = parseInt(localStorage.getItem('dialog_storage_version') || '', 10)\n    if (version !== 1) {\n        alert(`This tool doesn't support dialog_storage_version=${version}`)\n        return\n    }\n\n    // Loop through localStorage to find the files\n    const files: Record<string, ZippableFile> = {}\n    const filenames: Record<string, number> = {}\n    for (const [key, value] of Object.entries(localStorage)) {\n        if (!key.startsWith('content:')) {\n            continue\n        }\n\n        const match = record_parts.exec(key)\n        if (!match) {\n            console.log(`Unparsable content record: ${key}`)\n            continue\n        }\n\n        // Work out a unique filename, if there were multiple games with the same savefile names\n        const files_key = `${match[1]}:${match[2]}`\n        if (!filenames[files_key]) {\n            filenames[files_key] = 0\n        }\n        filenames[files_key]++\n        const duplicate_counter = filenames[files_key] > 1 ? `-${filenames[files_key]}` : ''\n        const filename = `parchment-files/${match[2]}${duplicate_counter}.${extension_map[match[1]] || match[1] || 'unknown'}`\n\n        // Get the modified date\n        const metadata = localStorage.getItem('dirent:' + key.substring(8))\n        const modified = metadata ? parseInt(metadata_parts.exec(metadata)![1]) : Date.now()\n\n        // Add the file\n        files[filename] = [base32768_decode(value), {mtime: modified}]\n    }\n\n    const zip_file = zipSync(files)\n    filesaver.saveAs(new Blob([zip_file]), 'parchment-files.zip')\n}", "// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            if (split) {\n                this.b.set(chunk.subarray(0, split), this.s.z);\n                this.s.z = this.b.length;\n                this.p(this.b, false);\n            }\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            if (this.p.length)\n                this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this_1 = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, function (offset) { return _this_1.onmember && _this_1.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.o = StrmOpt.call(this, opts, cb) || {};\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_2 = this;\n                // enables reuse of this method by AsyncDecompress\n                var cb = function () { _this_2.ondata.apply(_this_2, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o, cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o, cb)\n                        : new this.Z(this.o, cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        Decompress.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n"],
  "mappings": "orBAkBA,SAASA,EAAKC,EAAMD,EAAM,CAAA,OACpB,OAAOA,EAAS,IAAaA,EAAO,CAAE,QAAO,EAAT,EAC/B,OAAOA,GAAS,WACvB,QAAQ,KAAK,oDAAb,EACAA,EAAO,CAAE,QAAS,CAACA,CAAZ,GAKLA,EAAK,SAAW,6EAA6E,KAAKC,EAAK,IAAvF,EACX,IAAI,KAAK,CAAA,SAA8BA,CAA9B,EAAqC,CAAE,KAAMA,EAAK,IAAb,CAA9C,EAEFA,CACR,CAED,SAASC,EAAUD,EAAKD,EAAME,EAAM,CAClC,IAAIC,EAAM,IAAI,eACdA,EAAI,KAAK,MAAOF,CAAhB,EACAE,EAAI,aAAe,OACnBA,EAAI,OAAS,UAAY,CACvBC,EAAOD,EAAI,SAAUH,EAAME,CAArB,CACP,EACDC,EAAI,QAAU,UAAY,CACxB,QAAQ,MAAM,yBAAd,CACD,EACDA,EAAI,KAAJ,CACD,CAED,SAASA,EAAaF,EAAK,CACzB,IAAID,EAAM,IAAI,eAEdA,EAAI,KAAK,OAAQC,EAAjB,EAAA,EACA,GAAI,CACFD,EAAI,KAAJ,CACD,MAAW,CAAE,CACd,MAAqB,MAAdA,EAAI,QAA+B,KAAdA,EAAI,MACjC,CAGD,SAAS,EAAOC,EAAM,CACpB,GAAI,CACFA,EAAK,cAAc,IAAI,WAAW,OAAf,CAAnB,CACD,MAAW,CACV,IAAID,EAAM,SAAS,YAAY,aAArB,EACVA,EAAI,eAAe,QAAnB,GAAA,GAAwC,OAAQ,EAAG,EAAG,EAAG,GACnC,GADtB,GAAA,GAAA,GAAA,GACsD,EAAG,IADzD,EAEAC,EAAK,cAAcD,CAAnB,CACD,CACF,CAAA,IAtDGK,EAAU,OAAO,QAAW,UAAY,OAAO,SAAW,OAC1D,OAAS,OAAO,MAAS,UAAY,KAAK,OAAS,KACnD,KAAO,OAAO,QAAW,UAAY,OAAO,SAAW,OACvD,OADO,OAyDP,EAAiBA,EAAQ,WAAa,YAAY,KAAK,UAAU,SAA3B,GAAyC,cAAc,KAAK,UAAU,SAA7B,GAA2C,CAAC,SAAS,KAAK,UAAU,SAAxB,EAE3HD,EAASC,EAAQ,SAElB,OAAO,QAAW,UAAY,SAAWA,EACtC,UAAmB,CAAc,EAGlC,aAAc,kBAAkB,WAAa,CAAC,EAC/C,SAAiBL,EAAMI,EAAME,EAAM,CAAA,IAC/BC,EAAMF,EAAQ,KAAOA,EAAQ,UAC7BG,EAAI,SAAS,cAAc,GAAvB,EACRJ,EAAOA,GAAQJ,EAAK,MAAQ,WAE5BQ,EAAE,SAAWJ,EACbI,EAAE,IAAM,WAKJ,OAAOR,GAAS,UAElBQ,EAAE,KAAOR,EACLQ,EAAE,SAAW,SAAS,OAKxB,EAAMA,CAAD,EAJLL,EAAYK,EAAE,IAAH,EACPN,EAASF,EAAMI,EAAME,CAAb,EACR,EAAME,EAAGA,EAAE,OAAS,QAAf,IAMXA,EAAE,KAAOD,EAAI,gBAAgBP,CAApB,EACT,WAAW,UAAY,CAAEO,EAAI,gBAAgBC,EAAE,IAAtB,CAA6B,EAAE,GAA9C,EACV,WAAW,UAAY,CAAE,EAAMA,CAAD,CAAK,EAAE,CAA3B,EAEb,EAGC,qBAAsB,UACtB,SAAiBH,EAAMD,EAAME,EAAM,CAGnC,GAFAF,EAAOA,GAAQC,EAAK,MAAQ,WAExB,OAAOA,GAAS,SAUlB,UAAU,iBAAiBL,EAAIK,EAAMC,CAAP,EAAcF,CAA5C,UATID,EAAYE,CAAD,EACbH,EAASG,EAAMD,EAAME,CAAb,MACH,CACL,IAAIC,EAAI,SAAS,cAAc,GAAvB,EACRA,EAAE,KAAOF,EACTE,EAAE,OAAS,SACX,WAAW,UAAY,CAAE,EAAMA,CAAD,CAAK,CAAzB,CACX,CAIJ,EAGC,SAAiBP,EAAMG,EAAMM,EAAML,EAAO,CAS1C,GANAA,EAAQA,GAAS,KAAK,GAAI,QAAL,EACjBA,IACFA,EAAM,SAAS,MACfA,EAAM,SAAS,KAAK,UAAY,kBAG9B,OAAOJ,GAAS,SAAU,OAAOE,EAASF,EAAMG,EAAMM,CAAb,EATH,IAWtC,EAAQT,EAAK,OAAS,2BACtBO,EAAW,eAAe,KAAKF,EAAQ,WAA5B,GAA4CA,EAAQ,OAC/DG,EAAc,eAAe,KAAK,UAAU,SAA9B,EAElB,IAAKA,GAAgB,GAASD,GAAa,IAAmB,OAAO,WAAe,IAAa,CAE/F,IAAIG,EAAS,IAAI,WACjBA,EAAO,UAAY,UAAY,CAC7B,IAAIT,EAAMS,EAAO,OACjBT,EAAMO,EAAcP,EAAMA,EAAI,QAAQ,eAAgB,uBAA5B,EACtBG,EAAOA,EAAM,SAAS,KAAOH,EAC5B,SAAWA,EAChBG,EAAQ,IACT,EACDM,EAAO,cAAcV,CAArB,CACD,KAAM,CAAA,IACDW,EAAMN,EAAQ,KAAOA,EAAQ,UAC7BO,EAAMD,EAAI,gBAAgBX,CAApB,EACNI,EAAOA,EAAM,SAAWQ,EACvB,SAAS,KAAOA,EACrBR,EAAQ,KACR,WAAW,UAAY,CAAEO,EAAI,gBAAgBC,CAApB,CAA0B,EAAE,GAA3C,CACX,CACF,GAGHP,EAAQ,OAASD,EAAO,OAASA,EAE7B,OAAOS,GAAW,MACpBA,GAAO,QAAUT,EAAA,CAAA,IC/JnB,IAAMU,GAAc,CAClB,mnBACA,0BACF,EAEMC,GAAU,CAAC,EACXC,GAAU,CAAC,EACjBF,GAAY,QAAQ,CAACG,EAAYC,IAAM,CAErC,IAAMC,EAAmB,CAAC,EAC1BF,EAAW,MAAM,MAAM,EAAE,QAAQG,GAAQ,CACvC,IAAMC,EAAQD,EAAK,YAAY,CAAC,EAC1BE,EAAOF,EAAK,YAAY,CAAC,EAC/B,QAASG,EAAYF,EAAOE,GAAaD,EAAMC,IAC7CJ,EAAiB,KAAK,OAAO,cAAcI,CAAS,CAAC,CAEzD,CAAC,EAED,IAAMC,EAAW,GAAgB,EAAgBN,EACjDH,GAAQS,CAAQ,EAAIL,EACpBA,EAAiB,QAAQ,CAACM,EAAKC,IAAM,CACnCV,GAAQS,CAAG,EAAI,CAACD,EAAUE,CAAC,CAC7B,CAAC,CACH,CAAC,EA2DD,IAAMC,GAASC,GAAO,CACpB,IAAMC,EAASD,EAAI,OAIbE,EAAa,IAAI,WAAW,KAAK,MAAMD,EAAS,GAAgB,CAAa,CAAC,EAChFE,EAAY,EACZC,EAAQ,EACRC,EAAe,EAEnB,QAASC,EAAI,EAAGA,EAAIL,EAAQK,IAAK,CAC/B,IAAMC,EAAMP,EAAI,OAAOM,CAAC,EAExB,GAAI,EAAEC,KAAOC,IACX,MAAM,IAAI,MAAM,qCAAqCD,CAAG,EAAE,EAG5D,GAAM,CAACE,EAAUC,CAAC,EAAIF,GAAQD,CAAG,EAEjC,GAAIE,IAAa,IAAiBH,IAAML,EAAS,EAC/C,MAAM,IAAI,MAAM,6DAA+D,OAAOK,CAAC,CAAC,EAI1F,QAASK,EAAIF,EAAW,EAAGE,GAAK,EAAGA,IAAK,CACtC,IAAMC,EAAOF,GAAKC,EAAK,EAEvBP,GAASA,GAAS,GAAKQ,EACvBP,IAEIA,IAAiB,IACnBH,EAAWC,CAAS,EAAIC,EACxBD,IACAC,EAAQ,EACRC,EAAe,EAEnB,CACF,CAKA,GAAID,KAAY,GAAKC,GAAgB,EACnC,MAAM,IAAI,MAAM,kBAAkB,EAGpC,OAAO,IAAI,WAAWH,EAAW,OAAQ,EAAGC,CAAS,CACvD,EC/HA,IAAAU,GAAsB,WCkBtB,IAAIC,EAAK,WAAYC,EAAM,YAAaC,GAAM,WAE1CC,GAAO,IAAIH,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAgB,EAAG,EAAoB,CAAC,CAAC,EAE5II,GAAO,IAAIJ,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAiB,EAAG,CAAC,CAAC,EAEnIK,GAAO,IAAIL,EAAG,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAE,CAAC,EAEhFM,GAAO,SAAUC,EAAIC,EAAO,CAE5B,QADIC,EAAI,IAAIR,EAAI,EAAE,EACTS,EAAI,EAAGA,EAAI,GAAI,EAAEA,EACtBD,EAAEC,CAAC,EAAIF,GAAS,GAAKD,EAAGG,EAAI,CAAC,EAIjC,QADIC,EAAI,IAAIT,GAAIO,EAAE,EAAE,CAAC,EACZC,EAAI,EAAGA,EAAI,GAAI,EAAEA,EACtB,QAASE,EAAIH,EAAEC,CAAC,EAAGE,EAAIH,EAAEC,EAAI,CAAC,EAAG,EAAEE,EAC/BD,EAAEC,CAAC,EAAMA,EAAIH,EAAEC,CAAC,GAAM,EAAKA,EAGnC,MAAO,CAAE,EAAGD,EAAG,EAAGE,CAAE,CACxB,EACIE,GAAKP,GAAKH,GAAM,CAAC,EAAGW,GAAKD,GAAG,EAAGE,GAAQF,GAAG,EAE9CC,GAAG,EAAE,EAAI,IAAKC,GAAM,GAAG,EAAI,GAC3B,IAAIC,GAAKV,GAAKF,GAAM,CAAC,EAAGa,GAAKD,GAAG,EAAGE,GAAQF,GAAG,EAE1CG,GAAM,IAAIlB,EAAI,KAAK,EACvB,IAASS,EAAI,EAAGA,EAAI,MAAO,EAAEA,EAErBU,GAAMV,EAAI,QAAW,GAAOA,EAAI,QAAW,EAC/CU,GAAMA,EAAI,QAAW,GAAOA,EAAI,QAAW,EAC3CA,GAAMA,EAAI,QAAW,GAAOA,EAAI,OAAW,EAC3CD,GAAIT,CAAC,IAAOU,EAAI,QAAW,GAAOA,EAAI,MAAW,IAAO,EAHpD,IAAAA,EAFCV,EAULW,EAAQ,SAAUC,EAAIC,EAAI,EAAG,CAO7B,QANIC,EAAIF,EAAG,OAEP,EAAI,EAEJG,EAAI,IAAIxB,EAAIsB,CAAE,EAEX,EAAIC,EAAG,EAAE,EACRF,EAAG,CAAC,GACJ,EAAEG,EAAEH,EAAG,CAAC,EAAI,CAAC,EAGrB,IAAII,EAAK,IAAIzB,EAAIsB,CAAE,EACnB,IAAK,EAAI,EAAG,EAAIA,EAAI,EAAE,EAClBG,EAAG,CAAC,EAAKA,EAAG,EAAI,CAAC,EAAID,EAAE,EAAI,CAAC,GAAM,EAEtC,IAAIE,EACJ,GAAI,EAAG,CAEHA,EAAK,IAAI1B,EAAI,GAAKsB,CAAE,EAEpB,IAAIK,EAAM,GAAKL,EACf,IAAK,EAAI,EAAG,EAAIC,EAAG,EAAE,EAEjB,GAAIF,EAAG,CAAC,EAQJ,QANIO,EAAM,GAAK,EAAKP,EAAG,CAAC,EAEpBQ,EAAMP,EAAKD,EAAG,CAAC,EAEfS,EAAIL,EAAGJ,EAAG,CAAC,EAAI,CAAC,KAAOQ,EAElBE,EAAID,GAAM,GAAKD,GAAO,EAAIC,GAAKC,EAAG,EAAED,EAEzCJ,EAAGR,GAAIY,CAAC,GAAKH,CAAG,EAAIC,CAIpC,KAGI,KADAF,EAAK,IAAI1B,EAAIuB,CAAC,EACT,EAAI,EAAG,EAAIA,EAAG,EAAE,EACbF,EAAG,CAAC,IACJK,EAAG,CAAC,EAAIR,GAAIO,EAAGJ,EAAG,CAAC,EAAI,CAAC,GAAG,GAAM,GAAKA,EAAG,CAAC,GAItD,OAAOK,CACX,EAEIM,EAAM,IAAIjC,EAAG,GAAG,EACpB,IAASU,EAAI,EAAGA,EAAI,IAAK,EAAEA,EACvBuB,EAAIvB,CAAC,EAAI,EADJ,IAAAA,EAET,IAASA,EAAI,IAAKA,EAAI,IAAK,EAAEA,EACzBuB,EAAIvB,CAAC,EAAI,EADJ,IAAAA,EAET,IAASA,EAAI,IAAKA,EAAI,IAAK,EAAEA,EACzBuB,EAAIvB,CAAC,EAAI,EADJ,IAAAA,EAET,IAASA,EAAI,IAAKA,EAAI,IAAK,EAAEA,EACzBuB,EAAIvB,CAAC,EAAI,EADJ,IAAAA,EAGLwB,EAAM,IAAIlC,EAAG,EAAE,EACnB,IAASU,EAAI,EAAGA,EAAI,GAAI,EAAEA,EACtBwB,EAAIxB,CAAC,EAAI,EADJ,IAAAA,EAGLyB,GAAoBd,EAAKY,EAAK,EAAG,CAAC,EAEtC,IAAIG,GAAoBC,EAAKC,EAAK,EAAG,CAAC,EAqBtC,IAAIC,GAAO,SAAUC,EAAG,CAAE,OAASA,EAAI,GAAK,EAAK,CAAG,EAGhDC,GAAM,SAAUC,EAAGC,EAAGC,EAAG,CACzB,OAAID,GAAK,MAAQA,EAAI,KACjBA,EAAI,IACJC,GAAK,MAAQA,EAAIF,EAAE,UACnBE,EAAIF,EAAE,QAEH,IAAIG,EAAGH,EAAE,SAASC,EAAGC,CAAC,CAAC,CAClC,EAsBA,IAAIE,GAAK,CACL,iBACA,qBACA,yBACA,mBACA,kBACA,oBACA,CACA,cACA,qBACA,uBACA,8BACA,oBACA,mBACA,kBAEJ,EAEIC,EAAM,SAAUC,EAAKC,EAAKC,EAAI,CAC9B,IAAI,EAAI,IAAI,MAAMD,GAAOH,GAAGE,CAAG,CAAC,EAIhC,GAHA,EAAE,KAAOA,EACL,MAAM,mBACN,MAAM,kBAAkB,EAAGD,CAAG,EAC9B,CAACG,EACD,MAAM,EACV,OAAO,CACX,EAuLA,IAAIC,EAAQ,SAAUC,EAAGC,EAAGC,EAAG,CAC3BA,IAAMD,EAAI,EACV,IAAIE,EAAKF,EAAI,EAAK,EAClBD,EAAEG,CAAC,GAAKD,EACRF,EAAEG,EAAI,CAAC,GAAKD,GAAK,CACrB,EAEIE,EAAU,SAAUJ,EAAGC,EAAGC,EAAG,CAC7BA,IAAMD,EAAI,EACV,IAAIE,EAAKF,EAAI,EAAK,EAClBD,EAAEG,CAAC,GAAKD,EACRF,EAAEG,EAAI,CAAC,GAAKD,GAAK,EACjBF,EAAEG,EAAI,CAAC,GAAKD,GAAK,EACrB,EAEIG,GAAQ,SAAUL,EAAGM,EAAI,CAGzB,QADIC,EAAI,CAAC,EACAC,EAAI,EAAGA,EAAIR,EAAE,OAAQ,EAAEQ,EACxBR,EAAEQ,CAAC,GACHD,EAAE,KAAK,CAAE,EAAGC,EAAG,EAAGR,EAAEQ,CAAC,CAAE,CAAC,EAEhC,IAAIC,EAAIF,EAAE,OACNG,EAAKH,EAAE,MAAM,EACjB,GAAI,CAACE,EACD,MAAO,CAAE,EAAGE,GAAI,EAAG,CAAE,EACzB,GAAIF,GAAK,EAAG,CACR,IAAIP,EAAI,IAAIU,EAAGL,EAAE,CAAC,EAAE,EAAI,CAAC,EACzB,OAAAL,EAAEK,EAAE,CAAC,EAAE,CAAC,EAAI,EACL,CAAE,EAAGL,EAAG,EAAG,CAAE,CACxB,CACAK,EAAE,KAAK,SAAUM,EAAGC,EAAG,CAAE,OAAOD,EAAE,EAAIC,EAAE,CAAG,CAAC,EAG5CP,EAAE,KAAK,CAAE,EAAG,GAAI,EAAG,KAAM,CAAC,EAC1B,IAAIQ,EAAIR,EAAE,CAAC,EAAGS,EAAIT,EAAE,CAAC,EAAGU,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAO7C,IANAZ,EAAE,CAAC,EAAI,CAAE,EAAG,GAAI,EAAGQ,EAAE,EAAIC,EAAE,EAAG,EAAGD,EAAG,EAAGC,CAAE,EAMlCE,GAAMT,EAAI,GACbM,EAAIR,EAAEA,EAAEU,CAAE,EAAE,EAAIV,EAAEY,CAAE,EAAE,EAAIF,IAAOE,GAAI,EACrCH,EAAIT,EAAEU,GAAMC,GAAMX,EAAEU,CAAE,EAAE,EAAIV,EAAEY,CAAE,EAAE,EAAIF,IAAOE,GAAI,EACjDZ,EAAEW,GAAI,EAAI,CAAE,EAAG,GAAI,EAAGH,EAAE,EAAIC,EAAE,EAAG,EAAGD,EAAG,EAAGC,CAAE,EAGhD,QADII,EAASV,EAAG,CAAC,EAAE,EACVF,EAAI,EAAGA,EAAIC,EAAG,EAAED,EACjBE,EAAGF,CAAC,EAAE,EAAIY,IACVA,EAASV,EAAGF,CAAC,EAAE,GAGvB,IAAIa,EAAK,IAAIC,EAAIF,EAAS,CAAC,EAEvBG,EAAMC,GAAGjB,EAAEW,EAAK,CAAC,EAAGG,EAAI,CAAC,EAC7B,GAAIE,EAAMjB,EAAI,CAIV,IAAIE,EAAI,EAAGiB,EAAK,EAEZC,EAAMH,EAAMjB,EAAIqB,EAAM,GAAKD,EAE/B,IADAhB,EAAG,KAAK,SAAUG,EAAGC,EAAG,CAAE,OAAOO,EAAGP,EAAE,CAAC,EAAIO,EAAGR,EAAE,CAAC,GAAKA,EAAE,EAAIC,EAAE,CAAG,CAAC,EAC3DN,EAAIC,EAAG,EAAED,EAAG,CACf,IAAIoB,EAAOlB,EAAGF,CAAC,EAAE,EACjB,GAAIa,EAAGO,CAAI,EAAItB,EACXmB,GAAME,GAAO,GAAMJ,EAAMF,EAAGO,CAAI,GAChCP,EAAGO,CAAI,EAAItB,MAGX,MACR,CAEA,IADAmB,IAAOC,EACAD,EAAK,GAAG,CACX,IAAII,EAAOnB,EAAGF,CAAC,EAAE,EACba,EAAGQ,CAAI,EAAIvB,EACXmB,GAAM,GAAMnB,EAAKe,EAAGQ,CAAI,IAAM,EAE9B,EAAErB,CACV,CACA,KAAOA,GAAK,GAAKiB,EAAI,EAAEjB,EAAG,CACtB,IAAIsB,EAAOpB,EAAGF,CAAC,EAAE,EACba,EAAGS,CAAI,GAAKxB,IACZ,EAAEe,EAAGS,CAAI,EACT,EAAEL,EAEV,CACAF,EAAMjB,CACV,CACA,MAAO,CAAE,EAAG,IAAIM,EAAGS,CAAE,EAAG,EAAGE,CAAI,CACnC,EAEIC,GAAK,SAAU,EAAGT,EAAGf,EAAG,CACxB,OAAO,EAAE,GAAK,GACR,KAAK,IAAIwB,GAAG,EAAE,EAAGT,EAAGf,EAAI,CAAC,EAAGwB,GAAG,EAAE,EAAGT,EAAGf,EAAI,CAAC,CAAC,EAC5Ce,EAAE,EAAE,CAAC,EAAIf,CACpB,EAEI+B,GAAK,SAAUC,EAAG,CAGlB,QAFIvB,EAAIuB,EAAE,OAEHvB,GAAK,CAACuB,EAAE,EAAEvB,CAAC,GACd,CAKJ,QAJIwB,EAAK,IAAIX,EAAI,EAAEb,CAAC,EAEhByB,EAAM,EAAGC,EAAMH,EAAE,CAAC,EAAGI,EAAM,EAC3BC,EAAI,SAAUnC,EAAG,CAAE+B,EAAGC,GAAK,EAAIhC,CAAG,EAC7BM,EAAI,EAAGA,GAAKC,EAAG,EAAED,EACtB,GAAIwB,EAAExB,CAAC,GAAK2B,GAAO3B,GAAKC,EACpB,EAAE2B,MACD,CACD,GAAI,CAACD,GAAOC,EAAM,EAAG,CACjB,KAAOA,EAAM,IAAKA,GAAO,IACrBC,EAAE,KAAK,EACPD,EAAM,IACNC,EAAED,EAAM,GAAOA,EAAM,IAAO,EAAK,MAAUA,EAAM,GAAM,EAAK,KAAK,EACjEA,EAAM,EAEd,SACSA,EAAM,EAAG,CAEd,IADAC,EAAEF,CAAG,EAAG,EAAEC,EACHA,EAAM,EAAGA,GAAO,EACnBC,EAAE,IAAI,EACND,EAAM,IACNC,EAAID,EAAM,GAAM,EAAK,IAAI,EAAGA,EAAM,EAC1C,CACA,KAAOA,KACHC,EAAEF,CAAG,EACTC,EAAM,EACND,EAAMH,EAAExB,CAAC,CACb,CAEJ,MAAO,CAAE,EAAGyB,EAAG,SAAS,EAAGC,CAAG,EAAG,EAAGzB,CAAE,CAC1C,EAEI6B,EAAO,SAAUC,EAAIN,EAAI,CAEzB,QADIlB,EAAI,EACCP,EAAI,EAAGA,EAAIyB,EAAG,OAAQ,EAAEzB,EAC7BO,GAAKwB,EAAG/B,CAAC,EAAIyB,EAAGzB,CAAC,EACrB,OAAOO,CACX,EAGIyB,GAAQ,SAAUC,EAAKC,EAAKC,EAAK,CAEjC,IAAIlC,EAAIkC,EAAI,OACRxC,EAAIyC,GAAKF,EAAM,CAAC,EACpBD,EAAItC,CAAC,EAAIM,EAAI,IACbgC,EAAItC,EAAI,CAAC,EAAIM,GAAK,EAClBgC,EAAItC,EAAI,CAAC,EAAIsC,EAAItC,CAAC,EAAI,IACtBsC,EAAItC,EAAI,CAAC,EAAIsC,EAAItC,EAAI,CAAC,EAAI,IAC1B,QAASK,EAAI,EAAGA,EAAIC,EAAG,EAAED,EACrBiC,EAAItC,EAAIK,EAAI,CAAC,EAAImC,EAAInC,CAAC,EAC1B,OAAQL,EAAI,EAAIM,GAAK,CACzB,EAEIoC,GAAO,SAAUF,EAAKF,EAAKK,EAAOC,EAAMC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIpD,EAAG,CACnEF,EAAM0C,EAAKxC,IAAK6C,CAAK,EACrB,EAAEE,EAAG,GAAG,EAMR,QALIM,EAAKjD,GAAM2C,EAAI,EAAE,EAAGO,EAAMD,EAAG,EAAGE,EAAMF,EAAG,EACzCG,EAAKpD,GAAM4C,EAAI,EAAE,EAAGS,EAAMD,EAAG,EAAGE,EAAMF,EAAG,EACzCG,EAAK7B,GAAGwB,CAAG,EAAGM,EAAOD,EAAG,EAAGE,EAAMF,EAAG,EACpCG,EAAKhC,GAAG2B,CAAG,EAAGM,EAAOD,EAAG,EAAGE,EAAMF,EAAG,EACpCG,EAAS,IAAI5C,EAAI,EAAE,EACdd,EAAI,EAAGA,EAAIqD,EAAK,OAAQ,EAAErD,EAC/B,EAAE0D,EAAOL,EAAKrD,CAAC,EAAI,EAAE,EACzB,QAASA,EAAI,EAAGA,EAAIwD,EAAK,OAAQ,EAAExD,EAC/B,EAAE0D,EAAOF,EAAKxD,CAAC,EAAI,EAAE,EAGzB,QAFI2D,EAAK9D,GAAM6D,EAAQ,CAAC,EAAGE,EAAMD,EAAG,EAAGE,EAAOF,EAAG,EAC7CG,EAAO,GACJA,EAAO,GAAK,CAACF,EAAIG,GAAKD,EAAO,CAAC,CAAC,EAAG,EAAEA,EACvC,CACJ,IAAIE,EAAQnB,EAAK,GAAM,EACnBoB,EAAQnC,EAAKU,EAAI0B,CAAG,EAAIpC,EAAKW,EAAI0B,CAAG,EAAIzB,EACxC0B,EAAQtC,EAAKU,EAAIO,CAAG,EAAIjB,EAAKW,EAAIS,CAAG,EAAIR,EAAK,GAAK,EAAIoB,EAAOhC,EAAK4B,EAAQE,CAAG,EAAI,EAAIF,EAAO,EAAE,EAAI,EAAIA,EAAO,EAAE,EAAI,EAAIA,EAAO,EAAE,EACpI,GAAId,GAAM,GAAKoB,GAAQC,GAASD,GAAQI,EACpC,OAAOpC,GAAMC,EAAKxC,EAAG0C,EAAI,SAASS,EAAIA,EAAKC,CAAE,CAAC,EAClD,IAAIwB,EAAIC,EAAIC,EAAIC,EAEhB,GADAjF,EAAM0C,EAAKxC,EAAG,GAAK2E,EAAQH,EAAM,EAAGxE,GAAK,EACrC2E,EAAQH,EAAO,CACfI,EAAKI,EAAK1B,EAAKC,EAAK,CAAC,EAAGsB,EAAKvB,EAAKwB,EAAKE,EAAKvB,EAAKC,EAAK,CAAC,EAAGqB,EAAKtB,EAC/D,IAAIwB,GAAMD,EAAKb,EAAKC,EAAM,CAAC,EAC3BtE,EAAM0C,EAAKxC,EAAG6D,EAAM,GAAG,EACvB/D,EAAM0C,EAAKxC,EAAI,EAAGgE,EAAM,CAAC,EACzBlE,EAAM0C,EAAKxC,EAAI,GAAIqE,EAAO,CAAC,EAC3BrE,GAAK,GACL,QAASO,EAAI,EAAGA,EAAI8D,EAAM,EAAE9D,EACxBT,EAAM0C,EAAKxC,EAAI,EAAIO,EAAG4D,EAAIG,GAAK/D,CAAC,CAAC,CAAC,EACtCP,GAAK,EAAIqE,EAET,QADIa,EAAO,CAACtB,EAAMG,CAAI,EACboB,EAAK,EAAGA,EAAK,EAAG,EAAEA,EAEvB,QADIC,EAAOF,EAAKC,CAAE,EACT5E,EAAI,EAAGA,EAAI6E,EAAK,OAAQ,EAAE7E,EAAG,CAClC,IAAI8E,EAAMD,EAAK7E,CAAC,EAAI,GACpBT,EAAM0C,EAAKxC,EAAGiF,GAAII,CAAG,CAAC,EAAGrF,GAAKmE,EAAIkB,CAAG,EACjCA,EAAM,KACNvF,EAAM0C,EAAKxC,EAAIoF,EAAK7E,CAAC,GAAK,EAAK,GAAG,EAAGP,GAAKoF,EAAK7E,CAAC,GAAK,GAC7D,CAER,MAEIqE,EAAKU,GAAKT,EAAKJ,EAAKK,EAAKS,GAAKR,EAAKL,EAEvC,QAASnE,EAAI,EAAGA,EAAI2C,EAAI,EAAE3C,EAAG,CACzB,IAAIiF,EAAM1C,EAAKvC,CAAC,EAChB,GAAIiF,EAAM,IAAK,CACX,IAAIH,EAAOG,GAAO,GAAM,GACxBrF,EAAQqC,EAAKxC,EAAG4E,EAAGS,EAAM,GAAG,CAAC,EAAGrF,GAAK6E,EAAGQ,EAAM,GAAG,EAC7CA,EAAM,IACNvF,EAAM0C,EAAKxC,EAAIwF,GAAO,GAAM,EAAE,EAAGxF,GAAKyF,GAAKJ,CAAG,GAClD,IAAIK,EAAMF,EAAM,GAChBrF,EAAQqC,EAAKxC,EAAG8E,EAAGY,CAAG,CAAC,EAAG1F,GAAK+E,EAAGW,CAAG,EACjCA,EAAM,IACNvF,EAAQqC,EAAKxC,EAAIwF,GAAO,EAAK,IAAI,EAAGxF,GAAK2F,GAAKD,CAAG,EACzD,MAEIvF,EAAQqC,EAAKxC,EAAG4E,EAAGY,CAAG,CAAC,EAAGxF,GAAK6E,EAAGW,CAAG,CAE7C,CACA,OAAArF,EAAQqC,EAAKxC,EAAG4E,EAAG,GAAG,CAAC,EAChB5E,EAAI6E,EAAG,GAAG,CACrB,EAEIe,GAAoB,IAAIC,GAAI,CAAC,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,OAAO,CAAC,EAEvGnF,GAAmB,IAAIC,EAAG,CAAC,EAE3BmF,GAAO,SAAUpD,EAAKqD,EAAKC,EAAMC,EAAKC,EAAMC,EAAI,CAChD,IAAI3F,EAAI2F,EAAG,GAAKzD,EAAI,OAChB,EAAI,IAAI/B,EAAGsF,EAAMzF,EAAI,GAAK,EAAI,KAAK,KAAKA,EAAI,GAAI,GAAK0F,CAAI,EAEzD9D,EAAI,EAAE,SAAS6D,EAAK,EAAE,OAASC,CAAI,EACnCE,EAAMD,EAAG,EACT1D,GAAO0D,EAAG,GAAK,GAAK,EACxB,GAAIJ,EAAK,CACDtD,IACAL,EAAE,CAAC,EAAI+D,EAAG,GAAK,GAenB,QAdIE,EAAMT,GAAIG,EAAM,CAAC,EACjBO,EAAID,GAAO,GAAItE,EAAIsE,EAAM,KACzBE,GAAS,GAAKP,GAAQ,EAEtBQ,EAAOL,EAAG,GAAK,IAAI9E,EAAI,KAAK,EAAGoF,EAAON,EAAG,GAAK,IAAI9E,EAAIkF,EAAQ,CAAC,EAC/DG,EAAQ,KAAK,KAAKV,EAAO,CAAC,EAAGW,EAAQ,EAAID,EACzCE,EAAM,SAAUrG,GAAG,CAAE,OAAQmC,EAAInC,EAAC,EAAKmC,EAAInC,GAAI,CAAC,GAAKmG,EAAUhE,EAAInC,GAAI,CAAC,GAAKoG,GAAUJ,CAAO,EAG9FzD,EAAO,IAAI+C,GAAI,IAAK,EAEpB9C,EAAK,IAAI1B,EAAI,GAAG,EAAG2B,EAAK,IAAI3B,EAAI,EAAE,EAElCwF,EAAO,EAAG5D,EAAK,EAAG1C,EAAI4F,EAAG,GAAK,EAAGjD,EAAK,EAAG4D,EAAKX,EAAG,GAAK,EAAGhD,EAAK,EAC3D5C,EAAI,EAAIC,EAAG,EAAED,EAAG,CAEnB,IAAIwG,EAAKH,EAAIrG,CAAC,EAEVyG,EAAOzG,EAAI,MAAO0G,EAAQR,EAAKM,CAAE,EAKrC,GAJAP,EAAKQ,CAAI,EAAIC,EACbR,EAAKM,CAAE,EAAIC,EAGPF,GAAMvG,EAAG,CAET,IAAI2G,EAAM1G,EAAID,EACd,IAAKsG,EAAO,KAAQ3D,EAAK,SAAWgE,EAAM,KAAO,CAACd,GAAM,CACpD3D,EAAMG,GAAKF,EAAKN,EAAG,EAAGU,EAAMC,EAAIC,EAAIC,EAAIC,EAAIC,EAAI5C,EAAI4C,EAAIV,CAAG,EAC3DS,EAAK2D,EAAO5D,EAAK,EAAGE,EAAK5C,EACzB,QAAS4G,EAAI,EAAGA,EAAI,IAAK,EAAEA,EACvBpE,EAAGoE,CAAC,EAAI,EACZ,QAASA,EAAI,EAAGA,EAAI,GAAI,EAAEA,EACtBnE,EAAGmE,CAAC,EAAI,CAChB,CAEA,IAAIrG,EAAI,EAAGf,EAAI,EAAGqH,GAAOrF,EAAGsF,EAAML,EAAOC,EAAQ,MACjD,GAAIC,EAAM,GAAKH,GAAMH,EAAIrG,EAAI8G,CAAG,EAM5B,QALIC,EAAO,KAAK,IAAIhB,EAAGY,CAAG,EAAI,EAC1BK,EAAO,KAAK,IAAI,MAAOhH,CAAC,EAGxBiH,EAAK,KAAK,IAAI,IAAKN,CAAG,EACnBG,GAAOE,GAAQ,EAAEH,IAAQJ,GAAQC,GAAO,CAC3C,GAAIvE,EAAInC,EAAIO,CAAC,GAAK4B,EAAInC,EAAIO,EAAIuG,CAAG,EAAG,CAEhC,QADII,EAAK,EACFA,EAAKD,GAAM9E,EAAInC,EAAIkH,CAAE,GAAK/E,EAAInC,EAAIkH,EAAKJ,CAAG,EAAG,EAAEI,EAClD,CACJ,GAAIA,EAAK3G,EAAG,CAGR,GAFAA,EAAI2G,EAAI1H,EAAIsH,EAERI,EAAKH,EACL,MAMJ,QAFII,EAAM,KAAK,IAAIL,EAAKI,EAAK,CAAC,EAC1BE,GAAK,EACAR,EAAI,EAAGA,EAAIO,EAAK,EAAEP,EAAG,CAC1B,IAAIS,GAAKrH,EAAI8G,EAAMF,EAAI,MACnBU,GAAMrB,EAAKoB,EAAE,EACbE,GAAKF,GAAKC,GAAM,MAChBC,GAAKH,KACLA,GAAKG,GAAIb,EAAQW,GACzB,CACJ,CACJ,CAEAZ,EAAOC,EAAOA,EAAQT,EAAKQ,CAAI,EAC/BK,GAAOL,EAAOC,EAAQ,KAC1B,CAGJ,GAAIlH,EAAG,CAGH+C,EAAKI,GAAI,EAAI,UAAa6E,GAAMjH,CAAC,GAAK,GAAMkH,GAAMjI,CAAC,EACnD,IAAIkI,GAAMF,GAAMjH,CAAC,EAAI,GAAIoH,GAAMF,GAAMjI,CAAC,EAAI,GAC1CkD,GAAMwC,GAAKwC,EAAG,EAAItC,GAAKuC,EAAG,EAC1B,EAAEnF,EAAG,IAAMkF,EAAG,EACd,EAAEjF,EAAGkF,EAAG,EACRpB,EAAKvG,EAAIO,EACT,EAAE+F,CACN,MAEI/D,EAAKI,GAAI,EAAIR,EAAInC,CAAC,EAClB,EAAEwC,EAAGL,EAAInC,CAAC,CAAC,CAEnB,CACJ,CACA,IAAKA,EAAI,KAAK,IAAIA,EAAGuG,CAAE,EAAGvG,EAAIC,EAAG,EAAED,EAC/BuC,EAAKI,GAAI,EAAIR,EAAInC,CAAC,EAClB,EAAEwC,EAAGL,EAAInC,CAAC,CAAC,EAEfkC,EAAMG,GAAKF,EAAKN,EAAGgE,EAAKtD,EAAMC,EAAIC,EAAIC,EAAIC,EAAIC,EAAI5C,EAAI4C,EAAIV,CAAG,EACxD2D,IACDD,EAAG,EAAK1D,EAAM,EAAKL,EAAGK,EAAM,EAAK,CAAC,GAAK,EAEvCA,GAAO,EACP0D,EAAG,EAAIM,EAAMN,EAAG,EAAIK,EAAML,EAAG,EAAI5F,EAAG4F,EAAG,EAAIW,EAEnD,KACK,CACD,QAASvG,EAAI4F,EAAG,GAAK,EAAG5F,EAAIC,EAAI4F,EAAK7F,GAAK,MAAO,CAE7C,IAAI4H,GAAI5H,EAAI,MACR4H,IAAK3H,IAEL4B,EAAGK,EAAM,EAAK,CAAC,EAAI2D,EACnB+B,GAAI3H,GAERiC,EAAMF,GAAMH,EAAGK,EAAM,EAAGC,EAAI,SAASnC,EAAG4H,EAAC,CAAC,CAC9C,CACAhC,EAAG,EAAI3F,CACX,CACA,OAAO4H,GAAI,EAAG,EAAGnC,EAAMtD,GAAKF,CAAG,EAAIyD,CAAI,CAC3C,EAEImC,GAAsB,UAAY,CAElC,QADI/H,EAAI,IAAI,WAAW,GAAG,EACjBC,EAAI,EAAGA,EAAI,IAAK,EAAEA,EAAG,CAE1B,QADIwB,EAAIxB,EAAG+H,EAAI,EACR,EAAEA,GACLvG,GAAMA,EAAI,GAAM,YAAeA,IAAM,EACzCzB,EAAEC,CAAC,EAAIwB,CACX,CACA,OAAOzB,CACX,EAAG,EAECiI,GAAM,UAAY,CAClB,IAAIxG,EAAI,GACR,MAAO,CACH,EAAG,SAAUhC,EAAG,CAGZ,QADIyI,EAAKzG,EACAxB,EAAI,EAAGA,EAAIR,EAAE,OAAQ,EAAEQ,EAC5BiI,EAAKH,GAAMG,EAAK,IAAOzI,EAAEQ,CAAC,CAAC,EAAKiI,IAAO,EAC3CzG,EAAIyG,CACR,EACA,EAAG,UAAY,CAAE,MAAO,CAACzG,CAAG,CAChC,CACJ,EAyBA,IAAI0G,GAAO,SAAUC,EAAKC,EAAKC,EAAKC,EAAMC,EAAI,CAC1C,GAAI,CAACA,IACDA,EAAK,CAAE,EAAG,CAAE,EACRH,EAAI,YAAY,CAChB,IAAII,EAAOJ,EAAI,WAAW,SAAS,MAAM,EACrCK,EAAS,IAAIC,EAAGF,EAAK,OAASL,EAAI,MAAM,EAC5CM,EAAO,IAAID,CAAI,EACfC,EAAO,IAAIN,EAAKK,EAAK,MAAM,EAC3BL,EAAMM,EACNF,EAAG,EAAIC,EAAK,MAChB,CAEJ,OAAOG,GAAKR,EAAKC,EAAI,OAAS,KAAO,EAAIA,EAAI,MAAOA,EAAI,KAAO,KAAO,KAAK,KAAK,KAAK,IAAI,EAAG,KAAK,IAAI,GAAI,KAAK,IAAID,EAAI,MAAM,CAAC,CAAC,EAAI,GAAG,EAAK,GAAKC,EAAI,IAAMC,EAAKC,EAAMC,CAAE,CAC1K,EAEIK,GAAM,SAAUC,EAAGC,EAAG,CACtB,IAAIC,EAAI,CAAC,EACT,QAASC,KAAKH,EACVE,EAAEC,CAAC,EAAIH,EAAEG,CAAC,EACd,QAASA,KAAKF,EACVC,EAAEC,CAAC,EAAIF,EAAEE,CAAC,EACd,OAAOD,CACX,EAyHA,IAAIE,EAAS,SAAUC,EAAGC,EAAGC,EAAG,CAC5B,KAAOA,EAAG,EAAED,EACRD,EAAEC,CAAC,EAAIC,EAAGA,KAAO,CACzB,EAwJO,SAASC,GAAYC,EAAMC,EAAM,CACpC,OAAOC,GAAKF,EAAMC,GAAQ,CAAC,EAAG,EAAG,CAAC,CACtC,CA2dA,IAAIE,GAAO,SAAUC,EAAGC,EAAGC,EAAGC,EAAG,CAC7B,QAASC,KAAKJ,EAAG,CACb,IAAIK,EAAML,EAAEI,CAAC,EAAGE,EAAIL,EAAIG,EAAGG,EAAKJ,EAC5B,MAAM,QAAQE,CAAG,IACjBE,EAAKC,GAAIL,EAAGE,EAAI,CAAC,CAAC,EAAGA,EAAMA,EAAI,CAAC,GAChCA,aAAeI,EACfP,EAAEI,CAAC,EAAI,CAACD,EAAKE,CAAE,GAEfL,EAAEI,GAAK,GAAG,EAAI,CAAC,IAAIG,EAAG,CAAC,EAAGF,CAAE,EAC5BR,GAAKM,EAAKC,EAAGJ,EAAGC,CAAC,EAEzB,CACJ,EAEIO,GAAK,OAAO,YAAe,KAA6B,IAAI,YAE5DC,GAAK,OAAO,YAAe,KAA6B,IAAI,YAE5DC,GAAM,EACV,GAAI,CACAD,GAAG,OAAOE,GAAI,CAAE,OAAQ,EAAK,CAAC,EAC9BD,GAAM,CACV,MACU,CAAE,CAwGL,SAASE,GAAQC,EAAKC,EAAQ,CACjC,GAAIA,EAAQ,CAER,QADIC,EAAO,IAAIC,EAAGH,EAAI,MAAM,EACnBI,EAAI,EAAGA,EAAIJ,EAAI,OAAQ,EAAEI,EAC9BF,EAAKE,CAAC,EAAIJ,EAAI,WAAWI,CAAC,EAC9B,OAAOF,CACX,CACA,GAAIG,GACA,OAAOA,GAAG,OAAOL,CAAG,EAKxB,QAJIM,EAAIN,EAAI,OACRO,EAAK,IAAIJ,EAAGH,EAAI,QAAUA,EAAI,QAAU,EAAE,EAC1CQ,EAAK,EACLC,EAAI,SAAUC,EAAG,CAAEH,EAAGC,GAAI,EAAIE,CAAG,EAC5BN,EAAI,EAAGA,EAAIE,EAAG,EAAEF,EAAG,CACxB,GAAII,EAAK,EAAID,EAAG,OAAQ,CACpB,IAAII,EAAI,IAAIR,EAAGK,EAAK,GAAMF,EAAIF,GAAM,EAAE,EACtCO,EAAE,IAAIJ,CAAE,EACRA,EAAKI,CACT,CACA,IAAIC,EAAIZ,EAAI,WAAWI,CAAC,EACpBQ,EAAI,KAAOX,EACXQ,EAAEG,CAAC,EACEA,EAAI,MACTH,EAAE,IAAOG,GAAK,CAAE,EAAGH,EAAE,IAAOG,EAAI,EAAG,GAC9BA,EAAI,OAASA,EAAI,OACtBA,EAAI,OAASA,EAAI,SAAeZ,EAAI,WAAW,EAAEI,CAAC,EAAI,KAClDK,EAAE,IAAOG,GAAK,EAAG,EAAGH,EAAE,IAAQG,GAAK,GAAM,EAAG,EAAGH,EAAE,IAAQG,GAAK,EAAK,EAAG,EAAGH,EAAE,IAAOG,EAAI,EAAG,IAE7FH,EAAE,IAAOG,GAAK,EAAG,EAAGH,EAAE,IAAQG,GAAK,EAAK,EAAG,EAAGH,EAAE,IAAOG,EAAI,EAAG,EACtE,CACA,OAAOC,GAAIN,EAAI,EAAGC,CAAE,CACxB,CA2CA,IAAIM,GAAO,SAAUC,EAAI,CACrB,IAAIC,EAAK,EACT,GAAID,EACA,QAASE,KAAKF,EAAI,CACd,IAAIG,EAAIH,EAAGE,CAAC,EAAE,OACVC,EAAI,OACJC,EAAI,CAAC,EACTH,GAAME,EAAI,CACd,CAEJ,OAAOF,CACX,EAEII,GAAM,SAAUC,EAAGC,EAAGC,EAAGC,EAAIC,EAAGC,EAAGC,EAAIC,EAAI,CAC3C,IAAIC,EAAKL,EAAG,OAAQT,EAAKQ,EAAE,MAAOO,EAAMF,GAAMA,EAAG,OAC7CG,EAAMjB,GAAKC,CAAE,EACjBiB,EAAOX,EAAGC,EAAGK,GAAM,KAAO,SAAY,QAAS,EAAGL,GAAK,EACnDK,GAAM,OACNN,EAAEC,GAAG,EAAI,GAAID,EAAEC,GAAG,EAAIC,EAAE,IAC5BF,EAAEC,CAAC,EAAI,GAAIA,GAAK,EAChBD,EAAEC,GAAG,EAAKC,EAAE,MAAQ,GAAMG,EAAI,GAAK,GAAIL,EAAEC,GAAG,EAAIG,GAAK,EACrDJ,EAAEC,GAAG,EAAIC,EAAE,YAAc,IAAKF,EAAEC,GAAG,EAAIC,EAAE,aAAe,EACxD,IAAIU,EAAK,IAAI,KAAKV,EAAE,OAAS,KAAO,KAAK,IAAI,EAAIA,EAAE,KAAK,EAAG,EAAIU,EAAG,YAAY,EAAI,KAkBlF,IAjBI,EAAI,GAAK,EAAI,MACbd,EAAI,EAAE,EACVa,EAAOX,EAAGC,EAAI,GAAK,GAAQW,EAAG,SAAS,EAAI,GAAM,GAAOA,EAAG,QAAQ,GAAK,GAAOA,EAAG,SAAS,GAAK,GAAOA,EAAG,WAAW,GAAK,EAAMA,EAAG,WAAW,GAAK,CAAE,EAAGX,GAAK,EACzJI,GAAK,KACLM,EAAOX,EAAGC,EAAGC,EAAE,GAAG,EAClBS,EAAOX,EAAGC,EAAI,EAAGI,EAAI,EAAI,CAACA,EAAI,EAAIA,CAAC,EACnCM,EAAOX,EAAGC,EAAI,EAAGC,EAAE,IAAI,GAE3BS,EAAOX,EAAGC,EAAI,GAAIO,CAAE,EACpBG,EAAOX,EAAGC,EAAI,GAAIS,CAAG,EAAGT,GAAK,GACzBK,GAAM,OACNK,EAAOX,EAAGC,EAAGQ,CAAG,EAChBE,EAAOX,EAAGC,EAAI,EAAGC,EAAE,KAAK,EACxBS,EAAOX,EAAGC,EAAI,GAAIK,CAAE,EAAGL,GAAK,IAEhCD,EAAE,IAAIG,EAAIF,CAAC,EACXA,GAAKO,EACDE,EACA,QAASd,KAAKF,EAAI,CACd,IAAImB,EAAMnB,EAAGE,CAAC,EAAGC,EAAIgB,EAAI,OACzBF,EAAOX,EAAGC,EAAG,CAACL,CAAC,EACfe,EAAOX,EAAGC,EAAI,EAAGJ,CAAC,EAClBG,EAAE,IAAIa,EAAKZ,EAAI,CAAC,EAAGA,GAAK,EAAIJ,CAChC,CAEJ,OAAIY,IACAT,EAAE,IAAIO,EAAIN,CAAC,EAAGA,GAAKQ,GAChBR,CACX,EAEIa,GAAM,SAAUC,EAAGd,EAAGI,EAAGL,EAAGgB,EAAG,CAC/BL,EAAOI,EAAGd,EAAG,SAAS,EACtBU,EAAOI,EAAGd,EAAI,EAAGI,CAAC,EAClBM,EAAOI,EAAGd,EAAI,GAAII,CAAC,EACnBM,EAAOI,EAAGd,EAAI,GAAID,CAAC,EACnBW,EAAOI,EAAGd,EAAI,GAAIe,CAAC,CACvB,EAkXO,SAASC,GAAQC,EAAMC,EAAM,CAC3BA,IACDA,EAAO,CAAC,GACZ,IAAI,EAAI,CAAC,EACLC,EAAQ,CAAC,EACbC,GAAKH,EAAM,GAAI,EAAGC,CAAI,EACtB,IAAIG,EAAI,EACJC,EAAM,EACV,QAASC,KAAM,EAAG,CACd,IAAIC,EAAK,EAAED,CAAE,EAAGE,EAAOD,EAAG,CAAC,EAAGE,EAAIF,EAAG,CAAC,EAClCG,EAAcD,EAAE,OAAS,EAAI,EAAI,EACjCE,EAAIC,GAAQN,CAAE,EAAGO,EAAIF,EAAE,OACvBG,EAAML,EAAE,QAAS,EAAIK,GAAOF,GAAQE,CAAG,EAAGC,EAAK,GAAK,EAAE,OACtDC,EAAMC,GAAKR,EAAE,KAAK,EAClBI,EAAI,OACJK,EAAI,EAAE,EACV,IAAIC,EAAIT,EAAcU,GAAYZ,EAAMC,CAAC,EAAID,EAAMa,EAAIF,EAAE,OACrDG,EAAIC,GAAI,EACZD,EAAE,EAAEd,CAAI,EACRN,EAAM,KAAKsB,GAAIf,EAAG,CACd,KAAMD,EAAK,OACX,IAAKc,EAAE,EAAE,EACT,EAAGH,EACH,EAAGR,EACH,EACA,EAAGE,GAAKP,EAAG,QAAW,GAAMQ,EAAI,QAAUC,EAC1C,EAAGX,EACH,YAAaM,CACjB,CAAC,CAAC,EACFN,GAAK,GAAKS,EAAIG,EAAMK,EACpBhB,GAAO,GAAK,GAAKQ,EAAIG,IAAQD,GAAM,GAAKM,CAC5C,CAEA,QADII,EAAM,IAAIC,EAAGrB,EAAM,EAAE,EAAGsB,EAAKvB,EAAGwB,EAAMvB,EAAMD,EACvCyB,EAAI,EAAGA,EAAI3B,EAAM,OAAQ,EAAE2B,EAAG,CACnC,IAAIlB,EAAIT,EAAM2B,CAAC,EACfC,GAAIL,EAAKd,EAAE,EAAGA,EAAGA,EAAE,EAAGA,EAAE,EAAGA,EAAE,EAAE,MAAM,EACrC,IAAIoB,EAAO,GAAKpB,EAAE,EAAE,OAASM,GAAKN,EAAE,KAAK,EACzCc,EAAI,IAAId,EAAE,EAAGA,EAAE,EAAIoB,CAAI,EACvBD,GAAIL,EAAKrB,EAAGO,EAAGA,EAAE,EAAGA,EAAE,EAAGA,EAAE,EAAE,OAAQA,EAAE,EAAGA,EAAE,CAAC,EAAGP,GAAK,GAAK2B,GAAQpB,EAAE,EAAIA,EAAE,EAAE,OAAS,EACzF,CACA,OAAAqB,GAAIP,EAAKrB,EAAGF,EAAM,OAAQ0B,EAAKD,CAAE,EAC1BF,CACX,CDnrEA,IAAMQ,GAAwC,CAC1C,QAAS,MACT,KAAM,UACN,KAAM,UACN,WAAY,KAChB,EACMC,GAAiB,kBACjBC,GAAe,2BAErB,OAAO,IAAM,UAAW,CAEpB,IAAMC,EAAU,SAAS,aAAa,QAAQ,wBAAwB,GAAK,GAAI,EAAE,EACjF,GAAIA,IAAY,EAAG,CACf,MAAM,oDAAoDA,CAAO,EAAE,EACnE,MACJ,CAGA,IAAMC,EAAsC,CAAC,EACvCC,EAAoC,CAAC,EAC3C,OAAW,CAACC,EAAKC,CAAK,IAAK,OAAO,QAAQ,YAAY,EAAG,CACrD,GAAI,CAACD,EAAI,WAAW,UAAU,EAC1B,SAGJ,IAAME,EAAQN,GAAa,KAAKI,CAAG,EACnC,GAAI,CAACE,EAAO,CACR,QAAQ,IAAI,8BAA8BF,CAAG,EAAE,EAC/C,QACJ,CAGA,IAAMG,EAAY,GAAGD,EAAM,CAAC,CAAC,IAAIA,EAAM,CAAC,CAAC,GACpCH,EAAUI,CAAS,IACpBJ,EAAUI,CAAS,EAAI,GAE3BJ,EAAUI,CAAS,IACnB,IAAMC,EAAoBL,EAAUI,CAAS,EAAI,EAAI,IAAIJ,EAAUI,CAAS,CAAC,GAAK,GAC5EE,EAAW,mBAAmBH,EAAM,CAAC,CAAC,GAAGE,CAAiB,IAAIV,GAAcQ,EAAM,CAAC,CAAC,GAAKA,EAAM,CAAC,GAAK,SAAS,GAG9GI,EAAW,aAAa,QAAQ,UAAYN,EAAI,UAAU,CAAC,CAAC,EAC5DO,EAAWD,EAAW,SAASX,GAAe,KAAKW,CAAQ,EAAG,CAAC,CAAC,EAAI,KAAK,IAAI,EAGnFR,EAAMO,CAAQ,EAAI,CAACG,GAAiBP,CAAK,EAAG,CAAC,MAAOM,CAAQ,CAAC,CACjE,CAEA,IAAME,EAAWC,GAAQZ,CAAK,EAC9B,GAAAa,QAAU,OAAO,IAAI,KAAK,CAACF,CAAQ,CAAC,EAAG,qBAAqB,CAChE",
  "names": ["b", "a", "c", "d", "g", "f", "h", "i", "j", "e", "k", "l", "m", "module", "pairStrings", "lookupE", "lookupD", "pairString", "r", "encodeRepertoire", "pair", "first", "last", "codePoint", "numZBits", "chr", "z", "decode", "str", "length", "uint8Array", "numUint8s", "uint8", "numUint8Bits", "i", "chr", "lookupD", "numZBits", "z", "j", "bit", "import_file_saver", "u8", "u16", "i32", "fleb", "fdeb", "clim", "freb", "eb", "start", "b", "i", "r", "j", "_a", "fl", "revfl", "_b", "fd", "revfd", "rev", "x", "hMap", "cd", "mb", "s", "l", "le", "co", "rvb", "sv", "r_1", "v", "m", "flt", "fdt", "flm", "fdm", "hMap", "fdt", "shft", "p", "slc", "v", "s", "e", "u8", "ec", "err", "ind", "msg", "nt", "wbits", "d", "p", "v", "o", "wbits16", "hTree", "mb", "t", "i", "s", "t2", "et", "u8", "a", "b", "l", "r", "i0", "i1", "i2", "maxSym", "tr", "u16", "mbt", "ln", "dt", "lft", "cst", "i2_1", "i2_2", "i2_3", "lc", "c", "cl", "cli", "cln", "cls", "w", "clen", "cf", "wfblk", "out", "pos", "dat", "shft", "wblk", "final", "syms", "lf", "df", "eb", "li", "bs", "bl", "_a", "dlt", "mlb", "_b", "ddt", "mdb", "_c", "lclt", "nlc", "_d", "lcdt", "ndc", "lcfreq", "_e", "lct", "mlcb", "nlcc", "clim", "flen", "ftlen", "flt", "fdt", "dtlen", "lm", "ll", "dm", "dl", "hMap", "llm", "lcts", "it", "clct", "len", "flm", "fdm", "sym", "fleb", "dst", "fdeb", "deo", "i32", "dflt", "lvl", "plvl", "pre", "post", "st", "lst", "opt", "n", "msk_1", "prev", "head", "bs1_1", "bs2_1", "hsh", "lc_1", "wi", "hv", "imod", "pimod", "rem", "j", "ch_1", "dif", "maxn", "maxd", "ml", "nl", "mmd", "md", "ti", "pti", "cd", "revfl", "revfd", "lin", "din", "e", "slc", "crct", "k", "crc", "cr", "dopt", "dat", "opt", "pre", "post", "st", "dict", "newDat", "u8", "dflt", "mrg", "a", "b", "o", "k", "wbytes", "d", "b", "v", "deflateSync", "data", "opts", "dopt", "fltn", "d", "p", "t", "o", "k", "val", "n", "op", "mrg", "u8", "te", "td", "tds", "et", "strToU8", "str", "latin1", "ar_1", "u8", "i", "te", "l", "ar", "ai", "w", "v", "n", "c", "slc", "exfl", "ex", "le", "k", "l", "err", "wzh", "d", "b", "f", "fn", "u", "c", "ce", "co", "fl", "col", "exl", "wbytes", "dt", "exf", "wzf", "o", "e", "zipSync", "data", "opts", "files", "fltn", "o", "tot", "fn", "_a", "file", "p", "compression", "f", "strToU8", "s", "com", "ms", "exl", "exfl", "err", "d", "deflateSync", "l", "c", "crc", "mrg", "out", "u8", "oe", "cdl", "i", "wzh", "badd", "wzf", "extension_map", "metadata_parts", "record_parts", "version", "files", "filenames", "key", "value", "match", "files_key", "duplicate_counter", "filename", "metadata", "modified", "decode", "zip_file", "zipSync", "filesaver"]
}

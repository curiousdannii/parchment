{
  "version": 3,
  "sources": ["../../src/upstream/quixe/src/quixe/quixe.js", "../../src/upstream/quixe/src/quixe/gi_dispa.js", "../../src/upstream/quixe/src/quixe/gi_load.js", "../../src/common/quixe.js"],
  "sourcesContent": ["'use strict';\n\n/* Quixe -- a Glulx VM interpreter written in Javascript\n * Designed by Andrew Plotkin <erkyrath@eblong.com>\n * <http://eblong.com/zarf/glulx/quixe/>\n * \n * This Javascript library is copyright 2010-2022 by Andrew Plotkin.\n * It is distributed under the MIT license; see the \"LICENSE\" file.\n *\n * For documentation, see the README.txt or the web page noted above.\n * For information on getting Quixe installed on a web page, see the\n * comments in the gi_load.js file.\n *\n * This library makes use of jQuery utility functions (but it does not\n * manipulate DOM). It has been tested with jQuery 1.11.2 (included),\n * but should work equally well with jQuery 2.\n *\n *\n * Some interpreter behaviors can be customized by adding attributes to\n * the game_options object. (See gi_load.js for more about this object.)\n * Quixe currently understands these options:\n *\n *   log_execution_time: If true, a console message will be logged every\n *     turn, indicating how many milliseconds the turn took to execute.\n *\n *   rethrow_exceptions: If true, any fatal VM errors encountered during\n *     play will be allowed to bubble up to the browser. If you're using\n *     a browser debugging facility, this may give you more information\n *     than the usual red \"fatal-error\" banner.\n *\n *   debug_info_chunk: If true, Quixe loads a \"Dbug\" chunk from the\n *     blorb file. The chunk should contain the gameinfo.dbg data\n *     generated by the Inform compiler when the game was compiled.\n *\n *   do_vm_autosave: If true, Quixe tries to load an autosave file at\n *     startup (via the Dialog class) and then autosave every turn.\n *\n *   clear_vm_autosave: If true, Quixe will delete any autosave file\n *     at startup and then start up normally.\n *\n * The point of the debug_info_chunk option is that if a fatal error\n * occurs, the browser's debug console will show the I6 stack dump at\n * the point of the error; and this dump will contain both the name and\n * address of every I6 function on the stack.\n *\n * To set this up, you need to use the blorbtool.py script to add the\n * gameinfo.dbg file to the compiled blorb:\n *\n *   blorbtool.py test.gblorb import Dbug gameinfo.dbg\n *\n * Then add \"debug_info_chunk: true\" to the game_options object.\n */\n\n// ### Optimizations I have not yet tried:\n// Using JS array types. This didn't prove to be a speedup a few years\n//   ago, but maybe engines have improved. The raw Blorb loading delay\n//   might also benefit from this.\n// Change memory to an array of 4-byte values. Inline Mem4 and Mem4W when\n//   address is known to be aligned.\n// Inline Mem1 wherever possible.\n// Compile \"@mul 2 x\" amd \"@mul x 2\" as a bit-shift (similarly other\n//   power-of-2 constants).\n// Is \"x instanceof Function\" efficient? Should compile_string return a \n//   tiny tagged object instead?\n// Probably don't want to cache string-functions in filter mode.\n// If a compiled path has no iosys dependencies, we could cache it in\n//   all three iosys caches for the function.\n// Also: put in debug asserts for valid stack values (at push/pop)\n//   (check isFinite and non-negative)\n// Should we be caching arrays instead of strings?\n\n/* All state is contained in QuixeClass. */\n\nvar QuixeClass = function() {\n\n/* Create the \"self\" object. (No relation to the Inform \"self\" global.) */\nvar self = {};\n\n/* This is called by the page (or the page's loader library) when it\n   starts up. It must be called before quixe_start().\n\n   (NOTE: In older versions of this code, quixe_init() was called\n   quixe_prepare(), and quixe_start() was called quixe_init(). This was\n   confusing and inconsistent with the rest of the ecosystem. I renamed\n   them as of 2.2.0.)\n\n   The first argument is the game file image, encoded as an array of byte\n   values (integers between 0 and 255). It is stashed away for when\n   the game is started up.\n\n   The (optional) second object supplies execution options.\n\n   This also computes the game signature, which is a 64-character string\n   unique to the game. (In fact it is just the first 64 bytes of the\n   game file, encoded as hexadecimal digits.)\n*/\nfunction quixe_init(image, all_options) {\n    self.GiDispa = all_options.GiDispa;\n    self.GiLoad = all_options.GiLoad;\n    self.Glk = all_options.io;\n    \n    game_image = image;\n\n    var ls = game_image.slice(0, 64);\n    var ix, val;\n    for (ix=0; ix<ls.length; ix++) {\n        val = ls[ix].toString(16);\n        if (val.length < 2)\n            val = \"0\" + val;\n        ls[ix] = val;\n    }\n    game_signature = ls.join('');\n\n    if (all_options) {\n        opt_log_execution_time = all_options.log_execution_time;\n        opt_rethrow_exceptions = all_options.rethrow_exceptions;\n        opt_do_vm_autosave = all_options.do_vm_autosave;\n        opt_clear_vm_autosave = all_options.clear_vm_autosave;\n    }\n\n    if (all_options && all_options.debug_info_chunk) {\n        parse_inform_debug_data();\n    }\n}\n\nfunction quixe_inited() {\n    return (game_image != null);\n}\n\nfunction quixe_getlibrary(val) {\n    switch (val) {\n        case 'GiDispa': return self.GiDispa;\n        case 'GiLoad': return self.GiLoad;\n        case 'Glk': return self.Glk;\n        case 'GlkOte': return self.Glk.getlibrary('GlkOte');\n        case 'Dialog': return self.Glk.getlibrary('Dialog');\n    }\n    /* Unrecognized library name. */\n    return null;\n}\n    \n/* This is called by the page (or the page's display library) when it\n   starts up. It executes until the first glk_select() or glk_exit().\n*/\nfunction quixe_start() {\n    if (self.vm_started) {\n        self.Glk.fatal_error(\"Quixe was inited twice!\");\n        return;\n    }\n\n    try {\n        setup_bytestring_table();\n        setup_operandlist_table();\n\n        setup_vm();\n        execute_loop();\n    }\n    catch (ex) {\n        if (ex.stack)\n            qlog('JS stack dump A:\\n' + ex.stack);\n        qstackdump();\n        self.Glk.fatal_error(\"Quixe init: \" + show_exception(ex));\n        if (true || opt_rethrow_exceptions)\n            throw ex;\n    }\n}\n\n/* This is called by the page after a \"blocking\" operation completes.\n   (That is, a user event has triggered the completion of glk_select()\n   or glk_fileref_create_by_prompt().)\n   It executes until the next glk_select() or glk_exit().\n\n   The argument is only defined when resuming from an operation that\n   returns a value -- i.e. glk_fileref_create_by_prompt(). But we ignore\n   it anyhow, because that return value was handled by GiDispa. (See\n   SetResumeStore() below.)\n*/\nfunction quixe_resume(argument) {\n    try {\n        self.done_executing = self.vm_stopped;\n        execute_loop();\n    }\n    catch (ex) {\n        if (ex.stack)\n            qlog('JS stack dump B:\\n' + ex.stack);\n        qstackdump();\n        self.Glk.fatal_error(\"Quixe run: \" + show_exception(ex));\n        if (opt_rethrow_exceptions)\n            throw ex;\n    }\n}\n\n/* Exception objects are hard to display in Javascript. This is a rough\n   attempt.\n*/\nfunction show_exception(ex) {\n    if (typeof(ex) == 'string')\n        return ex;\n    var res = ex.toString();\n    if (ex.message)\n        res = res + ' ' + ex.message;\n    if (ex.fileName)\n        res = res + ' ' + ex.fileName;\n    if (ex.lineNumber)\n        res = res + ' line:' + ex.lineNumber;\n    if (ex.name)\n        res = res + ' ' + ex.name;\n    if (ex.number)\n        res = res + ' ' + ex.number;\n    return res;\n}\n\n/* Log the message in the browser's error log, if it has one. (This shows\n   up in Safari, in Opera, and in Firefox if you have Firebug installed.)\n*/\nfunction qlog(msg) {\n    if (window.console && console.log)\n        console.log(msg);\n    else if (window.opera && opera.postError)\n        opera.postError(msg);\n}\n\n/* This returns a string displaying an object and all its properties.\n   It's not used in the normal course of execution, but some (commented-out)\n   debug log message use it.\n*/\nfunction qobjdump(obj, depth) {\n    var key, proplist;\n\n    if (jQuery.type(obj) === 'array') {\n        if (depth)\n            depth--;\n        var ls = jQuery.map(obj, function(v, ix) {return qobjdump(v, depth);});\n        return (\"[\" + ls.join(\",\") + \"]\");\n    }\n    if (!(jQuery.type(obj) === 'object'))\n        return (\"\"+obj);\n\n    proplist = [ ];\n    for (key in obj) {\n        var val = obj[key];\n        if (depth && jQuery.type(val) === 'object')\n            val = qobjdump(val, depth-1);\n        proplist.push(key + \":\" + val);\n    }\n    return \"{ \" + proplist.join(\", \") + \" }\";\n}\n\n/* Print the VM stack as a log message.\n */\nfunction qstackdump() {\n    if (!stack || !stack.length)\n        return;\n    var ix, val, debugfunc;\n    var frm;\n    var ls = [];\n    for (ix=0; ix<stack.length; ix++) {\n        frm = stack[ix];\n        if (!frm.vmfunc.funcaddr) {\n            // Can't get information from a ghost vmfunc.\n            ls.push(\"(anonymous)\");\n            continue;\n        }\n        val = \"0x\"+frm.vmfunc.funcaddr.toString(16);\n        debugfunc = debuginfo.functionmap[frm.vmfunc.funcaddr];\n        if (debugfunc)\n            val = val + (\" \\\"\" + debugfunc.name + \"\\\"\");\n        ls.push(val);\n    }\n    qlog(\"VM stack dump: \" + ls.join(\", \"));\n}\n\n/* Polyfill for Math.imul, if necessary. (This affects the global Math\n   namespace at load time, which is ugly, but only on ancient browsers.)\n*/\nif (Math.imul === undefined) {\n    qlog(\"Polyfilling Math.imul().\");\n    /* Code from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul */\n    Math.imul = function(a, b) {\n        var ah = (a >>> 16) & 0xffff;\n        var al = a & 0xffff;\n        var bh = (b >>> 16) & 0xffff;\n        var bl = b & 0xffff;\n        // the shift by 0 fixes the sign on the high part\n        // the final |0 converts the unsigned value into a signed value\n        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);\n    };\n}\n\n/* Fast char-to-hex and char-to-quoted-char conversion tables. \n   setup_bytestring_table() is called once, at startup time.\n*/\nvar bytestring_table = Array(256);\nvar quotechar_table = Array(256);\nfunction setup_bytestring_table() {\n    var ix, val;\n    for (ix=0; ix<0x100; ix++) {\n        val = ix.toString(16);\n        if (ix<0x10)\n            val = \"0\" + val;\n        bytestring_table[ix] = val;\n    }\n\n    for (ix=0; ix<0x100; ix++) {\n        if (ix >= 0x20 && ix < 0x7f) {\n            /* Escape quote, double-quote, backslash. */\n            if (ix == 0x22 || ix == 0x27 || ix == 0x5c)\n                val = \"\\\\\"+String.fromCharCode(ix);\n            else\n                val = String.fromCharCode(ix);\n        }\n        else if (ix == 0x0a) {\n            val = \"\\\\n\";\n        }\n        else {\n            val = \"\\\\x\" + bytestring_table[ix];\n        }\n        quotechar_table[ix] = val;\n    }\n}\n\n/* Functions to read values from memory (or other byte-arrays). These must\n   always produce unsigned integers.\n\n   We use arithmetic rather than bitwise operations. *,+ are slightly slower\n   than <<,| but *,+ produce positive results, whereas <<,| produces a signed\n   result for values over 0x80000000. So we save the cost of the >>>0, which\n   is worthwhile.\n*/\n\nfunction ByteRead4(arr, addr) {\n    return (arr[addr] * 0x1000000) + (arr[addr+1] * 0x10000) \n        + (arr[addr+2] * 0x100) + (arr[addr+3]);\n}\nfunction ByteRead2(arr, addr) {\n    return (arr[addr] * 0x100) + (arr[addr+1]);\n}\nfunction ByteRead1(arr, addr) {\n    return arr[addr];\n}\n\nfunction Mem1(addr) {\n    return memmap[addr];\n}\nfunction Mem2(addr) {\n    return (memmap[addr] * 0x100) + (memmap[addr+1]);\n}\nfunction Mem4(addr) {\n    return (memmap[addr] * 0x1000000) + (memmap[addr+1] * 0x10000) \n        + (memmap[addr+2] * 0x100) + (memmap[addr+3]);\n}\nfunction MemSlice(addr, length) {\n    return memmap.slice(addr, addr + length);\n}\nfunction MemW1(addr, val) {\n    // ignore high bytes if necessary\n    memmap[addr] = val & 0xFF;\n}\nfunction MemW2(addr, val) {\n    // ignore high bytes if necessary\n    memmap[addr] = (val >> 8) & 0xFF;\n    memmap[addr+1] = val & 0xFF;\n}\nfunction MemW4(addr, val) {\n    memmap[addr]   = (val >> 24) & 0xFF;\n    memmap[addr+1] = (val >> 16) & 0xFF;\n    memmap[addr+2] = (val >> 8) & 0xFF;\n    memmap[addr+3] = val & 0xFF;\n}\n\nself.Mem1 = Mem1;\nself.Mem2 = Mem2;\nself.Mem4 = Mem4;\nself.MemSlice = MemSlice;\nself.MemW1 = MemW1;\nself.MemW2 = MemW2;\nself.MemW4 = MemW4;\n\nfunction BytePushString(arr, str) {\n    for (var ix = 0; ix < str.length; ix++) {\n        arr.push(str.charCodeAt(ix));\n    }\n}\nfunction BytePush4(arr, val) {\n    arr.push((val >> 24) & 0xFF);\n    arr.push((val >> 16) & 0xFF);\n    arr.push((val >> 8) & 0xFF);\n    arr.push(val & 0xFF);\n}\nfunction BytePush2(arr, val) {\n    arr.push((val >> 8) & 0xFF);\n    arr.push(val & 0xFF);\n}\nfunction BytePush1(arr, val) {\n    arr.push(val & 0xFF);\n}\nfunction ByteWrite4(arr, addr, val) {\n    arr[addr]   = (val >> 24) & 0xFF;\n    arr[addr+1] = (val >> 16) & 0xFF;\n    arr[addr+2] = (val >> 8) & 0xFF;\n    arr[addr+3] = val & 0xFF;\n}\nfunction ByteReadString(arr, addr, len) {\n    return String.fromCharCode.apply(this, arr.slice(addr, addr+len));\n}\n\nfunction QuoteMem1(addr) {\n    if (memmap[addr] >= 0x80)\n        return \"0xffffff\" + bytestring_table[memmap[addr]];\n    return \"0x\" + bytestring_table[memmap[addr]];\n}\nfunction QuoteMem2(addr) {\n    if (memmap[addr] >= 0x80) \n        return \"0xffff\" + bytestring_table[memmap[addr]] + bytestring_table[memmap[addr+1]];\n    if (memmap[addr]) \n        return \"0x\" + bytestring_table[memmap[addr]] + bytestring_table[memmap[addr+1]];\n    return \"0x\" + bytestring_table[memmap[addr+1]];\n}\nfunction QuoteMem4(addr) {\n    if (memmap[addr]) \n        return \"0x\" + bytestring_table[memmap[addr]] + bytestring_table[memmap[addr+1]] + bytestring_table[memmap[addr+2]] + bytestring_table[memmap[addr+3]];\n    if (memmap[addr+1]) \n        return \"0x\" + bytestring_table[memmap[addr+1]] + bytestring_table[memmap[addr+2]] + bytestring_table[memmap[addr+3]];\n    if (memmap[addr+2]) \n        return \"0x\" + bytestring_table[memmap[addr+2]] + bytestring_table[memmap[addr+3]];\n    return \"0x\" + bytestring_table[memmap[addr+3]];\n}\n\nfunction ReadArgByte(addr) {\n    if (addr == 0xffffffff)\n        return self.frame.valstack.pop() & 0xFF;\n    else\n        return Mem1(addr);\n}\n\nfunction WriteArgByte(addr, val) {\n    if (addr == 0xffffffff)\n        self.frame.valstack.push(val & 0xFF);\n    else\n        MemW1(addr, val);\n}\n\nfunction ReadArgWord(addr) {\n    if (addr == 0xffffffff)\n        return self.frame.valstack.pop();\n    else\n        return Mem4(addr);\n}\n\nfunction WriteArgWord(addr, val) {\n    if (addr == 0xffffffff)\n        self.frame.valstack.push(val);\n    else\n        MemW4(addr, val);\n}\n\nfunction ReadStructField(addr, fieldnum) {\n    if (addr == 0xffffffff)\n        return self.frame.valstack.pop();\n    else\n        return Mem4(addr + 4*fieldnum);\n}\n\nfunction WriteStructField(addr, fieldnum, val) {\n    if (addr == 0xffffffff)\n        self.frame.valstack.push(val);\n    else\n        MemW4(addr + 4*fieldnum, val);\n}\n\n/* GiDispa calls this, right before resuming execution at the end of a\n   blocking Glk call. The value passed in is the result of the Glk\n   call, which may have to be stored in a local variable or wherever.\n   (This is only really relevant for glk_fileref_create_by_prompt(),\n   since it's the only non-void blocking Glk call.)\n*/\nfunction SetResumeStore(val) {\n    self.resumevalue = val;\n}\n\n/* Convert a 32-bit Unicode value to a JS string. */\nfunction CharToString(val) {\n    if (val < 0x10000) {\n        return String.fromCharCode(val);\n    }\n    else {\n        val -= 0x10000;\n        return String.fromCharCode(0xD800 + (val >> 10), 0xDC00 + (val & 0x3FF));\n    }\n}\n\n/* Convert a 32-bit Unicode value to a fragment of a JS string literal.\n   That is, eval('\"'+QuoteCharToString(val)+'\"') == CharToString(val).\n*/\nfunction QuoteCharToString(val) {\n    if (val < 0x100) {\n        return quotechar_table[val];\n    }\n    else if (val < 0x10000) {\n        val = val.toString(16);\n        while (val.length < 4)\n            val = \"0\"+val;\n        return (\"\\\\u\" + val);\n    }\n    else {\n        var val2;\n        val -= 0x10000;\n        val2 = 0xD800 + (val >> 10);\n        val = 0xDC00 + (val & 0x3FF);\n        return (\"\\\\u\" + val2.toString(16) + \"\\\\u\" + val.toString(16));\n    }\n}\n\n/* Turn a length-1 string to a fragment of a JS string literal.\n*/\nfunction QuoteStr1ToString(val) {\n    return QuoteCharToString(val.charCodeAt(0));\n}\n\nvar regexp_string_unsafe = /[^a-zA-Z0-9 .,;:?!=_+()-]/g;\n\nfunction QuoteEscapeString(val) {\n    val = val.replace(regexp_string_unsafe, QuoteStr1ToString);\n    return '\"' + val + '\"';\n}\n\n/* All fatal errors in the interpreter call this. It just converts the\n   arguments to a nicely-formatted string, and then throws the string\n   as an exception. The top-level quixe_start() or quixe_resume() will\n   catch the exception and display it.\n*/\nfunction fatal_error(msg) {\n    var ix, val;\n    if (arguments.length > 1) {\n        msg += \" (\";\n        for (ix = 1; ix < arguments.length; ix++) {\n            val = arguments[ix];\n            if (typeof(val) == 'number') {\n                val = val.toString(16);\n            }\n            else {\n                val = \"\"+val;\n            }\n            if (ix != 1)\n                msg += \" \";\n            msg += val;\n        }\n        msg += \")\";\n    }\n    qlog(msg);//###debug\n    throw(new Error(msg));\n}\nself.fatal_error = fatal_error;\n\n/* Turn a string containing JS statements into a function object that\n   executes those statements. The funcname is unfortunately not used.\n   (This function used to use eval(), which let you sneak the funcname\n   in for debugging purposes.)\n\n   The function runs in global scope, rather than our Quixe environment.\n   Private Quixe variables are not available. To work around this, the\n   function's first argument must be \"self\"; the caller must pass in the\n   global self object.\n\n   If arg1, arg2 are provided, they become additional function arguments.\n   (Currently limited to two.)\n*/\nfunction make_code(val, funcname, arg1, arg2) {\n    var func;\n    if (funcname === undefined)\n        funcname = '_func';\n    if (arg1 === undefined)\n        func = new Function('self', val);\n    else if (arg2 === undefined)\n        func = new Function('self', arg1, val);\n    else\n        func = new Function('self', arg1, arg2, val);\n    return func;\n}\n\n/* Constructor: VMFunc\n\n   Everything we know about a function. This includes the layout of the local\n   variables, the compiled paths for various start points within the function,\n   and the addresses known to be start points.\n\n   If the function is not in ROM, we still create this, but we will not\n   add it to the permanent vmfunc_table.\n*/\nfunction VMFunc(funcaddr, startpc, localsformat, rawformat) {\n    if (!funcaddr) {\n        this.funcaddr = null;\n        this.startpc = null;\n        this.functype = null;\n    }\n    else {\n        this.funcaddr = funcaddr;\n        this.startpc = startpc;\n        this.functype = Mem1(funcaddr); /* 0xC0 or 0xC1 */\n    }\n\n    /* Addresses of all known (or predicted) paths for this function. */\n    this.pathaddrs = {};\n    /* The path tables for the various iosys modes. And yes, they are keyed\n       on integers. */\n    this[0] = {};\n    this[1] = {};\n    this[2] = {};\n\n    this.locallen = null;\n    this.localsformat = localsformat; /* array of {size, count} */\n    this.rawformat = rawformat; /* array of bytes (multiple of 4) */\n    this.localsindex = []; /* array of {size, pos} */\n\n    /* Create a locals index, according to the format. This will \n       contain one {size, pos} per local.\n\n       This is wacky, because it's not a simple list of values. A local is\n       accessed by its byte position, assuming the \"natural\" four-byte word\n       size. So the first (4-byte) local will be locals[0], the second will \n       be locals[4], and so on. In-between values will be undefined. */\n    var ix, jx;\n    var locallen = 0;\n    for (ix=0; ix<this.localsformat.length; ix++) {\n        var form = this.localsformat[ix];\n\n        /* Pad to 4-byte or 2-byte alignment if these locals are 4 or 2\n           bytes long. */\n        if (form.size == 4) {\n            while (locallen & 3)\n                locallen++;\n        }\n        else if (form.size == 2) {\n            while (locallen & 1)\n                locallen++;\n        }\n        /* else no padding */\n\n        for (jx=0; jx<form.count; jx++) {\n            this.localsindex.push({ size:form.size, pos:locallen });\n            locallen += form.size;\n        }\n    }\n\n    /* Pad the locals to 4-byte alignment. */\n    while (locallen & 3)\n        locallen++;\n    this.locallen = locallen;\n}\n\n/* Constructor: StackFrame\n\n   One stack frame on the execution stack. This includes local variables\n   and the value stack. It does not contain the spec-defined byte sequence\n   for the stack frame; we generate that at save time.\n\n   If we're deserializing a saved game, the vmfunc isn't a \"real\" vmfunc,\n   but a ghost built from the saved stack frame. In particular, \n   vmfunc.funcaddr and vmfunc.startpc are null.\n*/\nfunction StackFrame(vmfunc) {\n    var ix;\n\n    this.vmfunc = vmfunc; /* the VMFunc that is running in this frame */\n    this.depth = null;\n    this.framestart = null; /* stack position where this frame starts */\n    this.framelen = null; /* as in C */\n    this.valstack = [];\n    this.localspos = null; /* as in C */\n\n    this.localsindex = vmfunc.localsindex;\n    this.locals = [];\n\n    /* Create a locals array, according to the index. All locals begin \n       with a value of zero. */\n    for (ix=0; ix<this.localsindex.length; ix++) {\n        var form = this.localsindex[ix];\n        this.locals[form.pos] = 0;\n    }\n\n    /* Note: I tried building that array in the VMFunc constructor,\n       so that I could do a fast clone here. Turns out it was\n       actually slower that way. Pity. */\n\n    this.framelen = 8 + vmfunc.rawformat.length + vmfunc.locallen;\n\n    //qlog(\"### frame for \" + vmfunc.funcaddr.toString(16) + \": framelen \" + this.framelen + \", locindex \" + qobjdump(this.localsindex) + \", locals \" + qobjdump(this.locals));\n}\n\n/* Make a deep copy of a stack frame. This is used in vm_saveundo().\n*/\nfunction clone_stackframe(frame) {\n    var other = new StackFrame(frame.vmfunc);\n    other.depth = frame.depth;\n    other.framestart = frame.framestart;\n    other.framelen = frame.framelen;\n    other.valstack = frame.valstack.slice(0);\n    other.localspos = frame.localspos;\n    other.locals = frame.locals.slice(0);\n    other.framelen = frame.framelen;\n    return other;\n}\n\n/* Serialize a stack frame and push it onto the end of a byte array.\n   The frame must end in a call stub (or we won't be able to read it back in).\n   See the spec at http://www.eblong.com/zarf/glulx/glulx-spec_1.html#s.3.1\n*/\nfunction push_serialized_stackframe(frame, arr) {\n    // Frame length and format of locals.\n    BytePush4(arr, frame.framelen);\n    var rawformat = frame.vmfunc.rawformat;\n    BytePush4(arr, 8 + rawformat.length);\n    for (var i = 0; i < rawformat.length; i++) {\n        arr.push(rawformat[i]);\n    }\n    \n    // Local variables, plus any necessary padding.\n    for (var i = 0; i < frame.vmfunc.localsindex.length; i++) {\n        var form = frame.vmfunc.localsindex[i];\n        if (form.size == 4) {\n            while (arr.length & 3)\n                arr.push(0);\n            BytePush4(arr, frame.locals[form.pos]);\n        }\n        else if (form.size == 2) {\n            while (arr.length & 1)\n                arr.push(0);\n            BytePush2(arr, frame.locals[form.pos]);\n        }\n        else {\n            BytePush1(arr, frame.locals[form.pos]);\n        }\n    }\n    while (arr.length & 3)\n        arr.push(0);\n    \n    // Value stack.\n    for (var i = 0; i < frame.valstack.length; i++) {\n        BytePush4(arr, frame.valstack[i]);\n    }\n}\n    \n/* Pop a stack frame from the end of the given byte array.\n   Returns a deserialized StackFrame object, or undefined on failure.\n */\nfunction pop_deserialized_stackframe(arr) {\n    // The last 4 bytes should be the frame pointer.\n    var frameptr = ByteRead4(arr, arr.length - 4);\n    if (frameptr < 0 || frameptr >= arr.length) {\n        qlog(\"Bad frameptr in serialized stack frame\");\n        return undefined;\n    }\n    arr = arr.splice(frameptr, arr.length);\n    \n    // Frame length and locals format. We'll need this to build a fake\n    // stack frame.\n    var framelen = ByteRead4(arr, 0);\n    var localspos = ByteRead4(arr, 4);\n\n    var rawformat = arr.slice(8, localspos);\n\n    /* Go through the function's locals-format list, and construct a\n       slightly nicer description of the locals. (An array of [size, num].) */\n    var localsformat = [];\n    var addr = 8;\n    while (1) {\n        /* Grab two bytes from the locals-format list. These are \n           unsigned (0..255 range). */\n        var loctype = ByteRead1(arr, addr);\n        addr++;\n        var locnum = ByteRead1(arr, addr);\n        addr++;\n\n        if (loctype == 0) {\n            break;\n        }\n        if (loctype != 1 && loctype != 2 && loctype != 4) {\n            fatal_error(\"Invalid local variable size in function header.\", loctype);\n        }\n        \n        localsformat.push({ size:loctype, count:locnum });\n    }\n\n    // Build the fake VMFunc that will serve this stack frame.\n    var vmfunc = new VMFunc(null, null, localsformat, rawformat);\n    \n    // Build an empty frame.\n    var frame = new StackFrame(vmfunc);\n    frame.framestart = frameptr;\n    \n    // Load the local variables.\n    for (var i = 0; i < frame.vmfunc.localsindex.length; i++) {\n        var form = frame.vmfunc.localsindex[i];\n        if (form.size == 4) {\n            frame.locals[form.pos] = ByteRead4(arr, localspos + form.pos);\n        }\n        else if (form.size == 2) {\n            frame.locals[form.pos] = ByteRead2(arr, localspos + form.pos);\n        }\n        else {\n            frame.locals[form.pos] = ByteRead1(arr, localspos + form.pos);\n        }\n    }\n    \n    // Load the stack variables.\n    for (var pos = framelen; pos < arr.length; pos += 4) {\n        frame.valstack.push(ByteRead4(arr, pos));\n    }\n    \n    return frame;\n}\n\n/* Constructor: VMTextEnv\n\n   Represents all the cached string-table information for when stringtable\n   is addr. This includes the decoding table, and the compiled strings\n   for each address that's been printed.\n\n   If the table is not in ROM, there is no cached information. We still\n   make a VMTextEnv, but it's empty.\n*/\nfunction VMTextEnv(addr, dectab) {\n    if (addr == 0)\n        fatal_error(\"Tried to create a VMTextEnv for address zero.\");\n\n    this.addr = addr;\n    this.cacheable = (dectab !== undefined);\n    this.decoding_tree = dectab;\n\n    /* The string tables for the various iosys modes. */\n    this.vmstring_tables = [];\n    if (this.cacheable) {\n        this.vmstring_tables[0] = {};\n        this.vmstring_tables[1] = {};\n        this.vmstring_tables[2] = {};\n    }\n}\n\nvar operandlist_table = null;\n\n/* This is called once, at startup time. */\nfunction setup_operandlist_table() {\n    /* Constructor: OperandList */\n    function OperandList(formlist, argsize) {\n        this.argsize = (argsize ? argsize : 4);\n        this.numops = formlist.length;\n        var ls = [];\n        for (var ix=0; ix<formlist.length; ix++)\n            ls.push(formlist.charAt(ix));\n        this.formlist = ls;\n    }\n    var list_none = new OperandList(\"\");\n    var list_L = new OperandList(\"L\");\n    var list_LL = new OperandList(\"LL\");\n    var list_LLL = new OperandList(\"LLL\");\n    var list_LLLL = new OperandList(\"LLLL\");\n    var list_LLLLL = new OperandList(\"LLLLL\");\n    var list_LLLLLLL = new OperandList(\"LLLLLLL\");\n    var list_LS = new OperandList(\"LS\");\n    var list_LLS = new OperandList(\"LLS\");\n    var list_LLLLLLS = new OperandList(\"LLLLLLS\");\n    var list_LLLLLLLS = new OperandList(\"LLLLLLLS\");\n    var list_LSS = new OperandList(\"LSS\");\n    var list_LLSS = new OperandList(\"LLSS\");\n    var list_LLLLSS = new OperandList(\"LLLLSS\");\n    var list_LC = new OperandList(\"LC\");\n    var list_LLC = new OperandList(\"LLC\");\n    var list_LLLC = new OperandList(\"LLLC\");\n    var list_LLLLC = new OperandList(\"LLLLC\");\n    var list_ES = new OperandList(\"ES\");\n    var list_LES = new OperandList(\"LES\");\n    var list_EES = new OperandList(\"EES\");\n    var list_F = new OperandList(\"F\");\n    var list_LF = new OperandList(\"LF\");\n    var list_LLF = new OperandList(\"LLF\");\n    var list_EF = new OperandList(\"EF\");\n    var list_1EF = new OperandList(\"EF\", 1);\n    var list_2EF = new OperandList(\"EF\", 2);\n    var list_S = new OperandList(\"S\");\n    var list_SS = new OperandList(\"SS\");\n    var list_CL = new OperandList(\"CL\");\n    var list_C = new OperandList(\"C\");\n    operandlist_table = { \n        0x00: list_none, /* nop */\n        0x10: list_EES, /* add */\n        0x11: list_LES, /* sub */\n        0x12: list_LLS, /* mul */\n        0x13: list_LLS, /* div */\n        0x14: list_LLS, /* mod */\n        0x15: list_ES, /* neg */\n        0x18: list_EES, /* bitand */\n        0x19: list_EES, /* bitor */\n        0x1A: list_EES, /* bitxor */\n        0x1B: list_ES, /* bitnot */\n        0x1C: list_LLS, /* shiftl */\n        0x1D: list_LLS, /* sshiftr */\n        0x1E: list_LLS, /* ushiftr */\n        0x20: list_L, /* jump */\n        0x22: list_LL, /* jz */\n        0x23: list_LL, /* jnz */\n        0x24: list_LLL, /* jeq */\n        0x25: list_LLL, /* jne */\n        0x26: list_LLL, /* jlt */\n        0x27: list_LLL, /* jge */\n        0x28: list_LLL, /* jgt */\n        0x29: list_LLL, /* jle */\n        0x2A: list_LLL, /* jltu */\n        0x2B: list_LLL, /* jgeu */\n        0x2C: list_LLL, /* jgtu */\n        0x2D: list_LLL, /* jleu */\n        0x30: list_LLC, /* call */\n        0x31: list_L, /* return */\n        0x32: list_CL, /* catch */\n        0x33: list_LL, /* throw */\n        0x34: list_LL, /* tailcall */\n        0x40: list_EF, /* copy */\n        0x41: list_2EF, /* copys */\n        0x42: list_1EF, /* copyb */\n        0x44: list_LS, /* sexs */\n        0x45: list_LS, /* sexb */\n        0x48: list_LLS, /* aload */\n        0x49: list_LLS, /* aloads */\n        0x4A: list_LLS, /* aloadb */\n        0x4B: list_LLS, /* aloadbit */\n        0x4C: list_LLL, /* astore */\n        0x4D: list_LLL, /* astores */\n        0x4E: list_LLL, /* astoreb */\n        0x4F: list_LLL, /* astorebit */\n        0x50: list_F, /* stkcount */\n        0x51: list_LF, /* stkpeek */\n        0x52: list_none, /* stkswap */\n        0x53: list_LL, /* stkroll */\n        0x54: list_L, /* stkcopy */\n        0x70: list_L, /* streamchar */\n        0x71: list_L, /* streamnum */\n        0x72: list_L, /* streamstr */\n        0x73: list_L, /* streamunichar */\n        0x100: list_LLS, /* gestalt */\n        0x101: list_L, /* debugtrap */\n        0x102: list_S, /* getmemsize */\n        0x103: list_LS, /* setmemsize */\n        0x104: list_L, /* jumpabs */\n        0x110: list_LS, /* random */\n        0x111: list_L, /* setrandom */\n        0x120: list_none, /* quit */\n        0x121: list_S, /* verify */\n        0x122: list_none, /* restart */\n        0x123: list_LC, /* save */\n        0x124: list_LF, /* restore */\n        0x125: list_C, /* saveundo */\n        0x126: list_F, /* restoreundo */\n        0x127: list_LL, /* protect */\n        0x128: list_S, /* hasundo */\n        0x129: list_none, /* discardundo */\n        0x130: list_LLF, /* glk */\n        0x140: list_S, /* getstringtbl */\n        0x141: list_L, /* setstringtbl */\n        0x148: list_SS, /* getiosys */\n        0x149: list_LL, /* setiosys */\n        0x150: list_LLLLLLLS, /* linearsearch */\n        0x151: list_LLLLLLLS, /* binarysearch */\n        0x152: list_LLLLLLS, /* linkedsearch */\n        0x160: list_LC, /* callf */\n        0x161: list_LLC, /* callfi */\n        0x162: list_LLLC, /* callfii */\n        0x163: list_LLLLC, /* callfiii */\n        0x170: list_LL, /* mzero */\n        0x171: list_LLL, /* mcopy */\n        0x178: list_LS, /* malloc */\n        0x179: list_L, /* mfree */\n        0x180: list_LL, /* accelfunc */\n        0x181: list_LL, /* accelparam */\n        0x190: list_LS, /* numtof */\n        0x191: list_LS, /* ftonumz */\n        0x192: list_LS, /* ftonumn */\n        0x198: list_LS, /* ceil */\n        0x199: list_LS, /* floor */\n        0x1A0: list_LLS, /* fadd */\n        0x1A1: list_LLS, /* fsub */\n        0x1A2: list_LLS, /* fmul */\n        0x1A3: list_LLS, /* fdiv */\n        0x1A4: list_LLSS, /* fmod */\n        0x1A8: list_LS, /* sqrt */\n        0x1A9: list_LS, /* exp */\n        0x1AA: list_LS, /* log */\n        0x1AB: list_LLS, /* pow */\n        0x1B0: list_LS, /* sin */\n        0x1B1: list_LS, /* cos */\n        0x1B2: list_LS, /* tan */\n        0x1B3: list_LS, /* asin */\n        0x1B4: list_LS, /* acos */\n        0x1B5: list_LS, /* atan */\n        0x1B6: list_LLS, /* atan2 */\n        0x1C0: list_LLLL, /* jfeq */\n        0x1C1: list_LLLL, /* jfne */\n        0x1C2: list_LLL, /* jflt */\n        0x1C3: list_LLL, /* jfle */\n        0x1C4: list_LLL, /* jfgt */\n        0x1C5: list_LLL, /* jfge */\n        0x1C8: list_LL, /* jisnan */\n        0x1C9: list_LL, /* jisinf */\n        0x200: list_LSS, /* numtod */\n        0x201: list_LLS, /* dtonumz */\n        0x202: list_LLS, /* dtonumn */\n        0x203: list_LSS, /* ftod */\n        0x204: list_LLS, /* dtof */\n        0x208: list_LLSS, /* dceil */\n        0x209: list_LLSS, /* dfloor */\n        0x210: list_LLLLSS, /* dadd */\n        0x211: list_LLLLSS, /* dsub */\n        0x212: list_LLLLSS, /* dmul */\n        0x213: list_LLLLSS, /* ddiv */\n        0x214: list_LLLLSS, /* dmodr */\n        0x215: list_LLLLSS, /* dmodq */\n        0x218: list_LLSS, /* dsqrt */\n        0x219: list_LLSS, /* dexp */\n        0x21A: list_LLSS, /* dlog */\n        0x21B: list_LLLLSS, /* dpow */\n        0x220: list_LLSS, /* dsin */\n        0x221: list_LLSS, /* dcos */\n        0x222: list_LLSS, /* dtan */\n        0x223: list_LLSS, /* dasin */\n        0x224: list_LLSS, /* dacos */\n        0x225: list_LLSS, /* datan */\n        0x226: list_LLLLSS, /* datan2 */\n        0x230: list_LLLLLLL, /* jdeq */\n        0x231: list_LLLLLLL, /* jdne */\n        0x232: list_LLLLL, /* jdlt */\n        0x233: list_LLLLL, /* jdle */\n        0x234: list_LLLLL, /* jdgt */\n        0x235: list_LLLLL, /* jdge */\n        0x238: list_LLL, /* jdisnan */\n        0x239: list_LLL  /* jdisinf */\n    }\n}\n\n/* A brief lecture on the offstate:\n\n   One way we optimize JIT-compiled code is to do a running static analysis,\n   and try to determine what values are on top of the VM stack at any given\n   time. (That is, during any given instruction.) We also try to keep track\n   of what values are in all the local variables. These lists are the\n   \"offstate\" (\"offstack\" and \"offloc\" lists). They can contain both numeric\n   literals and (Javascript) temporary variables. When we add a value to the\n   offstack, we delay generating the code that pushes it into the real (VM)\n   stack. If we're lucky, we never have to do that push at all. Similarly,\n   when we add a value to the offloc, we delay writing it to the real\n   local-variable array.\n\n   Temporary variables are considered immutable as long as they remain in\n   the offstate. So a variable can actually appear in the offstate more\n   than once.\n\n   Whenever anything happens that can't be statically analyzed --\n   notably, any jump, call, or return -- we \"unload the offstate\", by\n   generating the appropriate VM stack pushes and local writes. This must\n   certainly be done at the end of a code path, and we have asserts to\n   ensure this.\n*/\n\n/* Some utility functions for opcode handlers. */\n\nself.funcop_cache = {};\n\n/* Return a Javascript literal representing a funcop. The funcop can be used\n   later with store_operand_by_funcop(). For efficiency, this represents a\n   \"discard\" funcop as \"null\".\n\n   For more efficiency (to avoid creating objects in commonly-called\n   functions), the literal we return looks like \"funcop_cache.mXsYaZ\".\n   We fill in the cache as necessary.\n\n   (We can't just store the passed-in funcop, because it's a scratch object\n   that will be overwritten.)\n*/\nfunction oputil_record_funcop(funcop) {\n    if (funcop.mode == 0) {\n        /* discard value */\n        return \"null\";\n    }\n\n    var key = \"m\" + funcop.mode;\n    if (funcop.argsize != null)\n        key = key + \"s\" + funcop.argsize;\n    if (funcop.addr != null)\n        key = key + \"a\" + funcop.addr;\n\n    if (self.funcop_cache.key)\n        return \"self.funcop_cache.\"+key;\n\n    var obj = { key: key, \n        mode: funcop.mode, argsize: funcop.argsize, addr: funcop.addr };\n    self.funcop_cache[key] = obj;\n    return \"self.funcop_cache.\"+key;\n}\n\n/* Store the result of an opcode, using the information specified in\n   funcop. The operand may be a quoted constant, a holdvar, or an\n   expression. (As usual, constants are identified by starting with a\n   \"0\", and holdvars with a \"_\".)\n*/\nfunction oputil_store(context, funcop, operand) {\n    var holdvar;\n\n    switch (funcop.mode) {\n\n    case 8: /* push on stack */\n        if (funcop.argsize == 4) {\n            /* These two cases are tested in a nasty fast way. Pretend\n               I'm calling quot_isconstant() and quot_isholdvar(). */\n            var opchar = operand[0];\n            if (opchar === \"0\") { /* quot_isconstant(operand) */\n                /* If this is an untruncated constant, we can move it \n                   directly to the offstack. */\n                context.offstack.push(operand);\n                ;;;context.code.push(\"// push to offstack: \"+operand); //debug\n                return;\n            }\n            if (opchar === \"_\") { /* quot_isholdvar(operand) */\n                /* If it's an untruncated variable, we can still move it\n                   to the offstack, but we have to increase its usage. */\n                push_offstack_holdvar(context, operand);\n                ;;;context.code.push(\"// re-push to offstack: \"+operand); //debug\n                return;\n            }\n        }\n\n        holdvar = alloc_holdvar(context, true);\n        context.offstack.push(holdvar);\n        if (funcop.argsize == 4) {\n            context.code.push(holdvar+\"=(\"+operand+\");\");\n        }\n        else if (funcop.argsize == 2) {\n            context.code.push(holdvar+\"=0xffff&(\"+operand+\");\");\n        }\n        else {\n            context.code.push(holdvar+\"=0xff&(\"+operand+\");\");\n        }\n        return;\n\n    case 0: /* discard value */\n        context.code.push(\"(\"+operand+\");\");\n        return;\n\n    case 11: /* The local-variable cases. */\n        if (funcop.argsize == 4) {\n            /* These two cases are tested in a nasty fast way. Pretend\n               I'm calling quot_isconstant() and quot_isholdvar(). */\n            var opchar = operand[0];\n            if (opchar === \"0\") { /* quot_isconstant(operand) */\n                /* If this is an untruncated constant, we can move it \n                   directly to the offloc. */\n                store_offloc_value(context, funcop.addr, operand, false);\n                ;;;context.code.push(\"// store to offloc[\"+funcop.addr+\"]: \"+operand); //debug\n                return;\n            }\n            if (opchar === \"_\") { /* quot_isholdvar(operand) */\n                /* If it's an untruncated variable, we can still move it\n                   to the offloc, but we have to increase its usage. */\n                store_offloc_value(context, funcop.addr, operand, true);\n                ;;;context.code.push(\"// re-store to offloc[\"+funcop.addr+\"]: \"+operand); //debug\n                return;\n            }\n        }\n\n        /* Wipe the offloc entry, if any. */\n        store_offloc_value(context, funcop.addr, undefined);\n        /* Store directly to the locals array. */\n        if (funcop.argsize == 4) {\n            context.code.push(\"self.frame.locals[\"+funcop.addr+\"]=(\"+operand+\");\");\n        }\n        else if (funcop.argsize == 2) {\n            context.code.push(\"self.frame.locals[\"+funcop.addr+\"]=(0xffff &\"+operand+\");\");\n        }\n        else {\n            context.code.push(\"self.frame.locals[\"+funcop.addr+\"]=(0xff &\"+operand+\");\");\n        }\n        return;\n\n    case 15: /* The main-memory cases. */\n        if (funcop.argsize == 4) {\n            context.code.push(\"self.MemW4(\"+funcop.addr+\",\"+operand+\");\");\n        }\n        else if (funcop.argsize == 2) {\n            context.code.push(\"self.MemW2(\"+funcop.addr+\",\"+operand+\");\");\n        }\n        else {\n            context.code.push(\"self.MemW1(\"+funcop.addr+\",\"+operand+\");\");\n        }\n        return;\n\n    default:\n        fatal_error(\"Unknown addressing mode in store func operand.\");\n\n    }\n}\n\n/* Push the four-value call stub onto the stack. The operand should be the\n   output of a \"C\" operand -- a string of the form \"DESTTYPE,DESTADDR\". \n\n   The last argument, addr, is optional. If not provided, it defaults to\n   context.cp -- the address of the next opcode (to be compiled).\n*/\nfunction oputil_push_callstub(context, operand, addr) {\n    if (addr === undefined)\n        addr = context.cp;\n    context.code.push(\"self.frame.valstack.push(\"+operand+\",\"+addr+\",self.frame.framestart);\");\n}\n\n/* Conditionally push a type-0x11 call stub. This logically happens at\n   the beginning of any compiled string function. In practice, we delay\n   it until the first time it's needed; that's what the substring flag\n   tracks.\n\n   This relies on nextcp being the next opcode address (as passed\n   to the compiled string function as an argument).\n*/\nfunction oputil_push_substring_callstub(context) {\n    context.code.push(\"if (!substring) { substring=true;\");\n    context.code.push(\"self.frame.valstack.push(0x11,0,nextcp,self.frame.framestart);\");\n    context.code.push(\"}\");\n}\n\n/* Move all values on the offstack to the real stack, and all values\n   on the offloc to the real local variables. A handler should call\n   this before any operation which requires a legal game state, and\n   also before ending compilation. \n\n   If keepstack is true, this generates code to move the values, but\n   leaves them on the offstack as well. Call this form before a conditional\n   \"return\" which does not end compilation.\n*/\nfunction oputil_unload_offstate(context, keepstack) {\n    var ix;\n    ;;;context.code.push(\"// unload offstate: \" + context.offstack.length + \" stack\" + (context.offloc.length ? \", plus locs\" : \"\") + (keepstack ? \" (conditional)\" : \"\")); //debug\n    if (context.offstack.length) {\n        context.code.push(\"self.frame.valstack.push(\"+context.offstack.join(\",\")+\");\");\n    }\n    if (context.offloc.length) {\n        for (ix=0; ix<context.offloc.length; ix++) {\n            if (context.offloc[ix] !== undefined && context.offlocdirty[ix]) {\n                context.code.push(\"self.frame.locals[\"+ix+\"]=\"+context.offloc[ix]+\";\");\n            }\n        }\n    }\n    if (!keepstack) {\n        var holdvar;\n        for (ix=0; ix<context.offloc.length; ix++) {\n            holdvar = context.offloc[ix];\n            if (holdvar !== undefined) {\n                if (context.holduse[holdvar] !== undefined)\n                    context.holduse[holdvar] = false;\n            }\n        }\n        context.offloc.length = 0;\n        context.offlocdirty.length = 0;\n        while (context.offstack.length) {\n            holdvar = context.offstack.pop();\n            if (context.holduse[holdvar] !== undefined)\n                context.holduse[holdvar] = false;\n        }\n        /* Now offstack/offloc are empty, and all their variables are marked \n           not on it. (There might have been constant values too, but that\n           didn't affect holduse.) */\n    }\n}\n\nfunction oputil_flush_string(context) {\n    if (context.buffer.length == 0)\n        return;\n\n    /* The context.buffer is text that needs to be flushed to the\n       Glk stream. */\n    \n    var str = context.buffer.join(\"\");\n    context.buffer.length = 0;\n\n    if (str.length == 0)\n        return;\n\n    context.code.push(\"self.Glk.glk_put_jstring(\"+QuoteEscapeString(str)+\");\");\n}\n\n/* Return the signed equivalent of a value. If it is a high-bit constant, \n   this returns its negative equivalent as a constant. If it is a _hold\n   variable or expression, a new expression is returned with the signed\n   value.\n\n   If the hold parameter is true, the expression will be assigned to a\n   new _hold var. Use this if you intend to use the returned value more\n   than once.\n*/\nfunction oputil_signify_operand(context, operand, hold) {\n    var val;\n    if (quot_isconstant(operand)) {\n        val = Number(operand);\n        if (val & 0x80000000)\n            return \"\"+(val - 0x100000000);\n        else\n            return operand;\n    }\n\n    /* By a quirk of Javascript, you can turn an unsigned 32-bit number\n       into a signed one by bit-anding it with 0xffffffff. */\n\n    val = \"(\"+operand+\"&0xffffffff)\";\n    if (hold) {\n        var holdvar = alloc_holdvar(context);\n        context.code.push(holdvar+\"=\"+val+\";\");\n        return holdvar;\n    }\n    else {\n        return val;\n    }\n}\n\n/* Return the float equivalent of a value. If it is a constant, this\n   returns a float constant. If it is a _hold_ variable or expression,\n   a new expression is returned with the signed value.\n\n   If the hold parameter is true, the expression will be assigned to a\n   new _hold var. Use this if you intend to use the returned value more\n   than once.\n*/\nfunction oputil_decode_float(context, operand, hold) {\n    var val;\n    if (quot_isconstant(operand)) {\n        val = Number(operand);\n        /* The standard toString rendering of -0 is \"0\", so we have to\n           handle that case specially. */\n        if (val == 0x80000000)\n            return \"-0\";\n        return \"\"+decode_float(val);\n    }\n\n    val = \"self.decode_float(\"+operand+\")\";\n    if (hold) {\n        var holdvar = alloc_holdvar(context);\n        context.code.push(holdvar+\"=\"+val+\";\");\n        return holdvar;\n    }\n    else {\n        return val;\n    }\n}\n\n/* Return the float (really double) equivalent of two values (high word, low\n   word).\n*/\nfunction oputil_decode_double(context, ophi, oplo, hold) {\n    var val, valhi, vallo;\n    if (quot_isconstant(ophi) && quot_isconstant(oplo)) {\n        valhi = Number(ophi);\n        vallo = Number(oplo);\n        /* The standard toString rendering of -0 is \"0\", so we have to\n           handle that case specially. */\n        if (valhi == 0x80000000 && vallo == 0x0)\n            return \"-0\";\n        return \"\"+decode_double(valhi, vallo);\n    }\n\n    val = \"self.decode_double(\"+ophi+\",\"+oplo+\")\";\n    if (hold) {\n        var holdvar = alloc_holdvar(context);\n        context.code.push(holdvar+\"=\"+val+\";\");\n        return holdvar;\n    }\n    else {\n        return val;\n    }\n}\n    \n/* Generate code for a branch to operand. This includes the usual branch\n   hack; 0 or 1 return from the current function. \n   If unconditional is false, the offstack values are left in place,\n   so that compilation can continue.\n*/\nfunction oputil_perform_jump(context, operand, unconditional) {\n    if (quot_isconstant(operand)) {\n        var val = Number(operand);\n        if (val == 0 || val == 1) {\n            if (unconditional) {\n                ;;;context.code.push(\"// quashing offstack for unconditional return: \" + context.offstack.length); //debug\n                context.offstack.length = 0;\n                context.offloc.length = 0;\n                context.offlocdirty.length = 0;\n            }\n            else {\n                ;;;context.code.push(\"// ignoring offstack for conditional return: \" + context.offstack.length); //debug\n            }\n            context.code.push(\"if (self.leave_function()) return self.VMStopped;\");\n            context.code.push(\"self.pop_callstub(\"+val+\");\");\n        }\n        else {\n            oputil_unload_offstate(context, !unconditional);\n            var newpc = (context.cp+val-2) >>>0;\n            context.code.push(\"self.pc = \"+newpc+\";\");\n            context.vmfunc.pathaddrs[newpc] = true;\n        }\n    }\n    else {\n        oputil_unload_offstate(context, !unconditional);\n        context.code.push(\"if ((\"+operand+\")==0 || (\"+operand+\")==1) {\");\n        context.code.push(\"if (self.leave_function()) return self.VMStopped;\");\n        context.code.push(\"self.pop_callstub(\"+operand+\");\");\n        context.code.push(\"}\");\n        context.code.push(\"else {\");\n        context.code.push(\"self.pc = (\"+context.cp+\"+(\"+operand+\")-2) >>>0;\");\n        context.code.push(\"}\");\n    }\n    context.code.push(\"return;\");\n}\n\n/* opcode_table: All the Glulx VM opcodes. \n\n   Each entry in this table is a function that *generates* executable\n   Javascript code for that opcode. When we're compiling a code path,\n   we call the sequence of opcode functions, and the result is a\n   working Javascript function for that code path.\n*/\n\nvar opcode_table = {\n    0x0: function(context, operands) { /* nop */\n    },\n\n    0x10: function(context, operands) { /* add */\n        /* Commutative, so we don't care about the order of evaluation of\n           the two expressions. */\n        /* We truncate the sum with >>>0, which always gives an unsigned\n           32-bit integer. */\n        context.code.push(operands[2]+\"((\"+operands[0]+\")+(\"+operands[1]+\")) >>>0);\");\n    },\n\n    0x11: function(context, operands) { /* sub */\n        /* We hold operand 0, to ensure that it's evaluated first. Op 1\n           is an expression. */\n        context.code.push(operands[2]+\"((\"+operands[0]+\")-(\"+operands[1]+\")) >>>0);\");\n    },\n\n    0x12: function(context, operands) { /* mul */\n        var sign0 = oputil_signify_operand(context, operands[0]);\n        var sign1 = oputil_signify_operand(context, operands[1]);\n        context.code.push(operands[2]+\"(Math.imul((\"+sign0+\"),(\"+sign1+\"))) >>>0);\");\n    },\n\n    0x13: function(context, operands) { /* div */\n        var sign0 = oputil_signify_operand(context, operands[0]);\n        var sign1 = oputil_signify_operand(context, operands[1]);\n        var holdvar = alloc_holdvar(context);\n        context.code.push(holdvar+\"=((\"+sign0+\")/(\"+sign1+\"));\");\n        context.code.push(\"if (!isFinite(\"+holdvar+\")) self.fatal_error('Division by zero.');\");\n        context.code.push(operands[2]+\"(\"+holdvar+\">=0)?Math.floor(\"+holdvar+\"):(-Math.floor(-\"+holdvar+\") >>>0));\");\n    },\n\n    0x14: function(context, operands) { /* mod */\n        /* Javascript modulo follows the same sign laws as Glulx, which\n           is convenient. */\n        var sign0 = oputil_signify_operand(context, operands[0]);\n        var sign1 = oputil_signify_operand(context, operands[1]);\n        var holdvar = alloc_holdvar(context);\n        context.code.push(holdvar+\"=((\"+sign0+\")%(\"+sign1+\"));\");\n        context.code.push(\"if (!isFinite(\"+holdvar+\")) self.fatal_error('Modulo division by zero.');\");\n        context.code.push(operands[2]+holdvar+\" >>>0);\");\n    },\n\n    0x15: function(context, operands) { /* neg */\n        context.code.push(operands[1]+\"(-(\"+operands[0]+\")) >>>0);\");\n    },\n\n    0x18: function(context, operands) { /* bitand */\n        /* Commutative. */\n        context.code.push(operands[2]+\"((\"+operands[0]+\")&(\"+operands[1]+\")) >>>0);\");\n    },\n\n    0x19: function(context, operands) { /* bitor */\n        /* Commutative. */\n        context.code.push(operands[2]+\"((\"+operands[0]+\")|(\"+operands[1]+\")) >>>0);\");\n    },\n\n    0x1a: function(context, operands) { /* bitxor */\n        /* Commutative. */\n        context.code.push(operands[2]+\"((\"+operands[0]+\")^(\"+operands[1]+\")) >>>0);\");\n    },\n\n    0x1b: function(context, operands) { /* bitnot */\n        context.code.push(operands[1]+\"(~(\"+operands[0]+\")) >>>0);\");\n    },\n\n    0x1c: function(context, operands) { /* shiftl */\n        if (quot_isconstant(operands[1])) {\n            var val = Number(operands[1]);\n            if (val < 32)\n                context.code.push(operands[2]+\"((\"+operands[0]+\")<<\"+val+\") >>>0);\");\n            else\n                context.code.push(operands[2]+\"0);\");\n        }\n        else {\n            context.code.push(operands[2]+\"(\"+operands[1]+\"<32) ? ((\"+operands[0]+\"<<\"+operands[1]+\") >>>0) : 0);\");\n        }\n    },\n\n    0x1d: function(context, operands) { /* sshiftr */\n        if (quot_isconstant(operands[1])) {\n            var val = Number(operands[1]);\n            if (val < 32)\n                context.code.push(operands[2]+\"((\"+operands[0]+\")>>\"+val+\") >>>0);\");\n            else\n                context.code.push(operands[2]+\"((\"+operands[0]+\")&0x80000000) ? 0xffffffff : 0);\");\n        }\n        else {\n            context.code.push(\"if (\"+operands[0]+\" & 0x80000000) {\");\n            context.code.push(operands[2]+\"(\"+operands[1]+\"<32) ? ((\"+operands[0]+\">>\"+operands[1]+\") >>>0) : 0xffffffff);\");\n            context.code.push(\"} else {\");\n            context.code.push(operands[2]+\"(\"+operands[1]+\"<32) ? ((\"+operands[0]+\">>\"+operands[1]+\") >>>0) : 0);\");\n            context.code.push(\"}\");\n        }\n    },\n\n    0x1e: function(context, operands) { /* ushiftr */\n        if (quot_isconstant(operands[1])) {\n            var val = Number(operands[1]);\n            if (val < 32)\n                context.code.push(operands[2]+\"(\"+operands[0]+\")>>>\"+val+\");\");\n            else\n                context.code.push(operands[2]+\"0);\");\n        }\n        else {\n            context.code.push(operands[2]+\"(\"+operands[1]+\"<32) ? (\"+operands[0]+\">>>\"+operands[1]+\") : 0);\");\n        }\n    },\n\n    0x20: function(context, operands) { /* jump */\n        oputil_perform_jump(context, operands[0], true);\n        context.path_ends = true;\n    },\n\n    0x104: function(context, operands) { /* jumpabs */\n        if (quot_isconstant(operands[0])) {\n            var newpc = Number(operands[0]);\n            context.code.push(\"self.pc = \"+newpc+\";\");\n            context.vmfunc.pathaddrs[newpc] = true;\n        }\n        else {\n            context.code.push(\"self.pc = \"+operands[0]+\";\");\n        }\n        oputil_unload_offstate(context);\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x22: function(context, operands) { /* jz */\n        context.code.push(\"if ((\"+operands[0]+\")==0) {\");\n        oputil_perform_jump(context, operands[1]);\n        context.code.push(\"}\");\n    },\n\n    0x23: function(context, operands) { /* jnz */\n        context.code.push(\"if ((\"+operands[0]+\")!=0) {\");\n        oputil_perform_jump(context, operands[1]);\n        context.code.push(\"}\");\n    },\n\n    0x24: function(context, operands) { /* jeq */\n        context.code.push(\"if ((\"+operands[0]+\")==(\"+operands[1]+\")) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x25: function(context, operands) { /* jne */\n        context.code.push(\"if ((\"+operands[0]+\")!=(\"+operands[1]+\")) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x26: function(context, operands) { /* jlt */\n        var sign0 = oputil_signify_operand(context, operands[0]);\n        var sign1 = oputil_signify_operand(context, operands[1]);\n        context.code.push(\"if ((\"+sign0+\")<(\"+sign1+\")) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x27: function(context, operands) { /* jge */\n        var sign0 = oputil_signify_operand(context, operands[0]);\n        var sign1 = oputil_signify_operand(context, operands[1]);\n        context.code.push(\"if ((\"+sign0+\")>=(\"+sign1+\")) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x28: function(context, operands) { /* jgt */\n        var sign0 = oputil_signify_operand(context, operands[0]);\n        var sign1 = oputil_signify_operand(context, operands[1]);\n        context.code.push(\"if ((\"+sign0+\")>(\"+sign1+\")) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x29: function(context, operands) { /* jle */\n        var sign0 = oputil_signify_operand(context, operands[0]);\n        var sign1 = oputil_signify_operand(context, operands[1]);\n        context.code.push(\"if ((\"+sign0+\")<=(\"+sign1+\")) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x2a: function(context, operands) { /* jltu */\n        context.code.push(\"if ((\"+operands[0]+\")<(\"+operands[1]+\")) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x2b: function(context, operands) { /* jgeu */\n        context.code.push(\"if ((\"+operands[0]+\")>=(\"+operands[1]+\")) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x2c: function(context, operands) { /* jgtu */\n        context.code.push(\"if ((\"+operands[0]+\")>(\"+operands[1]+\")) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x2d: function(context, operands) { /* jleu */\n        context.code.push(\"if ((\"+operands[0]+\")<=(\"+operands[1]+\")) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x30: function(context, operands) { /* call */\n        if (quot_isconstant(operands[1])) {\n            var ix;\n            var argc = Number(operands[1]);\n            for (ix=0; ix<argc; ix++) {\n                if (context.offstack.length) {\n                    var holdvar = pop_offstack_holdvar(context);\n                    context.code.push(\"self.tempcallargs[\"+ix+\"]=\"+holdvar+\";\");\n                }\n                else {\n                    context.code.push(\"self.tempcallargs[\"+ix+\"]=self.frame.valstack.pop();\");\n                }\n            }\n            oputil_unload_offstate(context);\n        }\n        else {\n            context.varsused[\"ix\"] = true;\n            oputil_unload_offstate(context);\n            context.code.push(\"for (ix=0; ix<\"+operands[1]+\"; ix++) { self.tempcallargs[ix]=self.frame.valstack.pop(); }\");\n        }\n        oputil_push_callstub(context, operands[2]);\n        context.code.push(\"self.enter_function(\"+operands[0]+\", \"+operands[1]+\");\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x34: function(context, operands) { /* tailcall */\n        if (quot_isconstant(operands[1])) {\n            var ix;\n            var argc = Number(operands[1]);\n            for (ix=0; ix<argc; ix++) {\n                if (context.offstack.length) {\n                    var holdvar = pop_offstack_holdvar(context);\n                    context.code.push(\"self.tempcallargs[\"+ix+\"]=\"+holdvar+\";\");\n                }\n                else {\n                    context.code.push(\"self.tempcallargs[\"+ix+\"]=self.frame.valstack.pop();\");\n                }\n            }\n            oputil_unload_offstate(context);\n        }\n        else {\n            context.varsused[\"ix\"] = true;\n            oputil_unload_offstate(context);\n            context.code.push(\"for (ix=0; ix<\"+operands[1]+\"; ix++) { self.tempcallargs[ix]=self.frame.valstack.pop(); }\");\n        }\n        /* Note that tailcall in the top-level function will not work.\n           But why would you do that? */\n        context.code.push(\"if (self.leave_function()) return self.VMStopped;\");\n        context.code.push(\"self.enter_function(\"+operands[0]+\", \"+operands[1]+\");\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x160: function(context, operands) { /* callf */\n        oputil_unload_offstate(context);\n        oputil_push_callstub(context, operands[1]);\n        context.code.push(\"self.enter_function(\"+operands[0]+\", 0);\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x161: function(context, operands) { /* callfi */\n        oputil_unload_offstate(context);\n        context.code.push(\"self.tempcallargs[0]=(\"+operands[1]+\");\");\n        oputil_push_callstub(context, operands[2]);\n        context.code.push(\"self.enter_function(\"+operands[0]+\", 1);\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x162: function(context, operands) { /* callfii */\n        oputil_unload_offstate(context);\n        context.code.push(\"self.tempcallargs[0]=(\"+operands[1]+\");\");\n        context.code.push(\"self.tempcallargs[1]=(\"+operands[2]+\");\");\n        oputil_push_callstub(context, operands[3]);\n        context.code.push(\"self.enter_function(\"+operands[0]+\", 2);\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x163: function(context, operands) { /* callfiii */\n        oputil_unload_offstate(context);\n        context.code.push(\"self.tempcallargs[0]=(\"+operands[1]+\");\");\n        context.code.push(\"self.tempcallargs[1]=(\"+operands[2]+\");\");\n        context.code.push(\"self.tempcallargs[2]=(\"+operands[3]+\");\");\n        oputil_push_callstub(context, operands[4]);\n        context.code.push(\"self.enter_function(\"+operands[0]+\", 3);\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x31: function(context, operands) { /* return */\n        /* Quash the offstack; we're about to blow away the whole stack\n           frame, so nothing of the stack will survive. */\n        ;;;context.code.push(\"// quashing offstack for return: \" + context.offstack.length); //debug\n        context.offstack.length = 0;\n        context.offloc.length = 0;\n        context.offlocdirty.length = 0;\n        context.code.push(\"if (self.leave_function()) return self.VMStopped;\");\n        context.code.push(\"self.pop_callstub(\"+operands[0]+\");\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x32: function(context, operands) { /* catch */\n        oputil_unload_offstate(context);\n        oputil_push_callstub(context, operands[0]);\n        context.code.push(\"self.store_operand(\"+operands[0]+\",self.frame.framestart+self.frame.framelen+4*self.frame.valstack.length);\");\n        oputil_perform_jump(context, operands[1], true);\n        context.path_ends = true;\n    },\n\n    0x33: function(context, operands) { /* throw */\n        /* Quash the offstack; we're about to blow away the stack frame, or\n           at minimum reset it. A valid call stub cannot be on the offstack. */\n        ;;;context.code.push(\"// quashing offstack for throw: \" + context.offstack.length); //debug\n        context.offstack.length = 0;\n        context.offloc.length = 0;\n        context.offlocdirty.length = 0;\n        context.code.push(\"self.pop_stack_to(\"+operands[1]+\");\");\n        context.code.push(\"self.pop_callstub(\"+operands[0]+\");\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x40: function(context, operands) { /* copy */\n        oputil_store(context, operands[1], operands[0]);\n    },\n\n    0x41: function(context, operands) { /* copys */\n        oputil_store(context, operands[1], operands[0]);\n    },\n\n    0x42: function(context, operands) { /* copyb */\n        oputil_store(context, operands[1], operands[0]);\n    },\n\n    0x44: function(context, operands) { /* sexs */\n        var val;\n        if (quot_isconstant(operands[0])) {\n            val = Number(operands[0]);\n            val = (val & 0x8000) ? ((val | 0xffff0000) >>> 0) : (val & 0xffff);\n            context.code.push(operands[1]+val+\");\");\n        }\n        else {\n            context.code.push(operands[1]+\"(\"+operands[0]+\" & 0x8000) ? ((\"+operands[0]+\" | 0xffff0000) >>> 0) : (\"+operands[0]+\" & 0xffff));\");\n        }\n    },\n\n    0x45: function(context, operands) { /* sexb */\n        var val;\n        if (quot_isconstant(operands[0])) {\n            val = Number(operands[0]);\n            val = (val & 0x80) ? ((val | 0xffffff00) >>> 0) : (val & 0xff);\n            context.code.push(operands[1]+val+\");\");\n        }\n        else {\n            context.code.push(operands[1]+\"(\"+operands[0]+\" & 0x80) ? ((\"+operands[0]+\" | 0xffffff00) >>> 0) : (\"+operands[0]+\" & 0xff));\");\n        }\n    },\n\n    0x48: function(context, operands) { /* aload */\n        var val, addr;\n        if (quot_isconstant(operands[1])) {\n            if (quot_isconstant(operands[0])) {\n                /* Both operands constant */\n                addr = Number(operands[0]) + Number(operands[1]) * 4;\n                val = \"self.Mem4(\"+(addr >>>0)+\")\";\n            }\n            else {\n                var addr = Number(operands[1]) * 4;\n                if (addr)\n                    val = \"self.Mem4((\"+operands[0]+\"+\"+addr+\") >>>0)\";\n                else\n                    val = \"self.Mem4(\"+operands[0]+\")\";\n            }\n        }\n        else {\n            val = \"self.Mem4((\"+operands[0]+\"+4*\"+operands[1]+\") >>>0)\";\n        }\n        context.code.push(operands[2]+val+\");\");\n    },\n\n    0x49: function(context, operands) { /* aloads */\n        var val, addr;\n        if (quot_isconstant(operands[1])) {\n            if (quot_isconstant(operands[0])) {\n                /* Both operands constant */\n                addr = Number(operands[0]) + Number(operands[1]) * 2;\n                val = \"self.Mem2(\"+(addr >>>0)+\")\";\n            }\n            else {\n                var addr = Number(operands[1]) * 2;\n                if (addr)\n                    val = \"self.Mem2((\"+operands[0]+\"+\"+addr+\") >>>0)\";\n                else\n                    val = \"self.Mem2(\"+operands[0]+\")\";\n            }\n        }\n        else {\n            val = \"self.Mem2((\"+operands[0]+\"+2*\"+operands[1]+\") >>>0)\";\n        }\n        context.code.push(operands[2]+val+\");\");\n    },\n\n    0x4a: function(context, operands) { /* aloadb */\n        var val, addr;\n        if (quot_isconstant(operands[1])) {\n            if (quot_isconstant(operands[0])) {\n                /* Both operands constant */\n                addr = Number(operands[0]) + Number(operands[1]);\n                val = \"self.Mem1(\"+(addr >>>0)+\")\";\n            }\n            else {\n                var addr = Number(operands[1]);\n                if (addr)\n                    val = \"self.Mem1((\"+operands[0]+\"+\"+addr+\") >>>0)\";\n                else\n                    val = \"self.Mem1(\"+operands[0]+\")\";\n            }\n        }\n        else {\n            val = \"self.Mem1((\"+operands[0]+\"+\"+operands[1]+\") >>>0)\";\n        }\n        context.code.push(operands[2]+val+\");\");\n    },\n\n    0x4c: function(context, operands) { /* astore */\n        var val, addr;\n        if (quot_isconstant(operands[1])) {\n            if (quot_isconstant(operands[0])) {\n                /* Both operands constant */\n                addr = Number(operands[0]) + Number(operands[1]) * 4;\n                val = (addr >>>0)+\",\";\n            }\n            else {\n                var addr = Number(operands[1]) * 4;\n                if (addr)\n                    val = \"(\"+operands[0]+\"+\"+addr+\") >>>0\"+\",\";\n                else\n                    val = operands[0]+\",\";\n            }\n        }\n        else {\n            val = \"(\"+operands[0]+\"+4*\"+operands[1]+\") >>>0\"+\",\";\n        }\n        context.code.push(\"self.MemW4(\"+val+operands[2]+\")\"+\";\");\n    },\n\n    0x4d: function(context, operands) { /* astores */\n        var val, addr;\n        if (quot_isconstant(operands[1])) {\n            if (quot_isconstant(operands[0])) {\n                /* Both operands constant */\n                addr = Number(operands[0]) + Number(operands[1]) * 2;\n                val = (addr >>>0)+\",\";\n            }\n            else {\n                var addr = Number(operands[1]) * 2;\n                if (addr)\n                    val = \"(\"+operands[0]+\"+\"+addr+\") >>>0\"+\",\";\n                else\n                    val = operands[0]+\",\";\n            }\n        }\n        else {\n            val = \"(\"+operands[0]+\"+2*\"+operands[1]+\") >>>0\"+\",\";\n        }\n        context.code.push(\"self.MemW2(\"+val+operands[2]+\")\"+\";\");\n    },\n\n    0x4e: function(context, operands) { /* astoreb */\n        var val, addr;\n        if (quot_isconstant(operands[1])) {\n            if (quot_isconstant(operands[0])) {\n                /* Both operands constant */\n                addr = Number(operands[0]) + Number(operands[1]);\n                val = (addr >>>0)+\",\";\n            }\n            else {\n                var addr = Number(operands[1]);\n                if (addr)\n                    val = \"(\"+operands[0]+\"+\"+addr+\") >>>0\"+\",\";\n                else\n                    val = operands[0]+\",\";\n            }\n        }\n        else {\n            val = \"(\"+operands[0]+\"+\"+operands[1]+\") >>>0\"+\",\";\n        }\n        context.code.push(\"self.MemW1(\"+val+operands[2]+\")\"+\";\");\n    },\n\n    0x4b: function(context, operands) { /* aloadbit */\n        if (quot_isconstant(operands[1])) {\n            var bitx, addrx, bitnum;\n            bitnum = Number(operands[1]) & 0xffffffff; /* signed */\n            bitx = bitnum & 7;\n            if (quot_isconstant(operands[0])) {\n                /* Generate addrx as a number. */\n                addrx = Number(operands[0]);\n                if (bitnum >= 0) \n                    addrx += (bitnum>>3);\n                else\n                    addrx -= (1+((-1-bitnum)>>3));\n            }\n            else {\n                /* Generate addrx as an expression string. */\n                if (bitnum >= 0) {\n                    if (bitnum <= 7)\n                        addrx = operands[0];\n                    else\n                        addrx = (operands[0]+\"+\"+(bitnum>>3));\n                }\n                else {\n                    addrx = (operands[0]+\"-\"+(1+((-1-bitnum)>>3)));\n                }\n            }\n            context.code.push(operands[2]+\"(self.Mem1(\"+addrx+\") & \"+(1<<bitx)+\")?1:0);\");\n        }\n        else {\n            context.varsused[\"bitx\"] = true;\n            context.varsused[\"addrx\"] = true;\n            var sign1 = oputil_signify_operand(context, operands[1], true);\n            context.code.push(\"bitx = \"+sign1+\"&7;\");\n            context.code.push(\"if (\"+sign1+\">=0) addrx = \"+operands[0]+\" + (\"+sign1+\">>3);\");\n            context.code.push(\"else addrx = \"+operands[0]+\" - (1+((-1-(\"+sign1+\"))>>3));\");\n            context.code.push(operands[2]+\"(self.Mem1(addrx) & (1<<bitx))?1:0);\");\n        }\n    },\n\n    0x4f: function(context, operands) { /* astorebit */\n        var bitx, addrx, mask, bitnum;\n        if (quot_isconstant(operands[1])) {\n            bitnum = Number(operands[1]) & 0xffffffff; /* signed */\n            bitx = bitnum & 7;\n            if (quot_isconstant(operands[0])) {\n                /* Generate addrx as a number. */\n                addrx = Number(operands[0]);\n                if (bitnum >= 0) \n                    addrx += (bitnum>>3);\n                else\n                    addrx -= (1+((-1-bitnum)>>3));\n            }\n            else {\n                /* Generate addrx as an expression string. */\n                if (bitnum >= 0) {\n                    if (bitnum <= 7)\n                        addrx = operands[0];\n                    else\n                        addrx = (operands[0]+\"+\"+(bitnum>>3));\n                }\n                else {\n                    addrx = (operands[0]+\"-\"+(1+((-1-bitnum)>>3)));\n                }\n            }\n            mask = (1<<bitx);\n        }\n        else {\n            context.varsused[\"bitx\"] = true;\n            context.varsused[\"addrx\"] = true;\n            var sign1 = oputil_signify_operand(context, operands[1], true);\n            context.code.push(\"bitx = \"+sign1+\"&7;\");\n            context.code.push(\"if (\"+sign1+\">=0) addrx = \"+operands[0]+\" + (\"+sign1+\">>3);\");\n            context.code.push(\"else addrx = \"+operands[0]+\" - (1+((-1-(\"+sign1+\"))>>3));\");\n            addrx = \"addrx\";\n            mask = \"(1<<bitx)\";\n        }\n        if (quot_isconstant(operands[2])) {\n            if (Number(operands[2]))\n                context.code.push(\"self.MemW1(\"+addrx+\", self.Mem1(\"+addrx+\") | \"+mask+\");\");\n            else\n                context.code.push(\"self.MemW1(\"+addrx+\", self.Mem1(\"+addrx+\") & ~(\"+mask+\"));\");\n        }\n        else {\n            context.code.push(\"if (\"+operands[2]+\") self.MemW1(\"+addrx+\", self.Mem1(\"+addrx+\") | \"+mask+\");\");\n            context.code.push(\"else self.MemW1(\"+addrx+\", self.Mem1(\"+addrx+\") & ~(\"+mask+\"));\");\n        }\n    },\n\n    0x50: function(context, operands) { /* stkcount */\n        var val;\n        var count = context.offstack.length;\n        if (count)\n            val = \"self.frame.valstack.length+\" + count;\n        else\n            val = \"self.frame.valstack.length\";\n        oputil_store(context, operands[0], val);\n    },\n\n    0x51: function(context, operands) { /* stkpeek */\n        var val;\n        if (quot_isconstant(operands[0])) {\n            var pos = Number(operands[0]);\n            if (pos < context.offstack.length) {\n                val = context.offstack[context.offstack.length-(pos+1)];\n            }\n            else {\n                val = \"self.frame.valstack[self.frame.valstack.length-\"+((pos+1)-context.offstack.length)+\"]\";\n            }\n        }\n        else {\n            oputil_unload_offstate(context);\n            val = \"self.frame.valstack[self.frame.valstack.length-(\"+operands[0]+\"+1)]\";\n        }\n        oputil_store(context, operands[1], val);\n    },\n\n    0x52: function(context, operands) { /* stkswap */\n        var temp, len;\n        if (context.offstack.length < 2) {\n            transfer_to_offstack(context, 2);\n        }\n        /* We can do this with no code. */\n        len = context.offstack.length;\n        temp = context.offstack[len-1];\n        context.offstack[len-1] = context.offstack[len-2];\n        context.offstack[len-2] = temp;\n    },\n\n    0x53: function(context, operands) { /* stkroll */\n        oputil_unload_offstate(context);\n        context.varsused[\"ix\"] = true;\n        context.varsused[\"pos\"] = true;\n        context.varsused[\"roll\"] = true;\n        context.varsused[\"vals1\"] = true;\n        var sign0 = oputil_signify_operand(context, operands[0], true);\n        var sign1 = oputil_signify_operand(context, operands[1], true);\n        context.code.push(\"if (\"+sign0+\" > 0) {\");\n        context.code.push(\"if (\"+sign1+\" > 0) {\");\n        context.code.push(\"vals1 = \"+sign1+\" % \"+sign0+\";\");\n        context.code.push(\"} else {\");\n        context.code.push(\"vals1 = \"+sign0+\" - (-(\"+sign1+\")) % \"+sign0+\";\");\n        context.code.push(\"}\");\n        context.code.push(\"if (vals1) {\");\n        context.code.push(\"pos = self.frame.valstack.length - \"+sign0+\";\");\n        context.code.push(\"roll = self.frame.valstack.slice(self.frame.valstack.length-vals1, self.frame.valstack.length).concat(self.frame.valstack.slice(pos, self.frame.valstack.length-vals1));\");\n        context.code.push(\"for (ix=0; ix<\"+sign0+\"; ix++) { self.frame.valstack[pos+ix] = roll[ix]; }\");\n        context.code.push(\"roll = undefined;\");\n        context.code.push(\"}\");\n        context.code.push(\"}\");\n    },\n\n    0x54: function(context, operands) { /* stkcopy */\n        oputil_unload_offstate(context);\n        if (quot_isconstant(operands[0])) {\n            var ix, holdvar;\n            var pos = Number(operands[0]);\n            for (ix=0; ix<pos; ix++) {\n                holdvar = alloc_holdvar(context, true);\n                context.offstack.push(holdvar);\n                context.code.push(holdvar+\"=self.frame.valstack[self.frame.valstack.length-\"+(pos-ix)+\"];\");\n            }\n        }\n        else {\n            context.varsused[\"ix\"] = true;\n            context.varsused[\"jx\"] = true;\n            context.code.push(\"jx = self.frame.valstack.length-(\"+operands[0]+\");\");\n            context.code.push(\"for (ix=0; ix<\"+operands[0]+\"; ix++) { self.frame.valstack.push(self.frame.valstack[jx+ix]); }\");\n        }\n    },\n\n    0x100: function(context, operands) { /* gestalt */\n        var expr = \"self.do_gestalt((\"+operands[0]+\"),(\"+operands[1]+\"))\";\n        context.code.push(operands[2]+expr+\");\");\n    },\n\n    0x101: function(context, operands) { /* debugtrap */\n        context.code.push(\"self.fatal_error('User debugtrap encountered.', \"+operands[0]+\");\");\n    },\n\n    0x102: function(context, operands) { /* getmemsize */\n        context.code.push(operands[0]+\"self.endmem);\");\n    },\n\n    0x103: function(context, operands) { /* setmemsize */\n        context.code.push(\"self.change_memsize(\"+operands[0]+\",false);\");\n        /* An allocation failure is a fatal error, so we always return \n           success. */\n        context.code.push(operands[1]+\"0);\");\n    },\n\n    0x110: function(context, operands) { /* random */\n        var expr;\n        /* Note that we don't trust Math.random() to be absolutely random.\n           On Chrome, the last few bits aren't. That's why random(0) is\n           done in two chunks. */\n        if (quot_isconstant(operands[0])) {\n            var val = Number(operands[0]) & 0xffffffff; /* signed */\n            if (val == 0)\n                expr = \"(Math.floor(self.random_func() * 0x10000) | (Math.floor(self.random_func() * 0x10000) << 16)) >>>0\";\n            else if (val > 0)\n                expr = \"Math.floor(self.random_func() * \"+val+\")\";\n            else\n                expr = \"-Math.floor(self.random_func() * \"+(-val)+\")\";\n        }\n        else {\n            var sign0 = oputil_signify_operand(context, operands[0], true);\n            var holdvar = alloc_holdvar(context);\n            expr = holdvar;\n            context.code.push(\"if (\"+sign0+\" > 0)\");\n            context.code.push(holdvar+\" = Math.floor(self.random_func() * \"+sign0+\");\");\n            context.code.push(\"else if (\"+sign0+\" < 0)\");\n            context.code.push(holdvar+\" = -Math.floor(self.random_func() * -\"+sign0+\");\");\n            context.code.push(\"else\");\n            context.code.push(holdvar+\" = (Math.floor(self.random_func() * 0x10000) | (Math.floor(self.random_func() * 0x10000) << 16)) >>>0;\");\n        }\n        context.code.push(operands[1]+expr+\");\");\n    },\n\n    0x111: function(context, operands) { /* setrandom */\n        context.code.push(\"self.set_random(\" + operands[0] + \");\");\n    },\n\n    0x120: function(context, operands) { /* quit */\n        /* Quash the offstack. No more execution. */\n        ;;;context.code.push(\"// quashing offstack for quit: \" + context.offstack.length); //debug\n        context.offstack.length = 0;\n        context.offloc.length = 0;\n        context.offlocdirty.length = 0;\n        context.code.push(\"return self.VMStopped;\");\n        context.path_ends = true;\n    },\n\n    0x121: function(context, operands) { /* verify */\n        context.code.push(operands[0]+\"self.perform_verify());\");\n    },\n\n    0x122: function(context, operands) { /* restart */\n        /* Quash the offstack. No more execution. */\n        ;;;context.code.push(\"// quashing offstack for quit: \" + context.offstack.length); //debug\n        context.offstack.length = 0;\n        context.offloc.length = 0;\n        context.offlocdirty.length = 0;\n        context.code.push(\"self.vm_restart();\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x123: function(context, operands) { /* save */\n        oputil_unload_offstate(context);\n        context.varsused[\"ix\"] = true;\n        oputil_push_callstub(context, operands[1]);\n        context.code.push(\"ix = self.vm_save(\"+operands[0]+\");\");\n        context.code.push(\"self.pop_callstub(ix ? 0 : 1);\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x124: function(context, operands) { /* restore */\n        oputil_unload_offstate(context);\n        context.code.push(\"if (self.vm_restore(\"+operands[0]+\")) {\");\n        /* Succeeded. Pop the call stub that save pushed, using -1\n           to indicate success. */\n        context.code.push(\"self.pop_callstub((-1)>>>0);\");\n        context.code.push(\"} else {\");\n        /* Failed to restore. Put back the PC, in case it got overwritten. */\n        oputil_store(context, operands[1], \"1\");\n        oputil_unload_offstate(context); // again\n        context.code.push(\"self.pc = \"+context.cp+\";\");\n        context.code.push(\"}\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x125: function(context, operands) { /* saveundo */\n        oputil_unload_offstate(context);\n        oputil_push_callstub(context, operands[0]);\n        context.code.push(\"self.vm_saveundo();\");\n        /* Any failure was a fatal error, so we return success. */\n        context.code.push(\"self.pop_callstub(0);\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x126: function(context, operands) { /* restoreundo */\n        oputil_unload_offstate(context);\n        context.code.push(\"if (self.vm_restoreundo()) {\");\n        /* Succeeded. Pop the call stub that saveundo pushed, using -1\n           to indicate success. */\n        context.code.push(\"self.pop_callstub((-1)>>>0);\");\n        context.code.push(\"} else {\");\n        /* Failed to restore. Put back the PC, in case it got overwritten. */\n        oputil_store(context, operands[0], \"1\");\n        oputil_unload_offstate(context); // again\n        context.code.push(\"self.pc = \"+context.cp+\";\");\n        context.code.push(\"}\");\n        context.code.push(\"return;\");\n        context.path_ends = true;\n    },\n\n    0x127: function(context, operands) { /* protect */\n        context.code.push(\"self.protectstart=\"+operands[0]+\";\");\n        context.code.push(\"self.protectend=self.protectstart+(\"+operands[1]+\");\");\n        context.code.push(\"if (self.protectstart==self.protectend) {\")\n        context.code.push(\"  self.protectstart=0; self.protectend=0;\");\n        context.code.push(\"}\");\n    },\n\n    0x128: function(context, operands) { /* hasundo */\n        context.code.push(operands[0]+\"(self.vm_hasundo() ? 0 : 1));\");\n    },\n\n    0x129: function(context, operands) { /* discardundo */\n        context.code.push(\"self.vm_discardundo();\");\n    },\n\n    0x170: function(context, operands) { /* mzero */\n        context.varsused[\"maddr\"] = true;\n        context.varsused[\"mlen\"] = true;\n        context.varsused[\"ix\"] = true;\n        context.code.push(\"mlen=\"+operands[0]+\";\");\n        context.code.push(\"maddr=\"+operands[1]+\";\");\n        context.code.push(\"for (ix=0; ix<mlen; ix++, maddr++) self.MemW1(maddr, 0);\");\n    },\n\n    0x171: function(context, operands) { /* mcopy */\n        context.varsused[\"msrc\"] = true;\n        context.varsused[\"mdest\"] = true;\n        context.varsused[\"mlen\"] = true;\n        context.varsused[\"ix\"] = true;\n        context.code.push(\"mlen=\"+operands[0]+\";\");\n        context.code.push(\"msrc=\"+operands[1]+\";\");\n        context.code.push(\"mdest=\"+operands[2]+\";\");\n\n        /* This could be optimized for the case where mlen is constant.\n           But for a rarely-used opcode, it's not really worth it. \n        */\n        context.code.push(\"if (mdest < msrc) {\");\n        context.code.push(\"for (ix=0; ix<mlen; ix++, msrc++, mdest++) self.MemW1(mdest, self.Mem1(msrc));\");\n        context.code.push(\"} else {\");\n        context.code.push(\"msrc += (mlen-1); mdest += (mlen-1);\");\n        context.code.push(\"for (ix=0; ix<mlen; ix++, msrc--, mdest--) self.MemW1(mdest, self.Mem1(msrc));\");\n        context.code.push(\"}\");\n    },\n\n    0x178: function(context, operands) { /* malloc */\n        var expr = \"self.heap_malloc(\"+operands[0]+\")\";\n        context.code.push(operands[1]+expr+\");\");\n        ;;;context.code.push(\"self.assert_heap_valid();\"); //assert\n    },\n    \n    0x179: function(context, operands) { /* mfree */\n        context.code.push(\"self.heap_free(\"+operands[0]+\");\");\n        ;;;context.code.push(\"self.assert_heap_valid();\"); //assert\n    },\n\n    0x180: function(context, operands) { /* accelfunc */\n        context.code.push(\"self.accel_funcnum_map[\"+operands[1]+\"] = \"+operands[0]+\";\");\n        context.code.push(\"self.accel_address_map[\"+operands[1]+\"] = self.accel_func_map[\"+operands[0]+\"];\");\n    },\n    \n    0x181: function(context, operands) { /* accelparam */\n        context.code.push(\"if (\"+operands[0]+\" < 9) {\");\n        context.code.push(\"  self.accel_params[\"+operands[0]+\"] = \"+operands[1]+\";\");\n        context.code.push(\"}\");\n    },\n    \n\n    0x150: function(context, operands) { /* linearsearch */\n        var expr = \"self.linear_search((\"+operands[0]+\"),(\"+operands[1]+\"),(\"+operands[2]+\"),(\"+operands[3]+\"),(\"+operands[4]+\"),(\"+operands[5]+\"),(\"+operands[6]+\"))\";\n        context.code.push(operands[7]+expr+\");\");\n    },\n\n    0x151: function(context, operands) { /* binarysearch */\n        var expr = \"self.binary_search((\"+operands[0]+\"),(\"+operands[1]+\"),(\"+operands[2]+\"),(\"+operands[3]+\"),(\"+operands[4]+\"),(\"+operands[5]+\"),(\"+operands[6]+\"))\";\n        context.code.push(operands[7]+expr+\");\");\n    },\n\n    0x152: function(context, operands) { /* linkedsearch */\n        var expr = \"self.linked_search((\"+operands[0]+\"),(\"+operands[1]+\"),(\"+operands[2]+\"),(\"+operands[3]+\"),(\"+operands[4]+\"),(\"+operands[5]+\"))\";\n        context.code.push(operands[6]+expr+\");\");\n    },\n\n    0x70: function(context, operands) { /* streamchar */\n        switch (context.curiosys) {\n        case 2: /* glk */\n            if (quot_isconstant(operands[0])) {\n                var val = Number(operands[0]) & 0xff;\n                context.code.push(\"self.Glk.glk_put_char(\"+val+\");\");\n            }\n            else {\n                context.code.push(\"self.Glk.glk_put_char((\"+operands[0]+\")&0xff);\");\n            }\n            break;\n        case 1: /* filter */\n            oputil_unload_offstate(context);\n            context.code.push(\"self.tempcallargs[0]=((\"+operands[0]+\")&0xff);\");\n            oputil_push_callstub(context, \"0,0\");\n            context.code.push(\"self.enter_function(self.iosysrock, 1);\");\n            context.code.push(\"return;\");\n            context.path_ends = true;\n            break;\n        case 0: /* null */\n            ;;;context.code.push(\"// null streamchar \" + operands[0]); //debug\n            break;\n        }\n    },\n\n    0x71: function(context, operands) { /* streamnum */\n        switch (context.curiosys) {\n        case 2: /* glk */\n            var sign0 = oputil_signify_operand(context, operands[0]);\n            if (quot_isconstant(operands[0])) {\n                var val = Number(sign0).toString(10);\n                context.code.push(\"self.Glk.glk_put_jstring(\"+QuoteEscapeString(val)+\", true);\");\n            }\n            else {\n                context.code.push(\"self.Glk.glk_put_jstring((\"+sign0+\").toString(10), true);\");\n            }\n            break;\n        case 1: /* filter */\n            oputil_unload_offstate(context);\n            context.code.push(\"self.stream_num(\"+context.cp+\",\"+operands[0]+\", false, 0);\");\n            /* stream_num always creates a new frame in filter mode. */\n            context.code.push(\"return;\");\n            context.path_ends = true;\n            break;\n        case 0: /* null */\n            ;;;context.code.push(\"// null streamnum \" + operands[0]); //debug\n            break;\n        }\n    },\n\n    0x72: function(context, operands) { /* streamstr */\n        /* It would be nice to determine at compile-time whether the\n           value is a (cacheable) simple string value. In that case, we\n           could throw it into glk_put_jstring and continue -- no need\n           to unload the offstack or return. (Or, of the value is \n           determined to be a function, we can unload and return.)\n        */\n        oputil_unload_offstate(context);\n        context.code.push(\"if (self.stream_string(\"+context.cp+\",\"+operands[0]+\", 0, 0)) return;\");\n    },\n\n    0x73: function(context, operands) { /* streamunichar */\n        switch (context.curiosys) {\n        case 2: /* glk */\n            if (quot_isconstant(operands[0])) {\n                var val = Number(operands[0]);\n                context.code.push(\"self.Glk.glk_put_char_uni(\"+val+\");\");\n            }\n            else {\n                context.code.push(\"self.Glk.glk_put_char_uni(\"+operands[0]+\");\");\n            }\n            break;\n        case 1: /* filter */\n            oputil_unload_offstate(context);\n            context.code.push(\"self.tempcallargs[0]=(\"+operands[0]+\");\");\n            oputil_push_callstub(context, \"0,0\");\n            context.code.push(\"self.enter_function(self.iosysrock, 1);\");\n            context.code.push(\"return;\");\n            context.path_ends = true;\n            break;\n        case 0: /* null */\n            ;;;context.code.push(\"// null streamchar \" + operands[0]); //debug\n            break;\n        }\n    },\n\n    0x140: function(context, operands) { /* getstringtbl */\n        context.code.push(operands[0]+\"self.stringtable)\");\n    },\n\n    0x141: function(context, operands) { /* setstringtbl */\n        context.code.push(\"self.set_string_table(\"+operands[0]+\");\");\n    },\n\n    0x148: function(context, operands) { /* getiosys */\n        context.code.push(operands[0]+\"self.iosysmode)\");\n        context.code.push(operands[1]+\"self.iosysrock)\");\n    },\n\n    0x149: function(context, operands) { /* setiosys */\n        context.code.push(\"self.set_iosys(\"+operands[0]+\",\"+operands[1]+\");\");\n        if (quot_isconstant(operands[0])) {\n            var val = Number(operands[0]);\n            context.curiosys = val;\n        }\n        else {\n            /* We can't compile with an unknown iosysmode. So, stop \n               compiling. */\n            oputil_unload_offstate(context);\n            context.code.push(\"self.pc = \"+context.cp+\";\");\n            context.code.push(\"return;\");\n            context.path_ends = true;\n        }\n    },\n\n    0x190: function(context, operands) { /* numtof */\n        var sign0 = oputil_signify_operand(context, operands[0]);\n        if (quot_isconstant(operands[0])) {\n            var val = Number(sign0);\n            context.code.push(operands[1]+encode_float(val)+\");\");\n        }\n        else {\n            context.code.push(operands[1]+\"self.encode_float(\"+sign0+\"));\");\n        }\n    },\n\n    0x191: function(context, operands) { /* ftonumz */\n        context.varsused[\"valf\"] = true;\n        context.varsused[\"res\"] = true;\n        context.code.push(\"valf = \"+oputil_decode_float(context, operands[0])+\";\");\n        context.code.push(\"if (!(\"+operands[0]+\" & 0x80000000)) {\");\n        context.code.push(\"  if (isNaN(valf) || !isFinite(valf) || (valf > 0x7fffffff))\");\n        context.code.push(\"    res = 0x7fffffff;\");\n        context.code.push(\"  else\");\n        context.code.push(\"    res = Math.floor(valf);\");\n        context.code.push(\"} else {\");\n        context.code.push(\"  if (isNaN(valf) || !isFinite(valf) || (valf < -0x80000000))\");\n        context.code.push(\"    res = -0x80000000;\");\n        context.code.push(\"  else\");\n        context.code.push(\"    res = Math.ceil(valf);\");\n        context.code.push(\"}\");\n        context.code.push(operands[1]+\"res>>>0);\");\n    },\n\n    0x192: function(context, operands) { /* ftonumn */\n        context.varsused[\"valf\"] = true;\n        context.varsused[\"res\"] = true;\n        context.code.push(\"valf = \"+oputil_decode_float(context, operands[0])+\";\");\n        context.code.push(\"if (!(\"+operands[0]+\" & 0x80000000)) {\");\n        context.code.push(\"  if (isNaN(valf) || !isFinite(valf))\");\n        context.code.push(\"    res = 0x7fffffff;\");\n        context.code.push(\"  else\");\n        context.code.push(\"    res = Math.round(valf);\");\n        context.code.push(\"  if (res > 0x7fffffff) res = 0x7fffffff;\");\n        context.code.push(\"} else {\");\n        context.code.push(\"  if (isNaN(valf) || !isFinite(valf))\");\n        context.code.push(\"    res = -0x80000000;\");\n        context.code.push(\"  else\");\n        context.code.push(\"    res = Math.round(valf);\");\n        context.code.push(\"  if (res < -0x80000000) res = -0x80000000;\");\n        context.code.push(\"}\");\n        context.code.push(operands[1]+\"res>>>0);\");\n    },\n\n    0x198: function(context, operands) { /* ceil */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.ceil(\"+valf+\")));\");\n    },\n\n    0x199: function(context, operands) { /* floor */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.floor(\"+valf+\")));\");\n    },\n\n    0x1A0: function(context, operands) { /* fadd */\n        var valf0 = oputil_decode_float(context, operands[0]);\n        var valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(operands[2]+\"self.encode_float(\"+valf0+\" + \"+valf1+\"));\");\n    },\n\n    0x1A1: function(context, operands) { /* fsub */\n        var valf0 = oputil_decode_float(context, operands[0]);\n        var valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(operands[2]+\"self.encode_float(\"+valf0+\" - \"+valf1+\"));\");\n    },\n\n    0x1A2: function(context, operands) { /* fmul */\n        var valf0 = oputil_decode_float(context, operands[0]);\n        var valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(operands[2]+\"self.encode_float(\"+valf0+\" * \"+valf1+\"));\");\n    },\n\n    0x1A3: function(context, operands) { /* fdiv */\n        var valf0 = oputil_decode_float(context, operands[0]);\n        var valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(operands[2]+\"self.encode_float(\"+valf0+\" / \"+valf1+\"));\");\n    },\n\n    0x1A4: function(context, operands) { /* fmod */\n        var valf0 = oputil_decode_float(context, operands[0], true);\n        var valf1 = oputil_decode_float(context, operands[1], true);\n        context.varsused[\"modv\"] = true;\n        context.varsused[\"quov\"] = true;\n        context.code.push(\"modv=(\"+valf0+\" % \"+valf1+\");\");\n        context.code.push(\"quov=self.encode_float((\"+valf0+\" - modv) / \"+valf1+\");\");\n        context.code.push(\"if (quov == 0x0 || quov == 0x80000000) {\");\n        /* When the quotient is zero, the sign has been lost in the\n           shuffle. We'll set that by hand, based on the original\n           arguments. */\n        context.code.push(\"  quov = ((\"+operands[0]+\" ^ \"+operands[1]+\") & 0x80000000) >>>0;\");\n        context.code.push(\"}\");\n        context.code.push(operands[2]+\"self.encode_float(modv));\");\n        context.code.push(operands[3]+\"quov);\");\n    },\n\n    0x1A8: function(context, operands) { /* sqrt */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.sqrt(\"+valf+\")));\");\n    },\n\n    0x1A9: function(context, operands) { /* exp */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.exp(\"+valf+\")));\");\n    },\n\n    0x1AA: function(context, operands) { /* log */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.log(\"+valf+\")));\");\n    },\n\n    0x1AB: function(context, operands) { /* pow */\n        context.varsused[\"valf\"] = true;\n        var valf0 = oputil_decode_float(context, operands[0], true);\n        var valf1 = oputil_decode_float(context, operands[1], true);\n        context.code.push(\"if (\"+operands[0]+\" == 0x3f800000) {\");\n        /* pow(1, anything) is 1 */\n        context.code.push(\"  valf = 0x3f800000;\");\n        context.code.push(\"} else if (\"+operands[0]+\" == 0xbf800000 && (\"+operands[1]+\" == 0xff800000 || \"+operands[1]+\" == 0x7f800000)) {\");\n        /* pow(-1, infinity) is 1 */\n        context.code.push(\"  valf = 0x3f800000;\");\n        context.code.push(\"} else {\");\n        context.code.push(\"  valf=self.encode_float(Math.pow(\"+valf0+\", \"+valf1+\"));\");\n        context.code.push(\"}\");\n        context.code.push(operands[2]+\"valf);\");\n    },\n\n    0x1B0: function(context, operands) { /* sin */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.sin(\"+valf+\")));\");\n    },\n\n    0x1B1: function(context, operands) { /* cos */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.cos(\"+valf+\")));\");\n    },\n\n    0x1B2: function(context, operands) { /* tan */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.tan(\"+valf+\")));\");\n    },\n\n    0x1B3: function(context, operands) { /* asin */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.asin(\"+valf+\")));\");\n    },\n\n    0x1B4: function(context, operands) { /* acos */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.acos(\"+valf+\")));\");\n    },\n\n    0x1B5: function(context, operands) { /* atan */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.code.push(operands[1]+\"self.encode_float(Math.atan(\"+valf+\")));\");\n    },\n\n    0x1B6: function(context, operands) { /* atan2 */\n        var valf0 = oputil_decode_float(context, operands[0]);\n        var valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(operands[2]+\"self.encode_float(Math.atan2(\"+valf0+\", \"+valf1+\")));\");\n    },\n\n    0x1C0: function(context, operands) { /* jfeq */\n        var val, valf0, valf1, valf2;\n        context.varsused[\"fequal\"] = true;\n        context.varsused[\"fdiff\"] = true;\n        context.code.push(\"if ((\"+operands[2]+\" & 0x7f800000) == 0x7f800000 && (\"+operands[2]+\" & 0x007fffff) != 0) {\");\n        /* The delta is NaN, which can never match. */\n        context.code.push(\"  fequal = 0;\");\n        context.code.push(\"} else if ((\"+operands[0]+\" == 0xff800000 || \"+operands[0]+\" == 0x7f800000) && (\"+operands[1]+\" == 0xff800000 || \"+operands[1]+\" == 0x7f800000)) {\");\n        /* Both are infinite. Opposite infinities are never equal,\n           even if the difference is infinite, so this is easy. */\n        context.code.push(\"  fequal = (\"+operands[0]+\" == \"+operands[1]+\");\");\n        context.code.push(\"} else {\");\n        /* The other case: the values are not both infinite. */\n        if (quot_isconstant(operands[2])) {\n            val = Number(operands[2]);\n            valf2 = \"\" + decode_float(val & 0x7fffffff);\n        }\n        else {\n            val = \"self.decode_float((\"+operands[2]+\") & 0x7fffffff)\";\n            valf2 = alloc_holdvar(context);\n            context.code.push(valf2+\"=\"+val+\";\");\n        }\n        valf0 = oputil_decode_float(context, operands[0]);\n        valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(\"  fdiff = \"+valf1+\" - \"+valf0+\";\");\n        context.code.push(\"  fequal = (fdiff <= \"+valf2+\" && fdiff >= -(\"+valf2+\"));\");\n        context.code.push(\"}\");\n        context.code.push(\"if (fequal) {\");\n        oputil_perform_jump(context, operands[3]);\n        context.code.push(\"}\");\n    },\n\n    0x1C1: function(context, operands) { /* jfne */\n        var val, valf0, valf1, valf2;\n        context.varsused[\"fequal\"] = true;\n        context.varsused[\"fdiff\"] = true;\n        context.code.push(\"if ((\"+operands[2]+\" & 0x7f800000) == 0x7f800000 && (\"+operands[2]+\" & 0x007fffff) != 0) {\");\n        /* The delta is NaN, which can never match. */\n        context.code.push(\"  fequal = 0;\");\n        context.code.push(\"} else if ((\"+operands[0]+\" == 0xff800000 || \"+operands[0]+\" == 0x7f800000) && (\"+operands[1]+\" == 0xff800000 || \"+operands[1]+\" == 0x7f800000)) {\");\n        /* Both are infinite. Opposite infinities are never equal,\n           even if the difference is infinite, so this is easy. */\n        context.code.push(\"  fequal = (\"+operands[0]+\" == \"+operands[1]+\");\");\n        context.code.push(\"} else {\");\n        /* The other case: the values are not both infinite. */\n        if (quot_isconstant(operands[2])) {\n            val = Number(operands[2]);\n            valf2 = \"\" + decode_float(val & 0x7fffffff);\n        }\n        else {\n            val = \"self.decode_float((\"+operands[2]+\") & 0x7fffffff)\";\n            valf2 = alloc_holdvar(context);\n            context.code.push(valf2+\"=\"+val+\";\");\n        }\n        valf0 = oputil_decode_float(context, operands[0]);\n        valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(\"  fdiff = \"+valf1+\" - \"+valf0+\";\");\n        context.code.push(\"  fequal = (fdiff <= \"+valf2+\" && fdiff >= -(\"+valf2+\"));\");\n        context.code.push(\"}\");\n        context.code.push(\"if (!fequal) {\");\n        oputil_perform_jump(context, operands[3]);\n        context.code.push(\"}\");\n    },\n\n    0x1C2: function(context, operands) { /* jflt */\n        var valf0, valf1;\n        valf0 = oputil_decode_float(context, operands[0]);\n        valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(\"if (\"+valf0+\" < \"+valf1+\") {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x1C3: function(context, operands) { /* jfle */\n        var valf0, valf1;\n        valf0 = oputil_decode_float(context, operands[0]);\n        valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(\"if (\"+valf0+\" <= \"+valf1+\") {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x1C4: function(context, operands) { /* jfgt */\n        var valf0, valf1;\n        valf0 = oputil_decode_float(context, operands[0]);\n        valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(\"if (\"+valf0+\" > \"+valf1+\") {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x1C5: function(context, operands) { /* jfge */\n        var valf0, valf1;\n        valf0 = oputil_decode_float(context, operands[0]);\n        valf1 = oputil_decode_float(context, operands[1]);\n        context.code.push(\"if (\"+valf0+\" >= \"+valf1+\") {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x1C8: function(context, operands) { /* jisnan */\n        context.code.push(\"if ((\"+operands[0]+\" & 0x7f800000) == 0x7f800000 && (\"+operands[0]+\" & 0x007fffff) != 0) {\");\n        oputil_perform_jump(context, operands[1]);\n        context.code.push(\"}\");\n    },\n\n    0x1C9: function(context, operands) { /* jisinf */\n        context.code.push(\"if (\"+operands[0]+\" == 0xff800000 || \"+operands[0]+\" == 0x7f800000) {\");\n        oputil_perform_jump(context, operands[1]);\n        context.code.push(\"}\");\n    },\n\n    0x200: function(context, operands) { /* numtod */\n        var sign0 = oputil_signify_operand(context, operands[0]);\n        if (quot_isconstant(operands[0])) {\n            var val = Number(sign0);\n            var valpair = encode_double(val);\n            context.code.push(operands[1]+valpair.lo+\");\");\n            context.code.push(operands[2]+valpair.hi+\");\");\n        }\n        else {\n            context.varsused[\"dbl\"] = true;\n            context.code.push(\"dbl=self.encode_double(\"+sign0+\");\");\n            context.code.push(operands[1]+\"dbl.lo);\");\n            context.code.push(operands[2]+\"dbl.hi);\");\n        }\n    },\n\n    0x201: function(context, operands) { /* dtonumz */\n        context.varsused[\"vald\"] = true;\n        context.varsused[\"res\"] = true;\n        context.code.push(\"vald = \"+oputil_decode_double(context, operands[0], operands[1])+\";\");\n        context.code.push(\"if (!(\"+operands[0]+\" & 0x80000000)) {\");\n        context.code.push(\"  if (isNaN(vald) || !isFinite(vald) || (vald > 0x7fffffff))\");\n        context.code.push(\"    res = 0x7fffffff;\");\n        context.code.push(\"  else\");\n        context.code.push(\"    res = Math.floor(vald);\");\n        context.code.push(\"} else {\");\n        context.code.push(\"  if (isNaN(vald) || !isFinite(vald) || (vald < -0x80000000))\");\n        context.code.push(\"    res = -0x80000000;\");\n        context.code.push(\"  else\");\n        context.code.push(\"    res = Math.ceil(vald);\");\n        context.code.push(\"}\");\n        context.code.push(operands[2]+\"res>>>0);\");\n    },\n\n    0x202: function(context, operands) { /* dtonumn */\n        context.varsused[\"vald\"] = true;\n        context.varsused[\"res\"] = true;\n        context.code.push(\"vald = \"+oputil_decode_double(context, operands[0], operands[1])+\";\");\n        context.code.push(\"if (!(\"+operands[0]+\" & 0x80000000)) {\");\n        context.code.push(\"  if (isNaN(vald) || !isFinite(vald))\");\n        context.code.push(\"    res = 0x7fffffff;\");\n        context.code.push(\"  else\");\n        context.code.push(\"    res = Math.round(vald);\");\n        context.code.push(\"  if (res > 0x7fffffff) res = 0x7fffffff;\");\n        context.code.push(\"} else {\");\n        context.code.push(\"  if (isNaN(vald) || !isFinite(vald))\");\n        context.code.push(\"    res = -0x80000000;\");\n        context.code.push(\"  else\");\n        context.code.push(\"    res = Math.round(vald);\");\n        context.code.push(\"  if (res < -0x80000000) res = -0x80000000;\");\n        context.code.push(\"}\");\n        context.code.push(operands[2]+\"res>>>0);\");\n    },\n\n    0x203: function(context, operands) { /* ftod */\n        var valf = oputil_decode_float(context, operands[0]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(\"+valf+\");\");\n        context.code.push(operands[1]+\"dbl.lo);\");\n        context.code.push(operands[2]+\"dbl.hi);\");\n    },\n\n    0x204: function(context, operands) { /* dtof */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.code.push(operands[2]+\"self.encode_float(\"+vald+\"));\");\n    },\n\n    0x208: function(context, operands) { /* dceil */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.ceil(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x209: function(context, operands) { /* dfloor */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.floor(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x210: function(context, operands) { /* dadd */\n        var vald1 = oputil_decode_double(context, operands[0], operands[1]);\n        var vald2 = oputil_decode_double(context, operands[2], operands[3]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(\"+vald1+\" + \"+vald2+\");\");\n        context.code.push(operands[4]+\"dbl.lo);\");\n        context.code.push(operands[5]+\"dbl.hi);\");\n    },\n\n    0x211: function(context, operands) { /* dsub */\n        var vald1 = oputil_decode_double(context, operands[0], operands[1]);\n        var vald2 = oputil_decode_double(context, operands[2], operands[3]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(\"+vald1+\" - \"+vald2+\");\");\n        context.code.push(operands[4]+\"dbl.lo);\");\n        context.code.push(operands[5]+\"dbl.hi);\");\n    },\n\n    0x212: function(context, operands) { /* dmul */\n        var vald1 = oputil_decode_double(context, operands[0], operands[1]);\n        var vald2 = oputil_decode_double(context, operands[2], operands[3]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(\"+vald1+\" * \"+vald2+\");\");\n        context.code.push(operands[4]+\"dbl.lo);\");\n        context.code.push(operands[5]+\"dbl.hi);\");\n    },\n\n    0x213: function(context, operands) { /* ddiv */\n        var vald1 = oputil_decode_double(context, operands[0], operands[1]);\n        var vald2 = oputil_decode_double(context, operands[2], operands[3]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(\"+vald1+\" / \"+vald2+\");\");\n        context.code.push(operands[4]+\"dbl.lo);\");\n        context.code.push(operands[5]+\"dbl.hi);\");\n    },\n\n    0x214: function(context, operands) { /* dmodr */\n        var vald1 = oputil_decode_double(context, operands[0], operands[1]);\n        var vald2 = oputil_decode_double(context, operands[2], operands[3]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(\"+vald1+\" % \"+vald2+\");\");\n        context.code.push(operands[4]+\"dbl.lo);\");\n        context.code.push(operands[5]+\"dbl.hi);\");\n    },\n\n    0x215: function(context, operands) { /* dmodq */\n        context.varsused[\"vald1\"] = true;\n        context.varsused[\"vald2\"] = true;\n        context.code.push(\"vald1 = \"+oputil_decode_double(context, operands[0], operands[1])+\";\");\n        context.code.push(\"vald2 = \"+oputil_decode_double(context, operands[2], operands[3])+\";\");\n        context.varsused[\"dbl\"] = true;\n        context.varsused[\"modv\"] = true;\n        context.varsused[\"quov\"] = true;\n        context.code.push(\"modv=(vald1 % vald2);\");\n        context.code.push(\"dbl=self.encode_double((vald1 - modv) / vald2);\");\n        context.code.push(\"if ((dbl.hi == 0x0 || dbl.hi == 0x80000000) && dbl.lo == 0x0) {\");\n        /* When the quotient is zero, the sign has been lost in the\n           shuffle. We'll set that by hand, based on the original\n           arguments. */\n        context.code.push(\"  dbl.hi = ((\"+operands[0]+\" ^ \"+operands[2]+\") & 0x80000000) >>>0;\");\n        context.code.push(\"}\");\n        context.code.push(operands[4]+\"dbl.lo);\");\n        context.code.push(operands[5]+\"dbl.hi);\");\n    },\n\n    0x218: function(context, operands) { /* dsqrt */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.sqrt(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x219: function(context, operands) { /* dexp */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.exp(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x21A: function(context, operands) { /* dlog */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.log(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x21B: function(context, operands) { /* dpow */\n        context.varsused[\"dbl\"] = true;\n        var vald0 = oputil_decode_double(context, operands[0], operands[1], true);\n        var vald1 = oputil_decode_double(context, operands[2], operands[3], true);\n        context.code.push(\"if (\"+operands[0]+\" == 0x3ff00000 && \"+operands[1]+\" == 0x0) {\");\n        /* pow(1, anything) is 1 */\n        context.code.push(\"  dbl = { hi:0x3ff00000, lo:0x0 };\");\n        context.code.push(\"} else if (\"+operands[0]+\" == 0xbff00000 && \"+operands[1]+\" == 0x0 && (\"+operands[2]+\" == 0xfff00000 || \"+operands[2]+\" == 0x7ff00000) && \"+operands[3]+\" == 0x0) {\");\n        /* pow(-1, infinity) is 1 */\n        context.code.push(\"  dbl = { hi:0x3ff00000, lo:0x0 };\");\n        context.code.push(\"} else {\");\n        context.code.push(\"  dbl=self.encode_double(Math.pow(\"+vald0+\", \"+vald1+\"));\");\n        context.code.push(\"}\");\n        context.code.push(operands[4]+\"dbl.lo);\");\n        context.code.push(operands[5]+\"dbl.hi);\");\n    },\n\n    0x220: function(context, operands) { /* dsin */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.sin(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x221: function(context, operands) { /* dcos */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.cos(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x222: function(context, operands) { /* dtan */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.tan(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x223: function(context, operands) { /* dasin */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.asin(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x224: function(context, operands) { /* dacos */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.acos(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x225: function(context, operands) { /* datan */\n        var vald = oputil_decode_double(context, operands[0], operands[1]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.atan(\"+vald+\"));\");\n        context.code.push(operands[2]+\"dbl.lo);\");\n        context.code.push(operands[3]+\"dbl.hi);\");\n    },\n\n    0x226: function(context, operands) { /* datan2 */\n        var vald1 = oputil_decode_double(context, operands[0], operands[1]);\n        var vald2 = oputil_decode_double(context, operands[2], operands[3]);\n        context.varsused[\"dbl\"] = true;\n        context.code.push(\"dbl=self.encode_double(Math.atan2(\"+vald1+\", \"+vald2+\"));\");\n        context.code.push(operands[4]+\"dbl.lo);\");\n        context.code.push(operands[5]+\"dbl.hi);\");\n    },\n\n    0x230: function(context, operands) { /* jdeq */\n        var val, valhi, vallo, vald0, vald1, vald2;\n        context.varsused[\"dequal\"] = true;\n        context.varsused[\"ddiff\"] = true;\n        context.code.push(\"if ((\"+operands[4]+\" & 0x7ff00000) == 0x7ff00000 && ((\"+operands[4]+\" & 0xfffff) != 0x0 || \"+operands[5]+\" != 0x0)) {\");\n        /* The delta is NaN, which can never match. */\n        context.code.push(\"  dequal = 0;\");\n        context.code.push(\"} else if ((\"+operands[0]+\" == 0xfff00000 || \"+operands[0]+\" == 0x7ff00000) && (\"+operands[1]+\" == 0x0) && (\"+operands[2]+\" == 0xfff00000 || \"+operands[2]+\" == 0x7ff00000) && (\"+operands[3]+\" == 0x0)) {\");\n        /* Both are infinite. Opposite infinities are never equal,\n           even if the difference is infinite, so this is easy. */\n        context.code.push(\"  dequal = (\"+operands[0]+\" == \"+operands[2]+\" && \"+operands[1]+\" == \"+operands[3]+\");\");\n        context.code.push(\"} else {\");\n        /* The other case: the values are not both infinite. */\n        if (quot_isconstant(operands[4]) && quot_isconstant(operands[5])) {\n            valhi = Number(operands[4]);\n            vallo = Number(operands[5]);\n            vald2 = \"\" + decode_double((valhi & 0x7fffffff), (vallo & 0x7fffffff));\n        }\n        else {\n            val = \"self.decode_double(((\"+operands[4]+\") & 0x7fffffff), (\"+operands[5]+\"))\";\n            vald2 = alloc_holdvar(context);\n            context.code.push(vald2+\"=\"+val+\";\");\n        }\n        vald0 = oputil_decode_double(context, operands[0], operands[1]);\n        vald1 = oputil_decode_double(context, operands[2], operands[3]);\n        context.code.push(\"  ddiff = \"+vald1+\" - \"+vald0+\";\");\n        context.code.push(\"  dequal = (ddiff <= \"+vald2+\" && ddiff >= -(\"+vald2+\"));\");\n        context.code.push(\"}\");\n        context.code.push(\"if (dequal) {\");\n        oputil_perform_jump(context, operands[6]);\n        context.code.push(\"}\");\n    },\n\n    0x231: function(context, operands) { /* jdne */\n        var val, valhi, vallo, vald0, vald1, vald2;\n        context.varsused[\"dequal\"] = true;\n        context.varsused[\"ddiff\"] = true;\n        context.code.push(\"if ((\"+operands[4]+\" & 0x7ff00000) == 0x7ff00000 && ((\"+operands[4]+\" & 0xfffff) != 0x0 || \"+operands[5]+\" != 0x0)) {\");\n        /* The delta is NaN, which can never match. */\n        context.code.push(\"  dequal = 0;\");\n        context.code.push(\"} else if ((\"+operands[0]+\" == 0xfff00000 || \"+operands[0]+\" == 0x7ff00000) && (\"+operands[1]+\" == 0x0) && (\"+operands[2]+\" == 0xfff00000 || \"+operands[2]+\" == 0x7ff00000) && (\"+operands[3]+\" == 0x0)) {\");\n        /* Both are infinite. Opposite infinities are never equal,\n           even if the difference is infinite, so this is easy. */\n        context.code.push(\"  dequal = (\"+operands[0]+\" == \"+operands[2]+\" && \"+operands[1]+\" == \"+operands[3]+\");\");\n        context.code.push(\"} else {\");\n        /* The other case: the values are not both infinite. */\n        if (quot_isconstant(operands[4]) && quot_isconstant(operands[5])) {\n            valhi = Number(operands[4]);\n            vallo = Number(operands[5]);\n            vald2 = \"\" + decode_double((valhi & 0x7fffffff), (vallo & 0x7fffffff));\n        }\n        else {\n            val = \"self.decode_double(((\"+operands[4]+\") & 0x7fffffff), (\"+operands[5]+\"))\";\n            vald2 = alloc_holdvar(context);\n            context.code.push(vald2+\"=\"+val+\";\");\n        }\n        vald0 = oputil_decode_double(context, operands[0], operands[1]);\n        vald1 = oputil_decode_double(context, operands[2], operands[3]);\n        context.code.push(\"  ddiff = \"+vald1+\" - \"+vald0+\";\");\n        context.code.push(\"  dequal = (ddiff <= \"+vald2+\" && ddiff >= -(\"+vald2+\"));\");\n        context.code.push(\"}\");\n        context.code.push(\"if (!dequal) {\");\n        oputil_perform_jump(context, operands[6]);\n        context.code.push(\"}\");\n    },\n\n    0x232: function(context, operands) { /* jdlt */\n        var vald1 = oputil_decode_double(context, operands[0], operands[1]);\n        var vald2 = oputil_decode_double(context, operands[2], operands[3]);\n        context.code.push(\"if (\"+vald1+\" < \"+vald2+\") {\");\n        oputil_perform_jump(context, operands[4]);\n        context.code.push(\"}\");\n    },\n\n    0x233: function(context, operands) { /* jdle */\n        var vald1 = oputil_decode_double(context, operands[0], operands[1]);\n        var vald2 = oputil_decode_double(context, operands[2], operands[3]);\n        context.code.push(\"if (\"+vald1+\" <= \"+vald2+\") {\");\n        oputil_perform_jump(context, operands[4]);\n        context.code.push(\"}\");\n    },\n\n    0x234: function(context, operands) { /* jdgt */\n        var vald1 = oputil_decode_double(context, operands[0], operands[1]);\n        var vald2 = oputil_decode_double(context, operands[2], operands[3]);\n        context.code.push(\"if (\"+vald1+\" > \"+vald2+\") {\");\n        oputil_perform_jump(context, operands[4]);\n        context.code.push(\"}\");\n    },\n\n    0x235: function(context, operands) { /* jdge */\n        var vald1 = oputil_decode_double(context, operands[0], operands[1]);\n        var vald2 = oputil_decode_double(context, operands[2], operands[3]);\n        context.code.push(\"if (\"+vald1+\" >= \"+vald2+\") {\");\n        oputil_perform_jump(context, operands[4]);\n        context.code.push(\"}\");\n    },\n\n    0x238: function(context, operands) { /* jdisnan */\n        context.code.push(\"if (((\"+operands[0]+\" & 0x7ff00000) == 0x7ff00000) && ((\"+operands[0]+\" & 0xfffff) != 0x0 || \"+operands[1]+\" != 0x0)) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x239: function(context, operands) { /* jdisinf */\n        context.code.push(\"if ((\"+operands[0]+\" == 0xfff00000 || \"+operands[0]+\" == 0x7ff00000) && \"+operands[1]+\" == 0x0) {\");\n        oputil_perform_jump(context, operands[2]);\n        context.code.push(\"}\");\n    },\n\n    0x130: function(context, operands) { /* glk */\n        var mayblock;\n        if (quot_isconstant(operands[0]))\n            mayblock = self.Glk.call_may_not_return(Number(operands[0]));\n        else\n            mayblock = true;\n        if (mayblock) {\n            context.code.push(\"  self.prevpc = \"+context.prevcp+\";\");\n            context.code.push(\"  self.pc = \"+context.cp+\";\");\n        }\n        context.code.push(\"self.tempglkargs.length = \" + operands[1] + \";\");\n        if (quot_isconstant(operands[1])) {\n            var ix;\n            var argc = Number(operands[1]);\n            for (ix=0; ix<argc; ix++) {\n                if (context.offstack.length) {\n                    var holdvar = pop_offstack_holdvar(context);\n                    context.code.push(\"self.tempglkargs[\"+ix+\"]=\"+holdvar+\";\");\n                }\n                else {\n                    context.code.push(\"self.tempglkargs[\"+ix+\"]=self.frame.valstack.pop();\");\n                }\n            }\n            oputil_unload_offstate(context);\n        }\n        else {\n            context.varsused[\"ix\"] = true;\n            oputil_unload_offstate(context);\n            context.code.push(\"for (ix=0; ix<\"+operands[1]+\"; ix++) { self.tempglkargs[ix]=self.frame.valstack.pop(); }\");\n        }\n        /* In the blocking case, we don't perform a normal store; we write a\n           literal form of operands[2] into a global and get out. Fortunately\n           we just unloaded the offstack. The non-blocking case is a normal\n           store. */\n        context.varsused[\"glkret\"] = true;\n        context.code.push(\"glkret = self.GiDispa.get_function(\"+operands[0]+\")(self.tempglkargs);\");\n        if (mayblock) {\n            context.code.push(\"if (glkret === self.Glk.DidNotReturn) {\");\n            context.code.push(\"  self.resumefuncop = \"+oputil_record_funcop(operands[2])+\";\");\n            context.code.push(\"  self.resumevalue = 0;\");\n            context.code.push(\"  self.pc = \"+context.cp+\";\");\n            context.code.push(\"  self.done_executing = true;\");\n            context.code.push(\"  return;\");\n            context.code.push(\"}\");\n        }\n        oputil_store(context, operands[2], \"glkret\");\n    }\n}\n\n/* Select a currently-unused \"_hold*\" variable, and mark it used. \n   If use is true, it's marked \"1\", meaning it's going onto the offstack\n   or offloc. \n*/\nfunction alloc_holdvar(context, use) {\n    var ix = 0;\n    var key;\n    while (true) {\n        key = \"_hold\" + ix;\n        if (!context.holduse[key]) {\n            context.holduse[key] = (use ? 1 : true);\n            return key;\n        }\n        ix++;\n    }\n}\n\n/* Remove a value from the offstack. If it is a constant, return it. If it \n   is a _hold var, mark it as not used by the offstack any more, and return \n   it (now a temporary holdvar). \n   (Do not call this if the offstack is empty.)\n*/\nfunction pop_offstack_holdvar(context) {\n    var holdvar = context.offstack.pop();\n    if (quot_isconstant(holdvar)) {\n        return holdvar;\n    }\n\n    var use = context.holduse[holdvar];\n    ;;;if (isNaN(use) || use === false || use === true) {\n    ;;;    fatal_error(\"Offstack variable not marked as stack.\", holdvar); //assert\n    ;;;}\n    use--;\n    if (use == 0)\n        use = true; // Not on the stack any more\n    context.holduse[holdvar] = use;\n    return holdvar;\n}\n\n/* Push a variable value onto the offstack. (This must be a holdvar, not\n   a constant or expression.) Mark it as used an additional time by the\n   offstate.\n*/\nfunction push_offstack_holdvar(context, holdvar) {\n    context.offstack.push(holdvar);\n\n    var use = context.holduse[holdvar];\n    if (!use || use === true)\n        use = 1;\n    else\n        use++;\n    context.holduse[holdvar] = use;\n}\n\n/* Push a constant or holdvar into the offloc array. Reduce the usage of\n   the holdvar already there, if there was one. If inchold is true,\n   increase the usage of the new holdvar. (Only set this if value *is*\n   a holdvar, and if you haven't already set its use.)\n\n   If value is undefined, this erases the entry in the offloc array,\n   instead.\n*/\nfunction store_offloc_value(context, addr, value, inchold) {\n    var oldvar = context.offloc[addr];\n    if (oldvar && quot_isholdvar(oldvar)) {\n        var use = context.holduse[oldvar];\n        use--;\n        if (use == 0)\n            use = true; // Not on the offloc any more\n        context.holduse[oldvar] = use;\n    }\n\n    if (value === undefined) {\n        context.offloc[addr] = undefined;\n        context.offlocdirty[addr] = false;\n        return;\n    }\n\n    context.offloc[addr] = value;\n    context.offlocdirty[addr] = true;\n\n    if (inchold) {\n        var holdvar = value;\n        var use = context.holduse[holdvar];\n        if (!use || use === true)\n            use = 1;\n        else\n            use++;\n        context.holduse[holdvar] = use;\n    }\n}\n\n/* Transfer values from the real stack to the offstack until there are at\n   least count on the offstack. (Do not call this if there are insufficient\n   values on the real stack.)\n*/\nfunction transfer_to_offstack(context, count) {\n    var holdvar;\n    while (context.offstack.length < count) {\n        holdvar = alloc_holdvar(context, true);\n        context.offstack.unshift(holdvar);\n        context.code.push(holdvar+\"=self.frame.valstack.pop();\");\n    }\n}\n\n/* Check whether a quoted value is a constant. */\nfunction quot_isconstant(val) {\n    return (val[0] === \"0\");\n}\n\n/* Check whether a quoted value is a holdvar. */\nfunction quot_isholdvar(val) {\n    return (val[0] === \"_\");\n}\n\n/* Read the list of operands of an instruction, and put accessor code\n   in operands. This assumes that the CP is at the beginning of the\n   operand mode list (right after an opcode number.) Upon return,\n   the CP will be at the beginning of the next instruction.\n\n   The results go into operands[0], operands[1], etc. But these are not\n   the values themselves; what you get are JS expressions which will\n   generate them. The opcode handlers then insert these expressions\n   into the code being generated.\n\n   (At this stage, operands are always unsigned integers. A constant\n   -1 comes out as \"0xffffffff\".)\n\n   What you get depends on the operand type. The Glulx spec just\n   has Load and Store operands, but this function handles a couple of\n   variations.\n\n   Load operand types:\n\n   \"E\" (expression): The returned value is an arbitrary expression. It\n   may have side effects, so the opcode handler must use the expression\n   exactly once. If there are several \"E\" operands, the handler must\n   use them in order.\n   \n   \"L\" (load): The returned value is either a numeric constant or a\n   \"_holdN\" temporary variable. In the latter case, a line of the form\n   \"_holdN = EXPRESSION\" has been inserted into the generated code\n   (before the opcode handler's code). This is more expensive than\n   \"E\", but safer, because the value will not have side effects.\n\n   (Conveniently, \"E\" and \"L\" values can be categorized by their first\n   character. Constants begin with \"0\"; temporary variables begin with\n   \"_\"; anything else is a more complex expression.)\n\n   Store operand types:\n\n   \"F\" (function): The returned value is an object. When this is passed\n   to oputil_store(), it will generate code to store the value. (Do not\n   use more than one \"F\" per opcode.)\n\n   \"S\" (store): The returned value is an expression of the form \"FUNC(\".\n   Any expression can be appended, with a close-paren, to store a value\n   in the desired place. This is faster than \"F\", but less flexible;\n   it messes with the offstack in a confusing way, and also can't treat\n   constants specially.\n\n   \"C\" (callstub): The returned value is an expression of the form \n   \"desttype,destaddr\" -- two of the values in a Glulx call stub. The\n   oputil_push_callstub() function knows how to generate code that pushes\n   a call stub, if you pass these values in.\n   \n*/\nfunction parse_operands(context, cp, oplist, operands) {\n    var modeaddr;\n    var ix, modeval, mode;\n    var value, addr;\n    var holdvar;\n\n    operands.desttype = 0;\n    operands.numops = oplist.numops;\n\n    modeaddr = cp;\n    cp += ((oplist.numops+1) >> 1);\n\n    for (ix=0; ix<oplist.numops; ix++) {\n        if ((ix & 1) == 0) {\n            modeval = Mem1(modeaddr);\n            mode = (modeval & 0x0F);\n        }\n        else {\n            mode = ((modeval >> 4) & 0x0F);\n            modeaddr++;\n        }\n\n        var optype = oplist.formlist[ix];\n\n        if (optype == \"L\") {\n            switch (mode) {\n\n            case 8: /* pop off stack */\n                if (context.offstack.length) {\n                    operands[ix] = pop_offstack_holdvar(context);\n                }\n                else {\n                    holdvar = alloc_holdvar(context);\n                    context.code.push(holdvar+\"=self.frame.valstack.pop();\");\n                    operands[ix] = holdvar;\n                }\n                continue;\n                \n            case 0: /* constant zero */\n                operands[ix] = \"0\";\n                continue;\n                \n            case 1: /* one-byte constant */\n                /* Sign-extend from 8 bits to 32 */\n                value = QuoteMem1(cp);\n                cp++;\n                operands[ix] = value;\n                continue;\n                \n            case 2: /* two-byte constant */\n                /* Sign-extend the first byte from 8 bits to 32; the subsequent\n                   byte must not be sign-extended. */\n                value = QuoteMem2(cp);\n                cp += 2;\n                operands[ix] = value;\n                continue;\n                \n            case 3: /* four-byte constant */\n                /* Bytes must not be sign-extended. */\n                value = QuoteMem4(cp);\n                cp += 4;\n                operands[ix] = value;\n                continue;\n            }\n\n            if (mode >= 9 && mode <= 11) {\n                if (mode == 9) {\n                    addr = Mem1(cp);\n                    cp++;\n                }\n                else if (mode == 10) {\n                    addr = Mem2(cp);\n                    cp += 2;\n                }\n                else if (mode == 11) {\n                    addr = Mem4(cp);\n                    cp += 4;\n                }\n\n                if (context.offloc[addr] !== undefined) {\n                    operands[ix] = context.offloc[addr];\n                    continue;\n                }\n\n                if (oplist.argsize == 4) {\n                    value = \"self.frame.locals[\"+addr+\"]\";\n                }\n                else if (oplist.argsize == 2) {\n                    value = \"self.frame.locals[\"+addr+\"] & 0xffff\";\n                }\n                else {\n                    value = \"self.frame.locals[\"+addr+\"] & 0xff\";\n                }\n                holdvar = alloc_holdvar(context, true);\n                context.code.push(holdvar+\"=(\"+value+\");\");\n                context.offloc[addr] = holdvar;\n                context.offlocdirty[addr] = false;\n                operands[ix] = holdvar;\n                continue;\n            }\n\n            switch (mode) {\n            case 15: /* main memory RAM, four-byte address */\n                addr = Mem4(cp) + ramstart;\n                cp += 4;\n                break; \n\n            case 14: /* main memory RAM, two-byte address */\n                addr = Mem2(cp) + ramstart;\n                cp += 2;\n                break; \n\n            case 13: /* main memory RAM, one-byte address */\n                addr = Mem1(cp) + ramstart;\n                cp++;\n                break; \n        \n            case 7: /* main memory, four-byte address */\n                addr = Mem4(cp);\n                cp += 4;\n                break;\n\n            case 6: /* main memory, two-byte address */\n                addr = Mem2(cp);\n                cp += 2;\n                break;\n\n            case 5: /* main memory, one-byte address */\n                addr = Mem1(cp);\n                cp++;\n                break;\n\n            default:\n                fatal_error(\"Unknown addressing mode in load operand.\");\n            }\n\n            /* The main-memory cases. */\n            if (oplist.argsize == 4) {\n                value = \"self.Mem4(\"+addr+\")\";\n            }\n            else if (oplist.argsize == 2) {\n                value = \"self.Mem2(\"+addr+\")\";\n            }\n            else {\n                value = \"self.Mem1(\"+addr+\")\";\n            }\n            holdvar = alloc_holdvar(context);\n            context.code.push(holdvar+\"=(\"+value+\");\");\n            operands[ix] = holdvar;\n            continue;\n\n        }\n        else if (optype == \"E\") {\n            switch (mode) {\n\n            case 8: /* pop off stack */\n                if (context.offstack.length) {\n                    operands[ix] = pop_offstack_holdvar(context);\n                }\n                else {\n                    operands[ix] = \"self.frame.valstack.pop()\";\n                }\n                continue;\n                \n            case 0: /* constant zero */\n                operands[ix] = \"0\";\n                continue;\n                \n            case 1: /* one-byte constant */\n                /* Sign-extend from 8 bits to 32 */\n                value = QuoteMem1(cp);\n                cp++;\n                operands[ix] = value;\n                continue;\n                \n            case 2: /* two-byte constant */\n                /* Sign-extend the first byte from 8 bits to 32; the subsequent\n                   byte must not be sign-extended. */\n                value = QuoteMem2(cp);\n                cp += 2;\n                operands[ix] = value;\n                continue;\n                \n            case 3: /* four-byte constant */\n                /* Bytes must not be sign-extended. */\n                value = QuoteMem4(cp);\n                cp += 4;\n                operands[ix] = value;\n                continue;\n            }\n\n            if (mode >= 9 && mode <= 11) {\n                if (mode == 9) {\n                    addr = Mem1(cp);\n                    cp++;\n                }\n                else if (mode == 10) {\n                    addr = Mem2(cp);\n                    cp += 2;\n                }\n                else if (mode == 11) {\n                    addr = Mem4(cp);\n                    cp += 4;\n                }\n\n                if (context.offloc[addr] !== undefined) {\n                    operands[ix] = context.offloc[addr];\n                    continue;\n                }\n\n                if (oplist.argsize == 4) {\n                    value = \"self.frame.locals[\"+addr+\"]\";\n                }\n                else if (oplist.argsize == 2) {\n                    value = \"self.frame.locals[\"+addr+\"] & 0xffff\";\n                }\n                else {\n                    value = \"self.frame.locals[\"+addr+\"] & 0xff\";\n                }\n                holdvar = alloc_holdvar(context, true);\n                context.code.push(holdvar+\"=(\"+value+\");\");\n                context.offloc[addr] = holdvar;\n                context.offlocdirty[addr] = false;\n                operands[ix] = holdvar;\n                continue;\n            }\n\n            switch (mode) {\n            case 15: /* main memory RAM, four-byte address */\n                addr = Mem4(cp) + ramstart;\n                cp += 4;\n                break; \n\n            case 14: /* main memory RAM, two-byte address */\n                addr = Mem2(cp) + ramstart;\n                cp += 2;\n                break; \n\n            case 13: /* main memory RAM, one-byte address */\n                addr = Mem1(cp) + ramstart;\n                cp++;\n                break; \n        \n            case 7: /* main memory, four-byte address */\n                addr = Mem4(cp);\n                cp += 4;\n                break;\n\n            case 6: /* main memory, two-byte address */\n                addr = Mem2(cp);\n                cp += 2;\n                break;\n\n            case 5: /* main memory, one-byte address */\n                addr = Mem1(cp);\n                cp++;\n                break;\n\n            default:\n                fatal_error(\"Unknown addressing mode in load operand.\");\n            }\n\n            /* The main-memory cases. */\n            if (oplist.argsize == 4) {\n                value = \"self.Mem4(\"+addr+\")\";\n            }\n            else if (oplist.argsize == 2) {\n                value = \"self.Mem2(\"+addr+\")\";\n            }\n            else {\n                value = \"self.Mem1(\"+addr+\")\";\n            }\n            operands[ix] = value;\n            continue;\n\n        }\n        else if (optype == \"S\") {\n            switch (mode) {\n\n            case 8: /* push on stack */\n                /* Not on the actual stack, yet, but on the offstack. */\n                holdvar = alloc_holdvar(context, true);\n                context.offstack.push(holdvar);\n                operands[ix] = holdvar+\"=(\";\n                continue;\n                \n            case 0: /* discard value */\n                operands[ix] = \"(\";\n                continue;\n            }\n                \n            if (mode >= 9 && mode <= 11) {\n                if (mode == 9) {\n                    addr = Mem1(cp);\n                    cp++;\n                }\n                else if (mode == 10) {\n                    addr = Mem2(cp);\n                    cp += 2;\n                }\n                else if (mode == 11) {\n                    addr = Mem4(cp);\n                    cp += 4;\n                }\n                \n                /* The local-variable cases. */\n                if (oplist.argsize == 4) {\n                    holdvar = alloc_holdvar(context, true);\n                    store_offloc_value(context, addr, holdvar, false);\n                    operands[ix] = holdvar+\"=(\";\n                }\n                else if (oplist.argsize == 2) {\n                    store_offloc_value(context, addr, undefined);\n                    operands[ix] = \"self.frame.locals[\"+addr+\"]=(0xffff &\";\n                }\n                else {\n                    store_offloc_value(context, addr, undefined);\n                    operands[ix] = \"self.frame.locals[\"+addr+\"]=(0xff &\";\n                }\n                continue;\n            }\n\n            switch (mode) {\n            case 15: /* main memory RAM, four-byte address */\n                addr = Mem4(cp) + ramstart;\n                cp += 4;\n                break; \n\n            case 14: /* main memory RAM, two-byte address */\n                addr = Mem2(cp) + ramstart;\n                cp += 2;\n                break; \n\n            case 13: /* main memory RAM, one-byte address */\n                addr = Mem1(cp) + ramstart;\n                cp++;\n                break; \n        \n            case 7: /* main memory, four-byte address */\n                addr = Mem4(cp);\n                cp += 4;\n                break;\n\n            case 6: /* main memory, two-byte address */\n                addr = Mem2(cp);\n                cp += 2;\n                break;\n\n            case 5: /* main memory, one-byte address */\n                addr = Mem1(cp);\n                cp++;\n                break;\n\n            default:\n                fatal_error(\"Unknown addressing mode in store operand.\");\n            }\n\n            /* The main-memory cases. */\n            if (oplist.argsize == 4) {\n                value = \"self.MemW4(\"+addr+\",\";\n            }\n            else if (oplist.argsize == 2) {\n                value = \"self.MemW2(\"+addr+\",\";\n            }\n            else {\n                value = \"self.MemW1(\"+addr+\",\";\n            }\n            operands[ix] = value;\n            continue;\n        }\n        else if (optype == \"F\") {\n            var funcop = operands.func_store;\n\n            switch (mode) {\n\n            case 8: /* push on stack */\n                funcop.mode = 8;\n                funcop.argsize = oplist.argsize;\n                operands[ix] = funcop;\n                continue;\n                \n            case 0: /* discard value */\n                funcop.mode = 0;\n                funcop.argsize = oplist.argsize;\n                operands[ix] = funcop;\n                continue;\n            }\n                \n            if (mode >= 9 && mode <= 11) {\n                if (mode == 9) {\n                    addr = Mem1(cp);\n                    cp++;\n                }\n                else if (mode == 10) {\n                    addr = Mem2(cp);\n                    cp += 2;\n                }\n                else if (mode == 11) {\n                    addr = Mem4(cp);\n                    cp += 4;\n                }\n                \n                /* The local-variable cases. */\n                funcop.mode = 11;\n                funcop.addr = addr;\n                funcop.argsize = oplist.argsize;\n                operands[ix] = funcop;\n                continue;\n            }\n\n            switch (mode) {\n            case 15: /* main memory RAM, four-byte address */\n                addr = Mem4(cp) + ramstart;\n                cp += 4;\n                break; \n\n            case 14: /* main memory RAM, two-byte address */\n                addr = Mem2(cp) + ramstart;\n                cp += 2;\n                break; \n\n            case 13: /* main memory RAM, one-byte address */\n                addr = Mem1(cp) + ramstart;\n                cp++;\n                break; \n        \n            case 7: /* main memory, four-byte address */\n                addr = Mem4(cp);\n                cp += 4;\n                break;\n\n            case 6: /* main memory, two-byte address */\n                addr = Mem2(cp);\n                cp += 2;\n                break;\n\n            case 5: /* main memory, one-byte address */\n                addr = Mem1(cp);\n                cp++;\n                break;\n\n            default:\n                fatal_error(\"Unknown addressing mode in store operand.\");\n            }\n\n            /* The main-memory cases. */\n            funcop.mode = 15;\n            funcop.addr = addr;\n            funcop.argsize = oplist.argsize;\n            operands[ix] = funcop;\n            continue;\n        }\n        else if (optype == \"C\") {\n            switch (mode) {\n\n            case 8: /* push on stack */\n                operands[ix] = \"3,0\";\n                continue;\n                \n            case 0: /* discard value */\n                operands[ix] = \"0,0\";\n                continue;\n            }\n                \n            if (mode >= 9 && mode <= 11) {\n                if (mode == 9) {\n                    addr = Mem1(cp);\n                    cp++;\n                }\n                else if (mode == 10) {\n                    addr = Mem2(cp);\n                    cp += 2;\n                }\n                else if (mode == 11) {\n                    addr = Mem4(cp);\n                    cp += 4;\n                }\n                \n                /* The local-variable cases. */\n                operands[ix] = \"2,\"+addr;\n                continue;\n            }\n\n            switch (mode) {\n            case 15: /* main memory RAM, four-byte address */\n                addr = Mem4(cp) + ramstart;\n                cp += 4;\n                break; \n\n            case 14: /* main memory RAM, two-byte address */\n                addr = Mem2(cp) + ramstart;\n                cp += 2;\n                break; \n\n            case 13: /* main memory RAM, one-byte address */\n                addr = Mem1(cp) + ramstart;\n                cp++;\n                break; \n        \n            case 7: /* main memory, four-byte address */\n                addr = Mem4(cp);\n                cp += 4;\n                break;\n\n            case 6: /* main memory, two-byte address */\n                addr = Mem2(cp);\n                cp += 2;\n                break;\n\n            case 5: /* main memory, one-byte address */\n                addr = Mem1(cp);\n                cp++;\n                break;\n\n            default:\n                fatal_error(\"Unknown addressing mode in store operand.\");\n            }\n\n            /* The main-memory cases. */\n            operands[ix] = \"1,\"+addr;\n            continue;\n        }\n        else {\n            fatal_error(\"Unknown operand type.\", optype);\n        }\n    }\n\n    return cp;\n}\n\n/* Construct a VMFunc for the function at the given address.\n*/\nfunction compile_func(funcaddr) {\n    var addr = funcaddr;\n\n    /* Check the Glulx type identifier byte. */\n    var functype = Mem1(addr);\n    if (functype != 0xC0 && functype != 0xC1) {\n        if (functype >= 0xC0 && functype <= 0xDF)\n            fatal_error(\"Call to unknown type of function.\", addr);\n        else\n            fatal_error(\"Call to non-function.\", addr);\n    }\n    addr++;\n    \n    /* Go through the function's locals-format list, and construct a\n       slightly nicer description of the locals. (An array of [size, num].) */\n    var localsformat = [];\n    var rawstart = addr;\n    var ix = 0;\n    while (1) {\n        /* Grab two bytes from the locals-format list. These are \n           unsigned (0..255 range). */\n        var loctype = Mem1(addr);\n        addr++;\n        var locnum = Mem1(addr);\n        addr++;\n\n        if (loctype == 0) {\n            break;\n        }\n        if (loctype != 1 && loctype != 2 && loctype != 4) {\n            fatal_error(\"Invalid local variable size in function header.\", loctype);\n        }\n        \n        localsformat.push({ size:loctype, count:locnum });\n    }\n\n    /* We also copy the raw format list. This will be handy later on,\n       when we need to serialize the stack. Note that it might be\n       padded with extra zeroes to a four-byte boundary. */\n    var rawformat = memmap.slice(rawstart, addr);\n    while (rawformat.length % 4)\n        rawformat.push(0);\n\n    return new VMFunc(funcaddr, addr, localsformat, rawformat);\n}\n\n/* Construct a path for the given function starting at the given address.\n\n   A path is a sequence of JS statements (eval'ed into a JS function)\n   which implement the opcodes at that address. We compile as many\n   opcodes as we efficiently can; compilation stops at the first\n   call, return, unconditional branch, or so on. We also stop compilation\n   if we reach an opcode which we know to be the *destination* of a\n   branch. (The idea is that we're going to have to create a path\n   starting there anyhow -- you can't jump into the middle of a JS\n   function. So we avoid compiling those opcodes twice.)\n\n   The path function returns the special value VMStopped on @quit or \n   if the top-level function exits. This will stop VM execution. \n   (Note that glk_exit() doesn't cause this -- it technically leaves\n   the VM paused forever rather than stopped.)\n\n   After executing a path, the VM state (pc, stack, etc) are set\n   appropriately for the end of the path. However, we don't maintain\n   that state opcode by opcode *inside* the path.\n*/\nfunction compile_path(vmfunc, startaddr, startiosys) {\n    var cp = startaddr;\n    var opcode;\n    var opcodecp;\n    var key;\n\n    /* This will hold all sorts of useful information about the code\n       sequence we're compiling. */\n    var context = {\n        vmfunc: vmfunc,\n\n        cp: null, /* Will be filled in as we go */\n        prevcp: null, /* ditto */\n\n        /* The iosysmode, as of cp. This is always a literal value;\n           if it becomes unknown-at-compile-time, we stop compiling. */\n        curiosys: startiosys,\n\n        /* List of code lines. */\n        code: [],\n\n        /* Dict indicating which _hold variables are in use. A true value\n           means that the variable is used in this opcode; false means\n           it is not, but has been used before in the path; an integer\n           means the variable is in use on offstack or offloc (N times). */\n        holduse: {},\n\n        /* Dict indicating which other ad-hoc variables are in use. */\n        varsused: {},\n\n        /* A stack of quoted values (constants and _hold variables)\n           which should be on the value stack, but temporarily aren't. */\n        offstack: [],\n\n        /* An array of quoted values (constants and _hold variables)\n           which should be in the locals array, but temporarily aren't. */\n        offloc: [],\n\n        /* Indicates whether the values in offloc need to be written back\n           to the locals array. (True means yes; false means it's just a\n           a cached value and doesn't need to be written.) Same indices as \n           offloc. */\n        offlocdirty: [],\n\n        /* Set true when no more opcodes should be compiled for this path. */\n        path_ends: false\n    };\n\n    /* This will hold the operand information for each opcode we compile.\n       We'll recycle the object rather than allocating a new one each \n       time. */\n    var operands = {};\n    /* Another object to recycle. */\n    operands.func_store = {};\n\n    context.code.push(\"\"); /* May be replaced by the _hold var declarations. */\n\n    while (!context.path_ends) {\n\n        /* Stash the current opcode's address, in case the interpreter needs to\n           serialize the VM state out-of-band. */\n        context.prevcp = cp;\n\n        /* Fetch the opcode number. */\n        opcodecp = cp;\n        opcode = Mem1(cp);\n        if (opcode === undefined) \n            fatal_error(\"Tried to compile nonexistent address\", cp);\n        cp++;\n\n        if (opcode & 0x80) {\n            /* More than one-byte opcode. */\n            if (opcode & 0x40) {\n                /* Four-byte opcode */\n                opcode &= 0x3F;\n                opcode = (opcode * 0x100) | Mem1(cp);\n                cp++;\n                opcode = (opcode * 0x100) | Mem1(cp);\n                cp++;\n                opcode = (opcode * 0x100) | Mem1(cp);\n                cp++;\n            }\n            else {\n                /* Two-byte opcode */\n                opcode &= 0x7F;\n                opcode = (opcode * 0x100) | Mem1(cp);\n                cp++;\n            }\n        }\n\n        /* Now we have an opcode number. */\n        ;;;context.code.push(\"// \" + opcodecp.toString(16) + \": opcode \" + opcode.toString(16)); //debug\n\n        /* Fetch the structure that describes how the operands for this\n           opcode are arranged. This is a pointer to an immutable, \n           static object. */\n        var oplist = operandlist_table[opcode];\n        if (!oplist)\n            fatal_error(\"Encountered unknown opcode.\", opcode);\n        cp = parse_operands(context, cp, oplist, operands);\n        /* Some ophandlers need the next PC -- the address of the next\n           instruction. That's cp right now. */\n        context.cp = cp; \n\n        var ophandler = opcode_table[opcode];\n        if (!ophandler)\n            fatal_error(\"Encountered unhandled opcode.\", opcode);\n        ophandler(context, operands);\n\n        /* Any _hold variables which were used in this opcode (only)\n           are no longer used. Variables in the offstate are immune\n           to this. */\n        for (key in context.holduse) {\n            if (context.holduse[key] === true)\n                context.holduse[key] = false;\n        }\n\n        ;;;if (context.offstack.length) context.code.push(\"// offstack: \" + context.offstack.join(\",\")); //debug\n        ;;;if (context.offloc.length) context.code.push(\"// offloc: \" + context.offloc.join(\",\") + \"; dirty: \" + context.offlocdirty.join(\",\")); //debug\n        //context.code.push(\"// holduse: \" + qobjdump(context.holduse));\n\n        /* Check if any other compilation starts, or will start, at this\n           address. If so, no need to compile further. */\n        if (vmfunc.pathaddrs[cp] && !context.path_ends) {\n            ;;;context.code.push(\"// reached jump-in point\"); //debug\n            context.code.push(\"self.pc=\"+cp+\";\");\n            oputil_unload_offstate(context);\n            context.code.push(\"return;\");\n            context.path_ends = true;\n        }\n    }\n\n    if (context.offstack.length) \n        fatal_error(\"Path compilation ended with nonempty offstack.\", context.offstack.length);\n    if (context.offloc.length) \n        fatal_error(\"Path compilation ended with nonempty offloc.\", context.offloc.length);\n\n    /* Declare all the _hold variables, and other variables, that we need. */\n    {\n        var ls = [];\n        for (key in context.holduse)\n            ls.push(key);\n        for (key in context.varsused)\n            ls.push(key);\n        if (ls.length)\n            context.code[0] = \"var \" + ls.join(\",\") + \";\";\n    }\n\n    //qlog(\"### code at \" + startaddr.toString(16) + \":\\n\" + context.code.join(\"\\n\"));\n    return make_code(context.code.join(\"\\n\"), \"_func_path_\"+startaddr);\n}\n\n/* Prepare for execution of a new function. The argcount is the number\n   of arguments passed in; the arguments themselves are in the \n   tempcallargs array. (We don't rely on tempcallargs.length, as that\n   can be greater than argcount.)\n\n   This puts a new call frame onto the stack, and fills in its locals\n   (or valstack, for a 0xC0 function.) The pc is set to the function's\n   starting address.\n*/\nfunction enter_function(addr, argcount) {\n    var ix;\n\n    total_function_calls++; //###stats\n\n    /* If this address has been registered for an accelerated function,\n       dispatch it. */\n    var accelfunc = accel_address_map[addr];\n    if (accelfunc !== undefined) {\n        accel_function_calls++; //###stats\n        var val = accelfunc(argcount, self.tempcallargs);\n        pop_callstub(val);\n        return;\n    }\n\n    var vmfunc = vmfunc_table[addr];\n    if (vmfunc === undefined) {\n        vmfunc = compile_func(addr);\n        if (addr < ramstart)\n            vmfunc_table[addr] = vmfunc;\n    }\n\n    self.pc = vmfunc.startpc;\n\n    var newframe = new StackFrame(vmfunc);\n    newframe.depth = stack.length;\n    if (stack.length == 0)\n        newframe.framestart = 0;\n    else\n        newframe.framestart = self.frame.framestart + self.frame.framelen + 4*self.frame.valstack.length;\n    stack.push(newframe);\n    self.frame = newframe;\n\n    if (vmfunc.functype == 0xC0) {\n        /* Push the function arguments on the stack. The locals have already\n           been zeroed. */\n        for (ix=argcount-1; ix >= 0; ix--)\n            self.frame.valstack.push(self.tempcallargs[ix]);\n        self.frame.valstack.push(argcount);\n    }\n    else {\n        /* Copy in function arguments. This is a bit gross, since we have to\n           follow the locals format. If there are fewer arguments than locals,\n           that's fine -- we've already zeroed out this space. If there are\n           more arguments than locals, the extras are silently dropped. */\n        for (ix=0; ix<argcount; ix++) {\n            var form = vmfunc.localsindex[ix];\n            if (form === undefined)\n                break;\n            if (form.size == 4)\n                self.frame.locals[form.pos] = self.tempcallargs[ix];\n            else if (form.size == 2)\n                self.frame.locals[form.pos] = self.tempcallargs[ix] & 0xFFFF;\n            else if (form.size == 1)\n                self.frame.locals[form.pos] = self.tempcallargs[ix] & 0xFF;\n        }\n    }\n\n    //qlog(\"### framestart \" + self.frame.framestart + \", filled-in locals \" + qobjdump(self.frame.locals) + \", valstack \" + qobjdump(self.frame.valstack));\n}\nself.enter_function = enter_function;\n\n/* Pop the current call frame off the stack. This is very simple.\n   Returns true if the top-level stack frame is popped (thus stopping\n   the VM).\n*/\nfunction leave_function() {\n    var olddepth = self.frame.depth;\n\n    stack.pop();\n    if (stack.length == 0) {\n        self.frame = null;\n        return true;\n    }\n    self.frame = stack[stack.length-1];\n\n    if (self.frame.depth != olddepth-1)\n        fatal_error(\"Stack inconsistent after function exit.\");\n}\nself.leave_function = leave_function;\n\n/* Pop the stack down until it has length val. Used in the throw opcode. */\nfunction pop_stack_to(val) {\n    /* Down to the correct frame, if necessary. */\n    while (stack.length && stack[stack.length-1].framestart > val)\n        stack.pop();\n    if (stack.length == 0)\n        fatal_error(\"Stack evaporated during throw.\");\n    self.frame = stack[stack.length-1];\n\n    val -= (self.frame.framestart+self.frame.framelen);\n    if (val < 0)\n        fatal_error(\"Attempted to throw below the frame value stack.\");\n    if (val & 3)\n        fatal_error(\"Attempted to throw to an unaligned address.\");\n    val >>>= 2;\n    if (val > self.frame.valstack.length)\n        fatal_error(\"Attempted to throw beyond the frame value stack.\");\n    /* Down to the correct position in the valstack. */\n    self.frame.valstack.length = val;\n}\nself.pop_stack_to = pop_stack_to;\n\n/* Pop a callstub off the stack, and store a value at the appropriate \n   location. (When returning from a function, for example, the value is\n   the function return value, and it gets stored wherever the function\n   call wants it. The pc winds up pointing after the function call\n   opcode.)\n*/\nfunction pop_callstub(val) {\n    var destaddr, desttype;\n\n    //qlog(\"### return value \" + val.toString(16));\n    if (isNaN(val))\n        fatal_error(\"Function returned undefined value.\");\n\n    /* This somewhat clumsy way of popping off the last four elements of  the\n     * stack turns out to be significantly faster, which is great, because this\n     * function is extremely hot. */\n    var valstack = self.frame.valstack;\n    var vallen = valstack.length;\n    var framestart = valstack[vallen - 1];\n    if (framestart != self.frame.framestart) {\n        valstack.length -= 1;\n        fatal_error(\"Call stub frameptr (\" + framestart + \") \" +\n            \"does not match frame (\" + self.frame.framestart + \")\");\n    }\n    self.pc = valstack[vallen - 2];\n    destaddr = valstack[vallen - 3];\n    desttype = valstack[vallen - 4];\n    valstack.length -= 4;\n\n    switch (desttype) {\n    case 0:\n        return;\n    case 1:\n        MemW4(destaddr, val);\n        return;\n    case 2:\n        self.frame.locals[destaddr] = val;\n        return;\n    case 3:\n        self.frame.valstack.push(val);\n        return;\n\n    case 0x11:\n        fatal_error(\"String-terminator call stub at end of function call.\");\n        return;\n\n    case 0x10:\n        /* This call stub was pushed during a string-decoding operation!\n           We have to restart it. (Note that the return value is discarded.) */\n        stream_string(0, self.pc, 0xE1, destaddr); \n        return;\n\n    case 0x12:\n        /* This call stub was pushed during a number-printing operation.\n           Restart that. (Return value discarded.) */\n        stream_num(0, self.pc, true, destaddr);\n        return;\n\n    case 0x13:\n        /* This call stub was pushed during a C-string printing operation.\n           We have to restart it. (Note that the return value is discarded.) */\n        stream_string(0, self.pc, 0xE0, destaddr); \n        return;\n\n    case 0x14:\n        /* This call stub was pushed during a Unicode printing operation.\n           We have to restart it. (Note that the return value is discarded.) */\n        stream_string(0, self.pc, 0xE2, destaddr); \n        return;\n\n    default:\n        fatal_error(\"Unrecognized desttype in callstub.\", desttype);\n    }\n}\nself.pop_callstub = pop_callstub;\n\n/* Do the value-storing part of an already-popped call stub. (This is a\n   subset of the pop_callstub() work.) \n*/\nfunction store_operand(desttype, destaddr, val) {\n    switch (desttype) {\n    case 0:\n        return;\n    case 1:\n        MemW4(destaddr, val);\n        return;\n    case 2:\n        self.frame.locals[destaddr] = val;\n        return;\n    case 3:\n        self.frame.valstack.push(val);\n        return;\n    default:\n        fatal_error(\"Unrecognized desttype in callstub.\", desttype);\n    }\n}\nself.store_operand = store_operand;\n\n/* Do the value-storing work for a funcop. A null funcop is equivalent\n   to mode 0 \"discard\".\n*/\nfunction store_operand_by_funcop(funcop, val) {\n    if (!funcop)\n        return;\n\n    switch (funcop.mode) {\n\n    case 8: /* push on stack */\n        self.frame.valstack.push(val);\n        return;\n\n    case 0: /* discard value */\n        return;\n\n    case 11: /* The local-variable cases. */\n        if (funcop.argsize == 4) {\n            self.frame.locals[funcop.addr] = (val);\n        }\n        else if (funcop.argsize == 2) {\n            self.frame.locals[funcop.addr] = (0xffff & val);\n        }\n        else {\n            self.frame.locals[funcop.addr] = (0xff & val);\n        }\n        return;\n\n    case 15: /* The main-memory cases. */\n        if (funcop.argsize == 4) {\n            MemW4(funcop.addr, val);\n        }\n        else if (funcop.argsize == 2) {\n            MemW2(funcop.addr, val);\n        }\n        else {\n            MemW1(funcop.addr, val);\n        }\n        return;\n\n    default:\n        fatal_error(\"Unknown addressing mode in store func by operand.\");\n\n    }\n}\n\n/* Backtrack through the current opcode (at prevpc), and figure out whether\n   its input arguments are on the stack or not. This will be important when\n   setting up the saved VM state for restarting its opcode.\n   \n   Returns an object { selop, argsop, resop }.\n */\nfunction parse_partial_operand()\n{\n    var addr = self.prevpc;\n    \n    /* Fetch the opcode number. */\n    var opcode = Mem1(addr);\n    addr++;\n    if (opcode & 0x80) {\n        /* More than one-byte opcode. */\n        if (opcode & 0x40) {\n            /* Four-byte opcode */\n            opcode &= 0x3F;\n            opcode = (opcode << 8) | Mem1(addr);\n            addr++;\n            opcode = (opcode << 8) | Mem1(addr);\n            addr++;\n            opcode = (opcode << 8) | Mem1(addr);\n            addr++;\n        }\n        else {\n            /* Two-byte opcode */\n            opcode &= 0x7F;\n            opcode = (opcode << 8) | Mem1(addr);\n            addr++;\n        }\n    }\n    \n    if (opcode != 0x130) { /* op_glk */\n        qlog(\"parse_partial_operand: parsed wrong opcode: \" + opcode);\n        return null;\n    }\n    \n    /* @glk has operands LLS. */\n    return {\n        selop  : Mem1(addr) & 0x0F,\n        argsop : (Mem1(addr) >> 4) & 0x0F,\n        resop  : Mem1(addr+1) & 0x0F\n    };\n}\n\n/* Set the VM's random-number function to either a \"true\" RNG (Javascript's\n   Math.random), or a seeded deterministic RNG.\n*/\nfunction set_random(val) {\n    if (val == 0) {\n        self.random_func = Math.random;\n    }\n    else {\n        srand_set_seed(val);\n        self.random_func = srand_get_random;\n    }\n}\nself.set_random = set_random;\n\n/* Here is a pretty standard random-number generator and seed function.\n   It is used for the deterministic mode of the Glulx RNG. (In the\n   normal, non-deterministic mode, we rely on Math.random() -- hopefully\n   that pulls some nice juicy entropy from the OS.)\n*/\nvar srand_table = undefined; /* Array[0..54] */\nvar srand_index1, srand_index2;\n\nfunction srand_set_seed(seed) {\n    var i, ii, k, val, loop;\n\n    if (srand_table === undefined)\n        srand_table = Array(55);\n\n    srand_table[54] = seed;\n    srand_index1 = 0;\n    srand_index2 = 31;\n    \n    k = 1;\n\n    for (i = 0; i < 55; i++) {\n        ii = (21 * i) % 55;\n        srand_table[ii] = k;\n        k = (seed - k) >>>0;\n        seed = srand_table[ii];\n    }\n    for (loop = 0; loop < 4; loop++) {\n        for (i = 0; i < 55; i++) {\n            val = srand_table[i] - srand_table[ (1 + i + 30) % 55];\n            srand_table[i] = val >>>0;\n        }\n    }\n}\n\nfunction srand_get_random() {\n    srand_index1 = (srand_index1 + 1) % 55;\n    srand_index2 = (srand_index2 + 1) % 55;\n    srand_table[srand_index1] = (srand_table[srand_index1] - srand_table[srand_index2]) >>>0;\n    return srand_table[srand_index1] / 0x100000000;\n}\n\n/* accel_funcnum_map maps VM addresses to the index number of the (native)\n   functions used to accelerate them. accel_address_map maps VM addresses\n   directly to the native functions. (So accel_address_map[x] ==\n   accel_func_map[accel_funcnum_map[x]].) These are also referenced from\n   self. */\nvar accel_address_map = {};\nvar accel_funcnum_map = {};\nself.accel_address_map = accel_address_map;\nself.accel_funcnum_map = accel_funcnum_map;\n\n/* A list of the nine parameter fields used by the accelerated functions. */\nvar accel_params = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ];\nself.accel_params = accel_params;\n\nfunction accel_print_error(msg) {\n    if (self.iosysmode == 2) {\n        self.Glk.glk_put_jstring(msg);\n    };\n    /* If we're in iosys_Filter, there's no way to validly call the filter\n       function, and the Glk printing path might throw a fatal error.\n       Just give up. */\n}\n    \n/* The code for all the functions we can accelerate. Unrecognized indexes,\n   including zero, map to undefined.\n\n   Remember that there may be fewer arguments than expected, and any beyond\n   argc should be taken as zero.\n*/\nvar accel_func_map = {\n    1: function func_1_z__region(argc, argv) {\n        if (argc < 1)\n            return 0;\n\n        var addr = argv[0];\n        if (addr < 36)\n            return 0;\n        if (addr >= self.endmem)\n            return 0;\n\n        var tb = Mem1(addr);\n        if (tb >= 0xE0) {\n            return 3;\n        }\n        if (tb >= 0xC0) {\n            return 2;\n        }\n        if (tb >= 0x70 && tb <= 0x7F && addr >= ramstart) {\n            return 1;\n        }\n        return 0;\n    },\n\n    2: function func_2_cp__tab(argc, argv) {\n        var obj = ((argc > 0) ? argv[0] : 0);\n        var id = ((argc > 1) ? argv[1] : 0);\n\n        /* func_1_z__region(obj) */\n        if (accel_func_map[1](argc, argv) != 1) { \n            accel_print_error(\"\\n[** Programming error: tried to find the \\\".\\\" of (something) **]\\n\");\n            return 0;\n        }\n\n        var otab = Mem4(obj + 16);\n        if (!otab)\n            return 0;\n\n        var max = Mem4(otab);\n        otab += 4;\n        /* @binarysearch id 2 otab 10 max 0 0 res; */\n        return binary_search(id, 2, otab, 10, max, 0, 0);\n    },\n\n    3: function func_3_ra__pr(argc, argv) {\n        var obj = ((argc > 0) ? argv[0] : 0);\n        var id = ((argc > 1) ? argv[1] : 0);\n\n        var prop = accel_helper_get_prop(obj, id);\n        if (prop == 0)\n            return 0;\n\n        return Mem4(prop + 4);\n    },\n\n    4: function func_4_rl__pr(argc, argv) {\n        var obj = ((argc > 0) ? argv[0] : 0);\n        var id = ((argc > 1) ? argv[1] : 0);\n\n        var prop = accel_helper_get_prop(obj, id);\n        if (prop == 0)\n            return 0;\n\n        return 4 * Mem2(prop + 2);\n    },\n\n    5: function func_5_oc__cl(argc, argv) {\n        var zr, prop, inlist, inlistlen, jx;\n\n        var obj = ((argc > 0) ? argv[0] : 0);\n        var cla = ((argc > 1) ? argv[1] : 0);\n\n        /* func_1_z__region(obj) */\n        zr = accel_func_map[1](argc, argv);\n        if (zr == 3)\n            return (cla == accel_params[5]) ? 1 : 0;\n        if (zr == 2)\n            return (cla == accel_params[4]) ? 1 : 0;\n        if (zr != 1)\n            return 0;\n    \n        if (cla == accel_params[2]) {\n            if (accel_helper_obj_in_class(obj))\n                return 1;\n            if (obj == accel_params[2])\n                return 1;\n            if (obj == accel_params[5])\n                return 1;\n            if (obj == accel_params[4])\n                return 1;\n            if (obj == accel_params[3])\n                return 1;\n            return 0;\n        }\n        if (cla == accel_params[3]) {\n            if (accel_helper_obj_in_class(obj))\n                return 0;\n            if (obj == accel_params[2])\n                return 0;\n            if (obj == accel_params[5])\n                return 0;\n            if (obj == accel_params[4])\n                return 0;\n            if (obj == accel_params[3])\n                return 0;\n            return 1;\n        }\n        if ((cla == accel_params[5]) || (cla == accel_params[4]))\n            return 0;\n    \n        if (!accel_helper_obj_in_class(cla)) {\n            accel_print_error(\"\\n[** Programming error: tried to apply 'ofclass' with non-class **]\\n\");\n            return 0;\n        }\n    \n        prop = accel_helper_get_prop(obj, 2);\n        if (prop == 0)\n           return 0;\n    \n        inlist = Mem4(prop + 4);\n        if (inlist == 0)\n           return 0;\n    \n        inlistlen = Mem2(prop + 2);\n        for (jx = 0; jx < inlistlen; jx++) {\n            if (Mem4(inlist + (4 * jx)) == cla)\n                return 1;\n        }\n        return 0;\n    },\n\n    6: function func_6_rv__pr(argc, argv) {\n        var id = ((argc > 1) ? argv[1] : 0);\n        var addr;\n\n        /* func_3_ra__pr */\n        addr = accel_func_map[3](argc, argv);\n        \n        if (addr == 0) {\n            /* id > 0 && id < indiv_prop_start */\n            if ((id > 0) && (id < accel_params[1])) {\n                /* Mem4(cpv__start + 4*id) */\n                return Mem4(accel_params[8] + (4 * id));\n            }\n\n            accel_print_error(\"\\n[** Programming error: tried to read (something) **]\\n\");\n            return 0;\n        }\n\n        return Mem4(addr);\n    },\n\n    7: function func_7_op__pr(argc, argv) {\n        var obj = ((argc > 0) ? argv[0] : 0);\n        var id = ((argc > 1) ? argv[1] : 0);\n\n        var indiv_prop_start = accel_params[1];\n\n        /* func_1_z__region(obj) */\n        var zr = accel_func_map[1](argc, argv);\n        if (zr == 3) {\n            /* print is INDIV_PROP_START+6 */\n            if (id == indiv_prop_start+6)\n                return 1;\n            /* print_to_array is INDIV_PROP_START+7 */\n            if (id == indiv_prop_start+7)\n                return 1;\n            return 0;\n        }\n        if (zr == 2) {\n            /* call is INDIV_PROP_START+5 */\n            return ((id == indiv_prop_start+5) ? 1 : 0);\n        }\n        if (zr != 1)\n            return 0;\n    \n        if ((id >= indiv_prop_start) && (id < indiv_prop_start+8)) {\n            if (accel_helper_obj_in_class(obj))\n                return 1;\n        }\n    \n        /* func_3_ra__pr */\n        return ((accel_func_map[3](argc, argv)) ? 1 : 0);\n    },\n\n    8: function func_8_cp__tab(argc, argv) {\n        var obj = ((argc > 0) ? argv[0] : 0);\n        var id = ((argc > 1) ? argv[1] : 0);\n\n        /* func_1_z__region(obj) */\n        if (accel_func_map[1](argc, argv) != 1) { \n            accel_print_error(\"\\n[** Programming error: tried to find the \\\".\\\" of (something) **]\\n\");\n            return 0;\n        }\n\n        /*  otab = Mem4(obj + 4*(3+(int)(num_attr_bytes/4))); */\n        var otab = Mem4(obj + 4*(3+(accel_params[7]>>2)));\n        if (!otab)\n            return 0;\n\n        var max = Mem4(otab);\n        otab += 4;\n        /* @binarysearch id 2 otab 10 max 0 0 res; */\n        return binary_search(id, 2, otab, 10, max, 0, 0);\n    },\n\n    9: function func_9_ra__pr(argc, argv) {\n        var obj = ((argc > 0) ? argv[0] : 0);\n        var id = ((argc > 1) ? argv[1] : 0);\n\n        var prop = accel_helper_get_prop_new(obj, id);\n        if (prop == 0)\n            return 0;\n\n        return Mem4(prop + 4);\n    },\n\n    10: function func_10_rl__pr(argc, argv) {\n        var obj = ((argc > 0) ? argv[0] : 0);\n        var id = ((argc > 1) ? argv[1] : 0);\n\n        var prop = accel_helper_get_prop_new(obj, id);\n        if (prop == 0)\n            return 0;\n\n        return 4 * Mem2(prop + 2);\n    },\n\n    11: function func_11_oc__cl(argc, argv) {\n        var zr, prop, inlist, inlistlen, jx;\n\n        var obj = ((argc > 0) ? argv[0] : 0);\n        var cla = ((argc > 1) ? argv[1] : 0);\n\n        /* func_1_z__region(obj) */\n        zr = accel_func_map[1](argc, argv);\n        if (zr == 3)\n            return (cla == accel_params[5]) ? 1 : 0;\n        if (zr == 2)\n            return (cla == accel_params[4]) ? 1 : 0;\n        if (zr != 1)\n            return 0;\n    \n        if (cla == accel_params[2]) {\n            if (accel_helper_obj_in_class(obj))\n                return 1;\n            if (obj == accel_params[2])\n                return 1;\n            if (obj == accel_params[5])\n                return 1;\n            if (obj == accel_params[4])\n                return 1;\n            if (obj == accel_params[3])\n                return 1;\n            return 0;\n        }\n        if (cla == accel_params[3]) {\n            if (accel_helper_obj_in_class(obj))\n                return 0;\n            if (obj == accel_params[2])\n                return 0;\n            if (obj == accel_params[5])\n                return 0;\n            if (obj == accel_params[4])\n                return 0;\n            if (obj == accel_params[3])\n                return 0;\n            return 1;\n        }\n        if ((cla == accel_params[5]) || (cla == accel_params[4]))\n            return 0;\n    \n        if (!accel_helper_obj_in_class(cla)) {\n            accel_print_error(\"\\n[** Programming error: tried to apply 'ofclass' with non-class **]\\n\");\n            return 0;\n        }\n    \n        prop = accel_helper_get_prop_new(obj, 2);\n        if (prop == 0)\n           return 0;\n    \n        inlist = Mem4(prop + 4);\n        if (inlist == 0)\n           return 0;\n    \n        inlistlen = Mem2(prop + 2);\n        for (jx = 0; jx < inlistlen; jx++) {\n            if (Mem4(inlist + (4 * jx)) == cla)\n                return 1;\n        }\n        return 0;\n    },\n\n    12: function func_12_rv__pr(argc, argv) {\n        var id = ((argc > 1) ? argv[1] : 0);\n        var addr;\n\n        /* func_9_ra__pr */\n        addr = accel_func_map[9](argc, argv);\n        \n        if (addr == 0) {\n            /* id > 0 && id < indiv_prop_start */\n            if ((id > 0) && (id < accel_params[1])) {\n                /* Mem4(cpv__start + 4*id) */\n                return Mem4(accel_params[8] + (4 * id));\n            }\n\n            accel_print_error(\"\\n[** Programming error: tried to read (something) **]\\n\");\n            return 0;\n        }\n\n        return Mem4(addr);\n    },\n\n    13: function func_13_op__pr(argc, argv) {\n        var obj = ((argc > 0) ? argv[0] : 0);\n        var id = ((argc > 1) ? argv[1] : 0);\n\n        var indiv_prop_start = accel_params[1];\n\n        /* func_1_z__region(obj) */\n        var zr = accel_func_map[1](argc, argv);\n        if (zr == 3) {\n            /* print is INDIV_PROP_START+6 */\n            if (id == indiv_prop_start+6)\n                return 1;\n            /* print_to_array is INDIV_PROP_START+7 */\n            if (id == indiv_prop_start+7)\n                return 1;\n            return 0;\n        }\n        if (zr == 2) {\n            /* call is INDIV_PROP_START+5 */\n            return ((id == indiv_prop_start+5) ? 1 : 0);\n        }\n        if (zr != 1)\n            return 0;\n    \n        if ((id >= indiv_prop_start) && (id < indiv_prop_start+8)) {\n            if (accel_helper_obj_in_class(obj))\n                return 1;\n        }\n    \n        /* func_9_ra__pr */\n        return ((accel_func_map[9](argc, argv)) ? 1 : 0);\n    }\n};\nself.accel_func_map = accel_func_map;\n\nvar accel_helper_temp_args = [ 0, 0 ];\n\nfunction accel_helper_obj_in_class(obj)\n{\n    /* This checks whether obj is contained in Class, not whether\n       it is a member of Class. */\n    /* (Mem4(obj + 13 + num_attr_bytes) == class_metaclass) */\n    return (Mem4(obj + 13 + accel_params[7]) == accel_params[2]);\n}\n\n/* Look up a property entry. */\nfunction accel_helper_get_prop(obj, id)\n{\n    var cla = 0;\n    var prop;\n\n    if (id & 0xFFFF0000) {\n        /* Mem4(classes_table+...) */\n        cla = Mem4(accel_params[0]+((id & 0xFFFF) * 4));\n        accel_helper_temp_args[0] = obj;\n        accel_helper_temp_args[1] = cla;\n        /* func_5_oc__cl */\n        if (accel_func_map[5](2, accel_helper_temp_args) == 0)\n            return 0;\n\n        id = id >> 16;\n        obj = cla;\n    }\n\n    accel_helper_temp_args[0] = obj;\n    accel_helper_temp_args[1] = id;\n    /* func_2_cp__tab */\n    prop = accel_func_map[2](2, accel_helper_temp_args);\n    if (prop == 0)\n        return 0;\n\n    if (accel_helper_obj_in_class(obj) && (cla == 0)) {\n        /* id < num_attr_bytes || id >= num_attr_bytes+8 */\n        if ((id < accel_params[1]) || (id >= accel_params[1]+8))\n            return 0;\n    }\n\n    /* Mem4(self) -- the global variable self */\n    if (Mem4(accel_params[6]) != obj) {\n        if (Mem1(prop + 9) & 1)\n            return 0;\n    }\n    return prop;\n}\n\n/* Look up a property entry. This is part of the newer set of accel\n   functions (8 through 13), which support increasing NUM_ATTR_BYTES.\n   It is identical to get_prop() except that it calls the new versions\n   of func_5 and func_2. */\nfunction accel_helper_get_prop_new(obj, id)\n{\n    var cla = 0;\n    var prop;\n\n    if (id & 0xFFFF0000) {\n        /* Mem4(classes_table+...) */\n        cla = Mem4(accel_params[0]+((id & 0xFFFF) * 4));\n        accel_helper_temp_args[0] = obj;\n        accel_helper_temp_args[1] = cla;\n        /* func_11_oc__cl */\n        if (accel_func_map[11](2, accel_helper_temp_args) == 0)\n            return 0;\n\n        id = id >> 16;\n        obj = cla;\n    }\n\n    accel_helper_temp_args[0] = obj;\n    accel_helper_temp_args[1] = id;\n    /* func_8_cp__tab */\n    prop = accel_func_map[8](2, accel_helper_temp_args);\n    if (prop == 0)\n        return 0;\n\n    if (accel_helper_obj_in_class(obj) && (cla == 0)) {\n        /* id < num_attr_bytes || id >= num_attr_bytes+8 */\n        if ((id < accel_params[1]) || (id >= accel_params[1]+8))\n            return 0;\n    }\n\n    /* Mem4(self) -- the global variable self */\n    if (Mem4(accel_params[6]) != obj) {\n        if (Mem1(prop + 9) & 1)\n            return 0;\n    }\n    return prop;\n}\n\n\n/* Set the current table address, and rebuild decoding tree. */\nfunction set_string_table(addr) {\n    if (self.stringtable == addr)\n        return;\n\n    /* Drop the existing cache and tree. */\n    decoding_tree = undefined;\n    vmstring_table = undefined;\n\n    /* Set the register. */\n    self.stringtable = addr;\n\n    if (self.stringtable == 0) {\n        return;\n    }\n\n    var textenv = vmtextenv_table[self.stringtable];\n    if (textenv === undefined) {\n        /* We will need a new VMTextEnv. */\n        /* If the table is entirely in ROM, we can build a decoding tree.\n           If not, leave it undefined in the VMTextEnv. */\n        var dectab = undefined;\n        var tablelen = Mem4(self.stringtable);\n        var rootaddr = Mem4(self.stringtable+8);\n        var cache_stringtable = (self.stringtable+tablelen <= ramstart);\n        if (cache_stringtable) {\n            //qlog(\"building decoding table at \" + self.stringtable.toString(16) + \", length \" + tablelen.toString(16));\n            var tmparray = Array(1);\n            //var pathstart = new Date().getTime(); //debug\n            build_decoding_tree(tmparray, rootaddr, 4 /*CACHEBITS*/, 0);\n            dectab = tmparray[0];\n            if (dectab === undefined)\n                fatal_error(\"Failed to create decoding tree.\");\n            //qlog(\"done building; time = \" + ((new Date().getTime())-pathstart) + \" ms\"); //debug\n        }\n\n        textenv = new VMTextEnv(self.stringtable, dectab);\n        vmtextenv_table[self.stringtable] = textenv;\n    }\n\n    decoding_tree = textenv.decoding_tree;\n    vmstring_table = textenv.vmstring_tables[self.iosysmode];\n}\nself.set_string_table = set_string_table;\n\n/* Set the VM iosys, and adjust the vmstring_table register appropriately. \n*/\nfunction set_iosys(mode, rock) {\n    switch (mode) {\n    case 0: /* null */\n        rock = 0;\n        break;\n    case 1: /* filter */\n        break;\n    case 2: /* glk */\n        rock = 0;\n        break;\n    default: /* pretend it's null */\n        mode = 0;\n        rock = 0;\n        break;\n    }\n\n    self.iosysmode = mode;\n    self.iosysrock = rock;\n\n    var textenv = vmtextenv_table[self.stringtable];\n    if (textenv === undefined)\n        vmstring_table = undefined;\n    else\n        vmstring_table = textenv.vmstring_tables[self.iosysmode];\n}\nself.set_iosys = set_iosys;\n\n/* The form of the decoding tree is a tree of arrays and leaf objects.\n   An array always has 16 entries (2^CACHESIZE). Every object, including\n   the array, has a \"type\" field corresponding to the Glulx node type.\n\n   The arrays have a peculiar structure (inherited from Glulxe). Each one\n   encapsulates a subtree of binary branch nodes, up to four nodes deep. This\n   lets you traverse the tree four levels at a time (using four input bits at\n   a time). The first input bit is the 1s place of the array index, and so \n   on.\n\n   Life gets complicated if we want to encode *fewer* than four levels. A\n   subtree with only one branch (and two leaves) must duplicate each leaf\n   four times: 0,1,0,1,... This is because the decoder will index using\n   four bits at a time, but the high bits will be undefined.\n\n   The initial argument is the array we're writing into. If this is the\n   top-level call, it will be a fake (length-one) array -- see above.\n*/\nfunction build_decoding_tree(cablist, nodeaddr, depth, mask) {\n    var ix, type, cab;\n    var depthbit;\n\n    type = Mem1(nodeaddr);\n\n    if (type == 0 && depth == 4) { /*CACHEBITS*/\n        /* Start a new array. */\n        cab = Array(16); /*CACHESIZE*/\n        cab.type = 0;\n        cab.depth = 4; /*CACHEBITS*/\n        cablist[mask] = cab;\n        build_decoding_tree(cab, nodeaddr, 0, 0);\n        return;\n    }\n\n    if (type == 0) {\n        var leftaddr  = Mem4(nodeaddr+1);\n        var rightaddr = Mem4(nodeaddr+5);\n        build_decoding_tree(cablist, leftaddr, depth+1, mask);\n        build_decoding_tree(cablist, rightaddr, depth+1, (mask | (1 << depth)));\n        return;\n    }\n\n    /* Leaf node. */\n    nodeaddr++;\n\n    cab = {};\n    cab.type = type;\n    cab.depth = depth;\n    switch (type) {\n    case 0x02: /* 8-bit character */\n        cab.value = Mem1(nodeaddr);\n        cab.cchar = CharToString(cab.value);\n        break;\n    case 0x04: /* Unicode character */\n        cab.value = Mem4(nodeaddr);\n        cab.cchar = CharToString(cab.value);\n        break;\n    case 0x03: /* C-style string */\n    case 0x05: /* C-style unicode string */\n        /* If the address is in ROM, we could read it, convert to a JS\n           string, and store it in the node. */\n        cab.addr = nodeaddr;\n        break;\n    case 0x08: /* indirect ref */\n    case 0x09: /* double-indirect ref */\n        cab.addr = Mem4(nodeaddr);\n        break;\n    case 0x0A: /* indirect ref with arguments */\n    case 0x0B: /* double-indirect ref with arguments */\n        cab.addr = nodeaddr;\n        break;\n    case 0x01: /* terminator */\n        break;\n    default:\n        fatal_error(\"Unknown node type in string table.\", type);\n    }\n\n    depthbit = (1 << depth);\n    for (ix = mask; ix < 16 /* CACHESIZE */; ix += depthbit) {\n        cablist[ix] = cab;\n    }\n}\n\n/* Print a (signed, decimal) integer. The incoming value is actually\n   unsigned, so we have to convert it (using the \"& 0xffffffff\" trick)\n   before stringifying it.\n\n   This is only called when the iosysmode is filter. However, we could\n   re-enter (with inmiddle true) with some other iosysmode, so we handle\n   all the cases.\n*/\nfunction stream_num(nextcp, value, inmiddle, charnum) {\n    var buf = (value & 0xffffffff).toString(10);\n\n    //qlog(\"### stream_num(\" + nextcp + \", \" + buf + \", \" + inmiddle + \", \" + charnum + \") iosys \" + self.iosysmode);\n\n    switch (self.iosysmode) {\n    case 2: /* glk */\n        if (charnum)\n            buf = buf.slice(charnum);\n        self.Glk.glk_put_jstring(buf, true);\n        break;\n\n    case 1: /* filter */\n        if (!inmiddle) {\n            // push_callstub(0x11, 0);\n            self.frame.valstack.push(0x11, 0, nextcp, self.frame.framestart);\n            inmiddle = true;\n        }\n        if (charnum < buf.length) {\n            var ch = buf.charCodeAt(charnum);\n            /* Note that value is unsigned here -- only unsigned values\n               go on the stack. */\n            // push_callstub(0x12, charnum+1);\n            self.frame.valstack.push(0x12, charnum+1, value, self.frame.framestart);\n            self.tempcallargs[0] = ch;\n            enter_function(self.iosysrock, 1);\n            return true;\n        }\n        break;\n\n    case 0: /* null */\n        break;\n    }\n\n    if (inmiddle) {\n        var desttype, destaddr;\n        /* String terminated. Carry out a pop_callstub_string(). */\n        if (self.frame.valstack.pop() != self.frame.framestart)\n            fatal_error(\"Call stub frameptr does not match frame.\");\n        self.pc = self.frame.valstack.pop();\n        destaddr = self.frame.valstack.pop();\n        desttype = self.frame.valstack.pop();\n        if (desttype != 0x11) \n            fatal_error(\"String-on-string call stub while printing number.\");\n    }\n}\nself.stream_num = stream_num;\n\n/* Look up a string, and print or execute it.\n\n   This returns true if a sub-function needs to be called. In this case,\n   the pc and stack are already set up, so the caller needs to return\n   to the main execution loop.\n\n   This returns false if execution can continue for the caller. This is the\n   simple case, where the caller began at the start of a string and the\n   whole thing got printed.\n*/\nfunction stream_string(nextcp, addr, inmiddle, bitnum) {\n    var substring = (inmiddle != 0);\n    var addrkey, strop, res;\n    var desttype, destaddr;\n\n    //qlog(\"### stream_string(\"+addr+\") from cp=\"+nextcp+\" $\"+nextcp.toString(16)+\" in iosys \"+self.iosysmode);\n\n    while (true) {\n        strop = undefined;\n        if (inmiddle == 0)\n            addrkey = addr;\n        else\n            addrkey = addr+\"/\"+inmiddle+\"/\"+bitnum;\n\n        if (vmstring_table !== undefined && addr < ramstart) {\n            strop = vmstring_table[addrkey];\n            if (strop === undefined) {\n                strop = compile_string(self.iosysmode, addr, inmiddle, bitnum);\n                vmstring_table[addrkey] = strop;\n                strings_compiled++; //###stats\n                strings_cached++; //###stats\n            }\n        }\n        else {\n            strop = compile_string(self.iosysmode, addr, inmiddle, bitnum);\n            strings_compiled++; //###stats\n        }\n\n        //qlog(\"### strop(\" + addrkey + (substring?\":[sub]\":\"\") + \"): \" + strop);\n    \n        if (!(strop instanceof Function)) {\n            /* We're being a little lax here. Printing the empty string\n               to an unset Glk stream is an error. We'll let it pass. */\n            if (strop.length != 0)\n                self.Glk.glk_put_jstring(strop);\n            if (!substring)\n                return false;\n        }\n        else {\n            res = strop(self, nextcp, substring);\n            if (res instanceof Array) {\n                /* Entered a substring */\n                substring = true;\n                addr = res[0];\n                inmiddle = res[1];\n                bitnum = res[2];\n                //qlog(\"### push to addr=\"+addr+\"/\"+inmiddle+\"/\"+bitnum);\n                continue;\n            }\n            if (res) {\n                /* Entered a function. The pc is set. */\n                return true;\n            }\n            /* Else, string terminated. */\n        }\n        \n        /* String terminated. Carry out a pop_callstub_string(). */\n        if (self.frame.valstack.pop() != self.frame.framestart)\n            fatal_error(\"Call stub frameptr does not match frame.\");\n        self.pc = self.frame.valstack.pop();\n        destaddr = self.frame.valstack.pop();\n        desttype = self.frame.valstack.pop();\n\n        if (desttype == 0x11) {\n            /* The call stub for the top-level string. Return to the main\n               execution loop. */\n            return true;\n        }\n        else if (desttype == 0x10) {\n            /* The call stub for a sub-function. Continue the compressed\n               string that called it. */\n            substring = true;\n            bitnum = destaddr;\n            inmiddle = 0xE1;\n            addr = self.pc;\n            //qlog(\"### end; pop to addr=\"+addr+\"/\"+inmiddle+\"/\"+bitnum);\n        }\n        else {\n            fatal_error(\"Function-terminator call stub at end of string.\");\n        }\n    }\n}\nself.stream_string = stream_string;\n\n/* Generate a function which outputs the string, or rather one path of it.\n   Like function paths, a string path only runs up to the first internal\n   call; then it exits so that the main terp loop can start working on\n   the function.\n\n   The generated function returns true if a VM function is set up to go next;\n   an array [addr, inmiddle, bitnum] if a new (or re-entering) string is set\n   up; or false if the string has ended normally. In the latter case, a\n   string-callstub needs to be popped and used.\n\n   If the string ends with no sub-strings or sub-calls (the substring flag\n   stays false, and there is no stack activity), then this doesn't bother with\n   a function. It returns a plain string.\n*/\nfunction compile_string(curiosys, startaddr, inmiddle, startbitnum) {\n    var addr = startaddr;\n    var bitnum = startbitnum;\n    var retval = undefined;\n    var ch, type;\n\n    if (!addr)\n        fatal_error(\"Called compile_string with null address.\");\n\n    /* This will hold all sorts of useful information about the code\n       sequence we're compiling. */\n    var context = {\n        startaddr: startaddr,\n        startbitnum: startbitnum,\n        buffer: [],\n        code: []\n    }\n\n    if (inmiddle == 0) {\n        type = Mem1(addr);\n        if (type == 0xE2)\n            addr+=4;\n        else\n            addr++;\n        bitnum = 0;\n    }\n    else {\n        type = inmiddle;\n    }\n\n    if (type == 0xE1) {\n        if (decoding_tree) {\n            var bits, numbits, readahead, tmpaddr;\n            var cablist, cab;\n            var done = false;\n\n            /* bitnum is already set right */\n            bits = Mem1(addr); \n            if (bitnum)\n                bits >>= bitnum;\n            numbits = (8 - bitnum);\n            readahead = false;\n            \n            if (!(decoding_tree instanceof Array)) {\n                /* This is a bit of a cheat. If the top-level block is not\n                   a branch, then it must be a string-terminator -- otherwise\n                   the string would be an infinite repetition of that block.\n                   We check for this case and bail immediately. */\n                done = true;\n            }\n\n            cablist = decoding_tree;\n            while (!done) {\n                if (numbits < 4) { /* CACHEBITS */\n                    /* readahead is certainly false */\n                    var newbyte = Mem1(addr+1);\n                    bits |= (newbyte << numbits);\n                    numbits += 8;\n                    readahead = true;\n                }\n\n                cab = cablist[bits & 0x0F]; /* CACHEMASK */\n                numbits -= cab.depth;\n                bits >>= cab.depth;\n                bitnum += cab.depth;\n                if (bitnum >= 8) {\n                    addr += 1;\n                    bitnum -= 8;\n                    if (readahead) {\n                        readahead = false;\n                    }\n                    else {\n                        var newbyte = Mem1(addr);\n                        bits |= (newbyte << numbits);\n                        numbits += 8;\n                    }\n                }\n\n                if (cab instanceof Array) {\n                    /* non-leaf node */\n                    cablist = cab;\n                    continue;\n                }\n\n                switch (cab.type) {\n                case 0x01: /* string terminator */\n                    done = true;\n                    break;\n                case 0x02: /* single character */\n                case 0x04: /* single Unicode character */\n                    switch (curiosys) {\n                    case 2: /* glk */\n                        context.buffer.push(cab.cchar);\n                        break;\n                    case 1: /* filter */\n                        oputil_flush_string(context);\n                        oputil_push_substring_callstub(context);\n                        oputil_push_callstub(context, \"0x10,\"+bitnum, addr);\n                        context.code.push(\"self.tempcallargs[0]=\"+cab.value+\";\");\n                        context.code.push(\"self.enter_function(self.iosysrock, 1);\");\n                        retval = true;\n                        done = true;\n                        break;\n                    }\n                    cablist = decoding_tree;\n                    break;\n                case 0x03: /* C string */\n                    switch (curiosys) {\n                    case 2: /* glk */\n                        tmpaddr = cab.addr;\n                        while (true) {\n                            ch = Mem1(tmpaddr);\n                            if (ch == 0)\n                                break;\n                            context.buffer.push(CharToString(ch));\n                            tmpaddr++;\n                        }\n                        break;\n                    case 1: /* filter */\n                        oputil_flush_string(context);\n                        oputil_push_substring_callstub(context);\n                        oputil_push_callstub(context, \"0x10,\"+bitnum, addr);\n                        retval = \"[\"+(cab.addr)+\", 0xE0, 0]\";\n                        done = true;\n                        break;\n                    }\n                    cablist = decoding_tree;\n                    break;\n                case 0x05: /* C Unicode string */\n                    switch (curiosys) {\n                    case 2: /* glk */\n                        tmpaddr = cab.addr;\n                        while (true) {\n                            ch = Mem4(tmpaddr);\n                            if (ch == 0)\n                                break;\n                            context.buffer.push(CharToString(ch));\n                            tmpaddr += 4;\n                        }\n                        break;\n                    case 1: /* filter */\n                        oputil_flush_string(context);\n                        oputil_push_substring_callstub(context);\n                        oputil_push_callstub(context, \"0x10,\"+bitnum, addr);\n                        retval = \"[\"+(cab.addr)+\", 0xE2, 0]\";\n                        done = true;\n                        break;\n                    }\n                    cablist = decoding_tree;\n                    break;\n                case 0x08:\n                case 0x09:\n                case 0x0A:\n                case 0x0B: \n                    oputil_flush_string(context);\n                    oputil_push_substring_callstub(context);\n                    /* It's not worth precomputing this type-test. We could\n                       do it for a single-indirect to a ROM address, and\n                       it'd be mostly okay if we weren't caching this\n                       JIT code. But those aren't the common cases, so\n                       let's not bother. */\n                    context.code.push(\"var otype, retval;\");\n                    context.code.push(\"var oaddr = \"+(cab.addr)+\";\");\n                    if (cab.type >= 0x09)\n                        context.code.push(\"oaddr = self.Mem4(oaddr);\");\n                    if (cab.type == 0x0B)\n                        context.code.push(\"oaddr = self.Mem4(oaddr);\");\n                    context.code.push(\"otype = self.Mem1(oaddr);\");\n                    retval = \"retval\";\n                    done = true;\n\n                    oputil_push_callstub(context, \"0x10,\"+bitnum, addr);\n                    context.code.push(\"if (otype >= 0xE0 && otype <= 0xFF) {\");\n                    context.code.push(\"retval = [oaddr, 0, 0];\");\n                    context.code.push(\"}\");\n                    context.code.push(\"else if (otype >= 0xC0 && otype <= 0xDF) {\");\n                    var argc = 0;\n                    if (cab.type == 0x0A || cab.type == 0x0B) {\n                        argc = Mem4(cab.addr+4);\n                        for (var ix=0; ix<argc; ix++)\n                            context.code.push(\"self.tempcallargs[\"+ix+\"]=\"+Mem4(cab.addr+8+4*ix)+\";\");\n                    }\n                    context.code.push(\"self.enter_function(oaddr, \"+argc+\");\");\n                    context.code.push(\"retval = true;\");\n                    context.code.push(\"}\");\n                    context.code.push(\"else {\");\n                    context.code.push(\"self.fatal_error('Unknown object while decoding string indirect reference.', otype);\");\n                    context.code.push(\"}\");\n                    break;\n                default:\n                    fatal_error(\"Unknown entity in string decoding (cached).\");\n                    break;\n                }\n            }\n        }\n        else {  /* No decoding_tree available. */\n            var node, byt, nodetype;\n            var done = false;\n            \n            if (!self.stringtable)\n                fatal_error(\"Attempted to print a compressed string with no table set.\");\n            /* bitnum is already set right */\n            byt = Mem1(addr);\n            if (bitnum)\n                byt >>= bitnum;\n            node = Mem4(self.stringtable+8);\n\n            while (!done) {\n                nodetype = Mem1(node);\n                node++;\n                switch (nodetype) {\n                case 0x00: /* non-leaf node */\n                    if (byt & 1) \n                        node = Mem4(node+4);\n                    else\n                        node = Mem4(node+0);\n                    if (bitnum == 7) {\n                        bitnum = 0;\n                        addr++;\n                        byt = Mem1(addr);\n                    }\n                    else {\n                        bitnum++;\n                        byt >>= 1;\n                    }\n                    break;\n                case 0x01: /* string terminator */\n                    retval = false;\n                    done = true;\n                    break;\n                case 0x02: /* single character */\n                    ch = Mem1(node);\n                    switch (curiosys) {\n                    case 2: /* glk */\n                        context.buffer.push(CharToString(ch));\n                        break;\n                    case 1: /* filter */\n                        oputil_flush_string(context);\n                        oputil_push_substring_callstub(context);\n                        oputil_push_callstub(context, \"0x10,\"+bitnum, addr);\n                        context.code.push(\"self.tempcallargs[0]=\"+ch+\";\");\n                        context.code.push(\"self.enter_function(self.iosysrock, 1);\");\n                        retval = true;\n                        done = true;\n                        break;\n                    }\n                    node = Mem4(self.stringtable+8);\n                    break;\n                case 0x04: /* single Unicode character */\n                    ch = Mem4(node);\n                    switch (curiosys) {\n                    case 2: /* glk */\n                        context.buffer.push(CharToString(ch));\n                        break;\n                    case 1: /* filter */\n                        oputil_flush_string(context);\n                        oputil_push_substring_callstub(context);\n                        oputil_push_callstub(context, \"0x10,\"+bitnum, addr);\n                        context.code.push(\"self.tempcallargs[0]=\"+ch+\";\");\n                        context.code.push(\"self.enter_function(self.iosysrock, 1);\");\n                        retval = true;\n                        done = true;\n                        break;\n                    }\n                    node = Mem4(self.stringtable+8);\n                    break;\n                case 0x03: /* C string */\n                    switch (curiosys) {\n                    case 2: /* glk */\n                        while (true) {\n                            ch = Mem1(node);\n                            if (ch == 0)\n                                break;\n                            context.buffer.push(CharToString(ch));\n                            node++;\n                        }\n                        break;\n                    case 1: /* filter */\n                        oputil_flush_string(context);\n                        oputil_push_substring_callstub(context);\n                        oputil_push_callstub(context, \"0x10,\"+bitnum, addr);\n                        retval = \"[\"+node+\", 0xE0, 0]\";\n                        done = true;\n                        break;\n                    }\n                    node = Mem4(self.stringtable+8);\n                    break;\n                case 0x05: /* C Unicode string */\n                    switch (curiosys) {\n                    case 2: /* glk */\n                        while (true) {\n                            ch = Mem4(node);\n                            if (ch == 0)\n                                break;\n                            context.buffer.push(CharToString(ch));\n                            node += 4;\n                        }\n                        break;\n                    case 1: /* filter */\n                        oputil_flush_string(context);\n                        oputil_push_substring_callstub(context);\n                        oputil_push_callstub(context, \"0x10,\"+bitnum, addr);\n                        retval = \"[\"+node+\", 0xE2, 0]\";\n                        done = true;\n                        break;\n                    }\n                    node = Mem4(self.stringtable+8);\n                    break;\n                case 0x08:\n                case 0x09:\n                case 0x0A:\n                case 0x0B: \n                    oputil_flush_string(context);\n                    oputil_push_substring_callstub(context);\n                    /* It's not worth precomputing this type-test. We could\n                       do it for a single-indirect to a ROM address, and\n                       it'd be mostly okay if we weren't caching this\n                       JIT code. But those aren't the common cases, so\n                       let's not bother. */\n                    context.code.push(\"var otype, retval;\");\n                    context.code.push(\"var oaddr = \"+Mem4(node)+\";\");\n                    if (nodetype == 0x09 || nodetype == 0x0B)\n                        context.code.push(\"oaddr = self.Mem4(oaddr);\");\n                    context.code.push(\"otype = self.Mem1(oaddr);\");\n                    retval = \"retval\";\n                    done = true;\n\n                    oputil_push_callstub(context, \"0x10,\"+bitnum, addr);\n                    context.code.push(\"if (otype >= 0xE0 && otype <= 0xFF) {\");\n                    context.code.push(\"retval = [oaddr, 0, 0];\");\n                    context.code.push(\"}\");\n                    context.code.push(\"else if (otype >= 0xC0 && otype <= 0xDF) {\");\n                    var argc = 0;\n                    if (nodetype == 0x0A || nodetype == 0x0B) {\n                        argc = Mem4(node+4);\n                        for (var ix=0; ix<argc; ix++)\n                            context.code.push(\"self.tempcallargs[\"+ix+\"]=\"+Mem4(node+8+4*ix)+\";\");\n                    }\n                    context.code.push(\"self.enter_function(oaddr, \"+argc+\");\");\n                    context.code.push(\"retval = true;\");\n                    context.code.push(\"}\");\n                    context.code.push(\"else {\");\n                    context.code.push(\"self.fatal_error('Unknown object while decoding string indirect reference.', otype);\");\n                    context.code.push(\"}\");\n                    break;\n                default:\n                    fatal_error(\"Unknown entity in string decoding.\", nodetype);\n                    break;\n                }\n            }\n        }\n    }\n    else if (type == 0xE0) {\n        var ch;\n        switch (curiosys) {\n        case 2: /* glk */\n            while (1) {\n                ch = Mem1(addr);\n                addr++;\n                if (ch == 0)\n                    break;\n                context.buffer.push(CharToString(ch));\n            }\n            break;\n        case 1: /* filter */\n            oputil_flush_string(context);\n            oputil_push_substring_callstub(context);\n            ch = Mem1(addr);\n            addr++;\n            if (ch != 0) {\n                oputil_push_callstub(context, \"0x13,0\", addr);\n                context.code.push(\"self.tempcallargs[0]=\"+ch+\";\");\n                context.code.push(\"self.enter_function(self.iosysrock, 1);\");\n                retval = true;\n            }\n            else {\n                retval = \"false\";\n            }\n            break;\n        }\n    }\n    else if (type == 0xE2) {\n        var ch;\n        switch (curiosys) {\n        case 2: /* glk */\n            while (1) {\n                ch = Mem4(addr);\n                addr+=4;\n                if (ch == 0)\n                    break;\n                context.buffer.push(CharToString(ch));\n            }\n            break;\n        case 1: /* filter */\n            oputil_flush_string(context);\n            oputil_push_substring_callstub(context);\n            ch = Mem4(addr);\n            addr+=4;\n            if (ch != 0) {\n                oputil_push_callstub(context, \"0x14,0\", addr);\n                context.code.push(\"self.tempcallargs[0]=\"+ch+\";\");\n                context.code.push(\"self.enter_function(self.iosysrock, 1);\");\n                retval = true;\n            }\n            else {\n                retval = \"false\";\n            }\n            break;\n        }\n    }\n    else if (type >= 0xE0 && type <= 0xFF) {\n        fatal_error(\"Attempt to print unknown type of string.\");\n    }\n    else {\n        fatal_error(\"Attempt to print non-string.\");\n    }\n\n    if (!retval) {\n        /* The simple case; retval is false or undefined. Equivalent to a\n           function that prints text (to Glk) and returns false. */\n        ;;;if (context.code.length > 1) {\n        ;;;    fatal_error(\"Simple-case string generated code.\"); //assert\n        ;;;}\n        return context.buffer.join(\"\");\n    }\n    else {\n        oputil_flush_string(context);\n        context.code.push(\"return \" + retval + \";\");\n        return make_code(context.code.join(\"\\n\"), \"_func_str_\"+startaddr, \"nextcp\", \"substring\");\n    }\n}\n\nfunction do_gestalt(val, val2) {\n    var ix;\n\n    switch (val) {\n    case 0: /* GlulxVersion */\n        return 0x00030103; /* Glulx spec version 3.1.3 */\n\n    case 1: /* TerpVersion */\n        return 0x00020201; /* Quixe version 2.2.1 */\n\n    case 2: /* ResizeMem */\n        return 1; /* Memory resizing works. */\n\n    case 3: /* Undo */\n        return 1; /* Undo works. */\n\n    case 4: /* IOSystem */\n        switch (val2) {\n        case 0:\n            return 1; /* The \"null\" system always works. */\n        case 1:\n            return 1; /* The \"filter\" system always works. */\n        case 2:\n            return 1; /* A Glk library is hooked up. */\n        default:\n            return 0;\n        }\n        break;\n\n    case 5: /* Unicode */\n        return 1; /* We can handle Unicode. */\n\n    case 6: /* MemCopy */\n        return 1; /* We can do mcopy/mzero. */\n\n    case 7: /* MAlloc */\n        return 1; /* We can handle malloc/mfree. */\n\n    case 8: /* MAllocHeap */\n        return heap_get_start();\n\n    case 9: /* Acceleration */\n        return 1; /* The acceleration opcodes work. */\n\n    case 10: /* AccelFunc */\n        if (accel_func_map[val2])\n            return 1;\n        else\n            return 0;\n\n    case 11: /* Float */\n        return 1; /* We can handle the floating-point opcodes. */\n\n    case 12: /* ExtUndo */\n        return 1; /* We can handle hasundo/discardundo. */\n\n    case 13: /* Double */\n        return 1; /* We can handle the double-precision opcodes. */\n\n\n    default:\n        return 0;\n    }\n}\nself.do_gestalt = do_gestalt;\n\n/* This fetches a search key, and returns an array containing the key\n   (bytewise). Actually it always returns the same array.\n*/\nfunction fetch_search_key(addr, len, options) {\n    var ix;\n\n    if (options & 1) {\n        /* indirect key */\n        return MemSlice(addr, len);\n    }\n    else {\n        switch (len) {\n        case 4:\n            return [\n                (addr >> 24) & 0xFF,\n                (addr >> 16) & 0xFF,\n                (addr >> 8) & 0xFF,\n                addr & 0xFF\n            ];\n        case 2:\n            return [\n                (addr >> 8) & 0xFF,\n                addr & 0xFF\n            ];\n        case 1:\n            return [addr & 0xFF];\n        default:\n            fatal_error('Direct search key must hold one, two, or four bytes.');\n        }\n    }\n}\n\nfunction linear_search(key, keysize, start, \n    structsize, numstructs, keyoffset, options) {\n\n    var ix, count, match, bytes;\n    var retindex = ((options & 4) != 0);\n    var zeroterm = ((options & 2) != 0);\n    var keybuf = fetch_search_key(key, keysize, options);\n\n    for (count=0; count<numstructs; count++, start+=structsize) {\n        match = true;\n        bytes = MemSlice(start + keyoffset, keysize);\n        for (ix=0; match && ix<keysize; ix++) {\n            if (bytes[ix] != keybuf[ix])\n                match = false;\n        }\n\n        if (match) {\n            if (retindex)\n                return count;\n            else\n                return start;\n        }\n        \n        if (zeroterm) {\n            match = true;\n            bytes = MemSlice(start + keyoffset, keysize);\n            for (ix=0; match && ix<keysize; ix++) {\n                if (bytes[ix] != 0)\n                    match = false;\n            }\n            \n            if (match) {\n                break;\n            }\n        }\n    }\n\n    if (retindex)\n        return 0xFFFFFFFF;\n    else\n        return 0;\n}\n\nfunction binary_search(key, keysize, start, \n    structsize, numstructs, keyoffset, options) {\n\n    var top, bot, addr, val, cmp, ix;\n    var byt, byt2;\n    var retindex = ((options & 4) != 0);\n    var keybuf = fetch_search_key(key, keysize, options);\n\n    bot = 0;\n    top = numstructs;\n    while (bot < top) {\n        cmp = 0;\n        val = (top+bot) >> 1;\n        addr = start + val * structsize;\n        for (ix=0; (!cmp) && ix<keysize; ix++) {\n            byt = Mem1(addr + keyoffset + ix);\n            byt2 = keybuf[ix];\n            if (byt < byt2)\n                cmp = -1;\n            else if (byt > byt2)\n                cmp = 1;\n        }\n\n        if (!cmp) {\n            if (retindex)\n                return val;\n            else\n                return addr;\n        }\n        \n        if (cmp < 0) {\n            bot = val+1;\n        }\n        else {\n            top = val;\n        }\n    }\n\n    if (retindex)\n        return 0xFFFFFFFF;\n    else\n        return 0;\n}\n\nfunction linked_search(key, keysize, start, \n    keyoffset, nextoffset, options) {\n\n    var ix, byt, match;\n    var zeroterm = ((options & 2) != 0);\n    var keybuf = fetch_search_key(key, keysize, options);\n\n    while (start != 0) {\n        match = true;\n        for (ix=0; match && ix<keysize; ix++) {\n            byt = Mem1(start + keyoffset + ix);\n            if (byt != keybuf[ix])\n                match = false;\n        }\n\n        if (match) {\n            return start;\n        }\n        \n        if (zeroterm) {\n            match = true;\n            for (ix=0; match && ix<keysize; ix++) {\n                byt = Mem1(start + keyoffset + ix);\n                if (byt != 0)\n                    match = false;\n            }\n            \n            if (match) {\n                break;\n            }\n        }\n\n        start = Mem4(start + nextoffset);\n    }\n\n    return 0;\n}\n\nself.linear_search = linear_search;\nself.binary_search = binary_search;\nself.linked_search = linked_search;\n\n/* Convert an integer (in IEEE-754 single-precision format) into a\n   Javascript number.\n*/\nfunction decode_float(val) {\n    var sign, res, expo;\n\n    if (val & 0x80000000) {\n        sign = true;\n        val = val & 0x7fffffff;\n    }\n    else {\n        sign = false;\n    }\n\n    if (val == 0) {\n        return (sign ? -0.0 : 0.0);\n    }\n\n    if ((val & 0x7f800000) == 0x7f800000) {\n        /* Either an infinity or a NaN. */\n        if ((val & 0x7fffff) == 0) {\n            return (sign ? -Infinity : Infinity);\n        }\n        else {\n            return (sign ? -NaN : NaN);\n        }\n    }\n\n    expo = (val>>23 & 0xff);\n    /* 8388608 is 2^23, in case you're curious. */\n    if (expo) {\n        res = ((val & 0x7fffff | 0x800000) / 8388608\n            * Math.pow(2, (expo - 127)));\n    }\n    else {\n        res = ((val & 0x7fffff) / 8388608\n            * Math.pow(2, -126));\n    }\n\n    if (sign)\n        return -res;\n    else\n        return res;\n}\n\n/* Convert a Javascript number into IEEE-754 single-precision format.\n   The result will be a (non-negative) 32-bit integer.\n*/\nfunction encode_float(val) {\n    var absval, fbits;\n    var mant, expo, sign;\n\n    if (isNaN(val)) {\n        return 0x7f800001;\n    }\n    if (!isFinite(val)) {\n        if (val < 0)\n            return 0xff800000;\n        else\n            return 0x7f800000;\n    }\n    if (val == 0) {\n        /* We have to deal with zeroes separately, because you can't test\n           (-0 < 0) -- it ain't so. You have to turn the thing into an\n           infinity and test that. */\n        if (1 / val < 0)\n            return 0x80000000;\n        else\n            return 0x0;\n    }\n\n    if (val < 0) {\n        sign = true;\n        absval = -val;\n    }\n    else {\n        sign = false;\n        absval = val;\n    }\n\n    expo = Math.floor(Math.log(absval) / Math.log(2));\n    mant = absval / Math.pow(2, expo);\n\n    if (expo >= 128) {\n        /* Oops, overflow */\n        return (sign ? 0xff800000 : 0x7f800000); /* infinity */\n    }\n    else if (expo < -126) {\n        /* Denormalized (very small) number */\n        mant = mant * Math.pow(2, 126 + expo);\n        expo = 0;\n    }\n    else if (!(expo == 0 && mant == 0.0)) {\n        expo += 127;\n        mant -= 1.0; /* Get rid of leading 1 */\n    }\n\n    mant = mant * 8388608.0; /* 2^23 */\n\n    /* We want to round mant to the nearest integer. However, we bias\n       towards rounding down, in order to make Javascript's math\n       (which is double-precision) match the single-precision C code. */\n    fbits = (mant + 0.4999999999999999) << 0; \n    if (fbits >= 8388608) {\n        /* The carry propagated out of a string of 23 1 bits. */\n        fbits = 0;\n        expo++;\n        if (expo >= 255) {\n            /* Oops, overflow */\n            return (sign ? 0xff800000 : 0x7f800000); /* infinity */\n        }\n    }\n\n    if (sign)\n        return ((0x80000000) | (expo << 23) | (fbits)) >>>0;\n    else\n        return (expo << 23) | (fbits);\n}\n\n/* Convert a pair of integers (in double-precision format) into a\n   Javascript number.\n*/\nfunction decode_double(valhi, vallo) {\n    var sign, res, expo, manthi, mantlo;\n\n    if (valhi & 0x80000000) {\n        sign = true;\n        valhi = valhi & 0x7fffffff;\n    }\n    else {\n        sign = false;\n    }\n\n    if (valhi == 0 && vallo == 0) {\n        return (sign ? -0.0 : 0.0);\n    }\n\n    expo = (valhi >> 20) & 0x7ff;\n    manthi = valhi & 0xfffff;\n    mantlo = vallo;\n    \n    if (expo == 2047) {\n        /* Either an infinity or a NaN. */\n        if (manthi == 0 && mantlo == 0) {\n            return (sign ? -Infinity : Infinity);\n        }\n        else {\n            return (sign ? -NaN : NaN);\n        }\n    }\n\n    res = mantlo / 4503599627370496.0 + manthi / 1048576.0;\n    \n    if (expo) {\n        res = (res+1) * Math.pow(2, (expo - 1023));\n    }\n    else {\n        res = res * Math.pow(2, -1022);\n    }\n\n    return (sign ? -res : res);\n}\n\n/* Convert a Javascript number into IEEE-754 double-precision format.\n   The result will be a pair of 32-bit integers.\n*/\nfunction encode_double(val) {\n    var absval, fhi, flo;\n    var mant, expo, sign;\n    var valhi, vallo;\n\n    if (isNaN(val)) {\n        return { hi:0x7FF80000, lo:0x00000001 };\n    }\n    if (!isFinite(val)) {\n        if (val < 0)\n            return { hi:0xFFF00000, lo:0x0 };\n        else\n            return { hi:0x7FF00000, lo:0x0 };\n    }\n    if (val == 0) {\n        /* We have to deal with zeroes separately, because you can't test\n           (-0 < 0) -- it ain't so. You have to turn the thing into an\n           infinity and test that. */\n        if (1 / val < 0)\n            return { hi:0x80000000, lo:0x0 };\n        else\n            return { hi:0x00000000, lo:0x0 };\n    }\n\n    if (val < 0) {\n        sign = true;\n        absval = -val;\n    }\n    else {\n        sign = false;\n        absval = val;\n    }\n\n    expo = Math.floor(Math.log(absval) / Math.log(2));\n    if (expo == 1024) {\n        expo--;\n    }\n    else if (expo >= 1024) {\n        /* Oops, overflow */\n        return (sign ? 0xff800000 : 0x7f800000); /* infinity */\n    }\n    \n    mant = absval / Math.pow(2, expo);\n\n    /* Normalize mantissa to be in the range [1.0, 2.0) */\n    if (0.5 <= mant && mant < 1.0) {\n        mant *= 2.0;\n        expo--;\n    }\n    else if (mant >= 2.0) {\n        mant *= 0.5;\n        expo++;\n    }\n    else if (mant == 0.0) {\n        expo = 0;\n    }\n    \n    if (expo < -1022) {\n        /* Denormalized (very small) number */\n        mant = mant * Math.pow(2, 1022 + expo);\n        expo = 0;\n    }\n    else if (!(expo == 0 && mant == 0.0)) {\n        expo += 1023;\n        mant -= 1.0; /* Get rid of leading 1 */\n    }\n\n    /* fhi receives the high 28 bits; flo the low 24 bits (total 52 bits) */\n    mant *= 268435456.0;          /* 2^28 */\n    fhi = mant << 0;              /* Truncate */\n    mant -= fhi;\n    mant *= 16777216.0;           /* 2^24 */\n    flo = (mant+0.5) << 0;        /* Round */\n    \n    if (flo >> 24) {\n        /* The carry propagated out of a string of 24 1 bits. */\n        flo = 0;\n        fhi++;\n        if (fhi >> 28) {\n            /* And it also propagated out of the next 28 bits. */\n            fhi = 0;\n            expo++;\n            if (expo >= 255) {\n                return (sign ? 0xff800000 : 0x7f800000); /* infinity */\n            }\n        }\n    }\n\n    valhi = ((sign ? 0x80000000 : 0x00000000) | (expo << 20) | (fhi >> 8)) >>>0;\n    vallo = (((fhi & 0xFF) << 24) | (flo)) >>>0;\n    return { hi:valhi, lo:vallo };\n}\n\nself.decode_float = decode_float;\nself.encode_float = encode_float;\nself.decode_double = decode_double;\nself.encode_double = encode_double;\n\n/* ----------------------------------------------------------------- */\n\n/* Now we declare all the VM global variables and constants.\n\n   Some of these are (private) variables; some live in the self object.\n   There's no real difference, except for the rule that JIT-compiled\n   functions cannot access private variables. I could have put all\n   of them in self, but I was lazy.\n*/\n\n/* Parameters set at init() time, including the game image and any\n   execution options. */\n\nvar game_image = null; /* the original game image, as an array of bytes */\nvar game_signature = null; /* string, containing the first 64 bytes of image */\nvar opt_log_execution_time = null;\nvar opt_rethrow_exceptions = null;\nvar opt_do_vm_autosave = null;\nvar opt_clear_vm_autosave = null;\n\n/* The VM state variables. */\n\nvar memmap; /* array of bytes */\nvar stack; /* array of StackFrames */\nself.frame = null; /* the top of the stack */\nself.vm_started = false; /* Quixe is initialized */\nself.vm_stopped = false; /* Quixe has shut down */\nself.tempcallargs = null; /* only used momentarily, for enter_function() */\nself.tempglkargs = null; /* only used momentarily, for the @glk opcode */\nself.done_executing = null; /* signals that we've quit *or* paused for interaction */\n\nvar vmfunc_table; /* maps addresses to VMFuncs */\nvar vmtextenv_table; /* maps stringtable addresses to VMTextEnvs */\n/* The following two variables point to inside the current string table.\n   They are undefined if stringtable is zero, or a non-ROM address. */\nvar decoding_tree; /* binary tree of string nodes */\nvar vmstring_table; /* maps addresses to functions or strings */\n\nself.random_func = null; /* Math.random or deterministic equivalent */\n\n/* Header constants. */\nvar ramstart;\nvar endgamefile;   // always game_image.length\nvar origendmem;\nvar stacksize;     // not used -- we allow the stack to grow as needed\nvar startfuncaddr;\nvar origstringtable;\nvar checksum;\n\n/* The VM registers. */\nself.pc = null;\nself.stringtable = null;\nself.endmem = null;        // always memmap.length\nself.protectstart = null;\nself.protectend = null;\nself.iosysmode = null;\nself.iosysrock = null;\n\n/* This is not needed for VM operation, but it may be needed for\n   autosave/autorestore. It is updated very lazily -- only when\n   beginning a blocking @glk opcode. (I.e., only when we're about\n   to autosave.) */\nself.prevpc = null;\n\nvar undostack;     // array of VM state snapshots.\nself.resumefuncop = null;\nself.resumevalue = null;\n\n/* Memory allocation heap. Blocks have \"addr\" and \"size\" properties. */\nvar heapstart;     // Start address of the heap.\nvar usedlist;      // Sorted array of used blocks.\nvar freelist;      // Sorted array of free blocks.\n\n/* Statistics -- may only be meaningful in a debug release. */\nvar total_execution_time = 0;\nvar total_function_calls = 0;\nvar accel_function_calls = 0;\nvar total_path_calls = 0;\nvar paths_cached = 0;\nvar paths_compiled = 0;\nvar strings_cached = 0;\nvar strings_compiled = 0;\n\n/* Set up all the initial VM state.\n*/\nfunction setup_vm() {\n    var val, version;\n\n    if (!game_image)\n        fatal_error(\"There is no Glulx game file loaded.\");\n\n    var Dialog = self.Glk.getlibrary('Dialog');\n    \n    self.vm_started = true;\n    self.resumefuncop = null;\n    self.resumevalue = 0;\n    memmap = null;\n    stack = [];\n    self.frame = null;\n    self.pc = 0;\n    self.prevpc = 0;\n\n    if (game_image.length < 36)\n        fatal_error(\"This is too short to be a valid Glulx file.\");\n    val = ByteRead4(game_image, 0);\n    if (val != 0x476c756c)   // 'Glul'\n        fatal_error(\"This is not a valid Glulx file.\");\n    \n    /* We support version 2.0 through 3.1.*. */\n    version = ByteRead4(game_image, 4);\n    if (version < 0x20000) \n        fatal_error(\"This Glulx file is too old a version to execute.\");\n    if (version >= 0x30200) \n        fatal_error(\"This Glulx file is too new a version to execute.\");\n\n    ramstart = ByteRead4(game_image, 8);\n    endgamefile = ByteRead4(game_image, 12);\n    origendmem = ByteRead4(game_image, 16);\n    stacksize = ByteRead4(game_image, 20);\n    startfuncaddr = ByteRead4(game_image, 24);\n    origstringtable = ByteRead4(game_image, 28);\n    checksum = ByteRead4(game_image, 32);\n\n    /* Set the protection range to (0, 0), meaning \"off\". */\n    self.protectstart = 0;\n    self.protectend = 0;\n\n    if (ramstart < 0x100 \n        || endgamefile < ramstart \n        || origendmem < endgamefile) \n        fatal_error(\"The segment boundaries in the header are in an impossible order.\");\n\n    if (endgamefile != game_image.length)\n        fatal_error(\"The game file length does not agree with the header.\");\n\n    self.done_executing = false;\n    vmfunc_table = {};\n    vmtextenv_table = {};\n    decoding_tree = undefined;\n    vmstring_table = undefined;\n    self.tempcallargs = Array(8);\n    self.tempglkargs = Array(8);\n    set_random(0);\n\n    self.endmem = origendmem;\n    self.stringtable = 0;\n\n    undostack = [];\n\n    heapstart = 0;\n    usedlist = [];\n    freelist = [];\n\n    if (opt_clear_vm_autosave) {\n        Dialog.autosave_write(game_signature, null);\n    }\n    if (opt_do_vm_autosave && !opt_clear_vm_autosave) {\n        try {\n            var snapshot = Dialog.autosave_read(game_signature);\n            if (snapshot) {\n                qlog('Found autosave...');\n                // A Uint8Array will break some autorestores so convert to an Array\n                snapshot.ram = Array.from(snapshot.ram)\n                vm_autorestore(snapshot);\n                return;\n            }\n        }\n        catch (ex) {\n            qlog('Autorestore failed, deleting it: ' + show_exception(ex));\n            if (ex.stack)\n                qlog('JS stack dump C:\\n' + ex.stack);\n            Dialog.autosave_write(game_signature, null);\n        }\n    }\n    \n    vm_restart();\n}\n\n/* Put the VM into a state where it's ready to begin executing the\n   game. This is called both at startup time, and when the machine\n   performs a \"restart\" opcode. \n*/\nfunction vm_restart() {\n    var ix;\n\n    /* Deactivate the heap (if it was active). */\n    heap_clear();\n\n    var protect = copy_protected_range();\n\n    /* Build (or rebuild) main memory array. */\n    memmap = null; // garbage-collect old memmap\n    memmap = game_image.slice(0, endgamefile);\n    self.endmem = memmap.length;\n    change_memsize(origendmem, false);\n    /* endmem is now origendmem */\n\n    paste_protected_range(protect);\n\n    stack = [];\n    self.frame = null;\n    self.pc = 0;\n    self.prevpc = 0;\n    self.iosysmode = 0;\n    self.iosysrock = 0;\n    set_string_table(origstringtable);\n\n    /* Note that we do not reset the protection range. */\n    \n    /* Push the first function call. (No arguments.) */\n    enter_function(startfuncaddr, 0);\n    \n    /* We're now ready to execute. */\n}\nself.vm_restart = vm_restart;\n\n/* Run-length-encode an array, for Quetzal. */\nfunction compress_bytes(arr) {\n    var result = [];\n    var i = 0;\n    while (i < arr.length) {\n        var zeroes = 0;\n        while (i < arr.length && arr[i] == 0 && zeroes <= 255) {\n            zeroes++;\n            i++;\n        }\n        if (zeroes > 0) {\n            result.push(0);\n            result.push(zeroes - 1);\n        }\n        while (i < arr.length && arr[i] != 0) {\n            result.push(arr[i]);\n            i++;\n        }\n    }\n    //qlog(\"Compressed \" + arr.length + \" bytes to \" + result.length);\n    return result;\n}\n\n/* Run-length-decode an array, for Quetzal. */\nfunction decompress_bytes(arr) {\n    var result = [];\n    var i = 0;\n    while (i < arr.length) {\n        var b = arr[i++];\n        if (b == 0) {\n            var count = arr[i++] + 1;\n            for (var j = 0; j < count; j++) {\n                result.push(0);\n            }\n        } else {\n            result.push(b);\n        }\n    }\n    //qlog(\"Decompressed \" + arr.length + \" bytes to \" + result.length);\n    return result;\n}\n\n/* Pack an array of { key:ID, chunk:bytes } into a single byte array.\n   The ID should be a 4-character string.\n*/\nfunction pack_iff_chunks(chunks) {\n    var bytes = [];\n    for (var ix = 0; ix < chunks.length; ix++) {\n        var key = chunks[ix].key;\n        var chunk = chunks[ix].chunk;\n        if (key.length != 4) {\n            fatal_error(\"Bad chunk ID (must be exactly 4 chars): \" + key);\n        }\n        if (chunk == undefined) {\n            fatal_error(\"Missing chunk data: \" + key);\n        }\n        //qlog(\"Writing \" + key + \" (\" + chunk.length + \" bytes)\");\n        BytePushString(bytes, key);\n        BytePush4(bytes, chunk.length);\n        bytes = bytes.concat(chunk);\n        /* Align to even length... */\n        if (bytes.length & 1)\n            bytes.push(0);\n    }\n    return bytes;\n}\n\n/* Unpack a byte array into an { ID -> bytes } map, or undefined on error.\n   The order of chunks is not preserved.\n*/\nfunction unpack_iff_chunks(bytes) {\n    var chunks = {};\n    var pos = 0;\n    while (pos < bytes.length) {\n        if ((pos + 8) > bytes.length) {\n          qlog(\"IFF chunk header is truncated\");\n          return undefined;\n        }\n        var key = ByteReadString(bytes, pos, 4);\n        var size = ByteRead4(bytes, pos + 4);\n        pos += 8;\n\n        if ((pos + size) > bytes.length) {\n          qlog(key + \" chunk is truncated \" +\n                \"(\" + size + \" bytes needed, \" + (bytes.length - pos) + \" available\");\n          return undefined;\n        }\n        chunks[key] = bytes.slice(pos, pos + size);\n        pos += size;\n        /* Align to even length... */\n        if (pos & 1)\n            pos += 1;\n        //qlog(\"Reading \" + key + \" (\" + size + \" bytes)\");\n    }\n    return chunks;\n}\n\n/* Writes a snapshot of the VM state to the given Glk stream. Returns true\n   on success. \n*/\nfunction vm_save(streamid) {\n    ;;;if (memmap.length != self.endmem) {\n    ;;;    fatal_error(\"Memory length was incorrect before save.\"); //assert\n    ;;;}\n\n    if (self.iosysmode != 2)\n        fatal_error(\"Streams are only available in Glk I/O system.\");\n\n    var str = self.GiDispa.class_obj_from_id('stream', streamid);\n    if (!str)\n        return false;\n    \n    var chunks = [];\n    \n    chunks.push({ key:\"IFhd\", chunk:game_image.slice(0, 128) });\n    \n    var cmem = memmap.slice(ramstart);\n    for (var i = ramstart; i < game_image.length; i++) {\n        cmem[i - ramstart] ^= game_image[i];\n    }\n    cmem = compress_bytes(cmem);\n    cmem.splice(0, 0, 0,0,0,0); // prepend four zeroes\n    // Write in the endmem value\n    ByteWrite4(cmem, 0, self.endmem);\n    chunks.push({key:\"CMem\", chunk:cmem});\n    \n    var stkschunk = [];\n    chunks.push({ key:\"Stks\", chunk:stkschunk });\n    for (var i = 0; i < stack.length; i++) {\n        push_serialized_stackframe(stack[i], stkschunk);\n    }\n\n    if (heap_is_active()) {\n        var mallchunk = [];\n        chunks.push({ key:\"MAll\", chunk:mallchunk });\n        BytePush4(mallchunk, heapstart);\n        BytePush4(mallchunk, usedlist.length);\n        for (var i = 0; i < usedlist.length; i++) {\n            BytePush4(mallchunk, usedlist[i].addr);\n            BytePush4(mallchunk, usedlist[i].size);\n        }\n    }\n\n    var payload_bytes = []\n    BytePushString(payload_bytes, \"IFZS\");\n    payload_bytes = payload_bytes.concat(pack_iff_chunks(chunks));\n    \n    var quetzal = pack_iff_chunks([{ key:\"FORM\", chunk:payload_bytes }])\n    //qlog(\"vm_save: writing \" + quetzal.length + \" bytes\");    \n    self.Glk.glk_put_buffer_stream(str, quetzal);\n    return true;\n}\n\n/* Reads a VM state snapshot from the given Glk stream and restores it.\n   Returns true on success.\n*/\nfunction vm_restore(streamid) {\n    if (self.iosysmode != 2)\n        fatal_error(\"Streams are only available in Glk I/O system.\");\n\n    var str = self.GiDispa.class_obj_from_id('stream', streamid);\n    if (!str)\n        return false;\n    \n    var quetzal = new Array(0);\n    var buffer = new Array(1024);\n    var count = 1;\n    while (count > 0) {\n        count = self.Glk.glk_get_buffer_stream(str, buffer);\n        quetzal = quetzal.concat(buffer.slice(0, count));\n    }\n    //qlog(\"vm_restore: reading \" + quetzal.length + \" bytes\");\n    \n    quetzal = unpack_iff_chunks(quetzal);\n    if (!quetzal) {\n        qlog(\"vm_restore failed: file is not Quetzal\");\n        return false;\n    }\n    quetzal = quetzal[\"FORM\"];\n    if (!quetzal || ByteReadString(quetzal, 0, 4) != \"IFZS\") {\n        qlog(\"vm_restore failed: file doesn't start with FORM/IFZS header\");\n        return false;\n    }\n    var chunks = unpack_iff_chunks(quetzal.slice(4));\n\n    // Unpack the chunks map into the VM state. (This is destructive to\n    // the contents of chunks.)\n    \n    if (!chunks[\"IFhd\"]) {\n        qlog(\"vm_restore failed: missing required IFhd chunk\");\n        return false;\n    }\n    for (var i = 0; i < 128; i++) {\n        if (chunks[\"IFhd\"][i] != game_image[i]) {\n            qlog(\"vm_restore failed: this save image is for a different game\");\n            return false;\n        }\n    }    \n    if (!chunks[\"CMem\"]) {\n        qlog(\"vm_restore failed: missing required CMem chunk\");\n        return false;\n    }\n    if (!chunks[\"Stks\"]) {\n        qlog(\"vm_restore failed: missing required Stks chunk\");\n        return false;\n    }\n    \n    // The point of no return.\n    var protect = copy_protected_range();\n    heap_clear();\n    \n    var newendmem = ByteRead4(chunks[\"CMem\"], 0);\n    var ram_xor = chunks[\"CMem\"].slice(4);\n    ram_xor = decompress_bytes(ram_xor);\n    // The trailing zeroes may have been snipped; add them in.\n    while (ram_xor.length < newendmem - ramstart)\n        ram_xor.push(0);\n    change_memsize(newendmem, false);\n    memmap = game_image.slice(0, ramstart).concat(ram_xor);\n    for (var i = ramstart; i < game_image.length; i++) {\n        memmap[i] ^= game_image[i];\n    }\n\n    ;;;if (memmap.length != self.endmem) {\n    ;;;    fatal_error(\"Memory length was incorrect after restore.\"); //assert\n    ;;;}\n\n    var stackchunk = chunks[\"Stks\"];\n    stack = [];\n    while (stackchunk.length) {\n        self.frame = pop_deserialized_stackframe(stackchunk);\n        if (!self.frame) {\n            fatal_error(\"vm_restore failed: bad stack frame\");\n        }\n        stack.unshift(self.frame);\n    }\n    for (var i = 0; i < stack.length; i++) {\n        stack[i].depth = i;\n    }\n    self.frame = stack[stack.length - 1];\n\n    var heapchunk = chunks[\"MAll\"];\n    if (heapchunk && heapchunk.length >= 8) {\n        heapstart = ByteRead4(heapchunk, 0);\n        var numblocks = ByteRead4(heapchunk, 4);\n\n        for (var i = 0; i < numblocks; i++) {\n            var addr = ByteRead4(heapchunk, 8 + 8*i);\n            var size = ByteRead4(heapchunk, 12 + 8*i);\n            usedlist.push(new HeapBlock(addr, size));\n        }\n\n        // This list may be out-of-order. Sort it by address.\n        usedlist.sort(function(blk1, blk2) {return blk1.addr - blk2.addr;});\n\n        // Create freelist blocks to fill in the gaps.\n        var heapend = heapstart;\n        for (var i = 0; i < usedlist.length; i++) {\n            var addr = usedlist[i].addr;\n            var size = usedlist[i].size;\n            if (addr < heapend || (addr + size) > self.endmem) {\n                fatal_error(\"vm_restore failed: corrupt dynamic heap\");\n            }\n            if (addr > heapend) {\n                freelist.push(new HeapBlock(heapend, addr - heapend));\n            }\n            heapend = addr + size;\n        }\n        if (heapend < self.endmem) {\n            freelist.push(new HeapBlock(heapend, self.endmem - heapend));\n        }\n    }\n\n    ;;;assert_heap_valid(); //assert\n    \n    paste_protected_range(protect);\n    return true;\n}\n\n/* Writes a snapshot of the VM state to a special file (not represented\n   by a fileref -- that's how special it is). The eventaddr is the\n   VM address of the event structure; we'll need it to autorestore\n   properly.\n\n   This looks a lot like vm_save, but we serialize a little differently.\n   We're creating a JSONable object.\n*/\nfunction vm_autosave(eventaddr) {\n    var Dialog = self.Glk.getlibrary('Dialog');\n    \n    if (eventaddr < 0) {\n        /* Delete the autosave. */\n        //qlog('### deleting autosave');\n        Dialog.autosave_write(game_signature, null);\n        return;\n    }\n\n    //var timestart = new Date().getTime(); //###stats\n\n    var opmodes = parse_partial_operand();\n    if (!opmodes)\n        return;\n\n    var snapshot = {};\n\n    /* When the save file is autorestored, the VM will restart the @glk\n       opcode. That means that the Glk argument (the event structure\n       address) must be waiting on the stack. Possibly also the @glk\n       opcode's operands -- these might or might not have come off the\n       stack. */\n\n    var valstack = self.frame.valstack;\n    var origstacklen = valstack.length;\n    /* The event structure address: */\n    valstack.push(eventaddr);\n    if (opmodes.argsop == 8) {\n        /* The number of Glk arguments (1): */\n        valstack.push(1);\n    }\n    if (opmodes.selop == 8) {\n        /* The Glk call selector (0x00C0): */\n        valstack.push(0x00C0);\n    }\n\n    /* Push a temporary callstub which contains the *last* PC -- the address\n       of the @glk(select) invocation. */\n    valstack.push(0, 0, self.prevpc, self.frame.framestart);\n\n    /* Save the RAM, stack, and heap. */\n\n    snapshot.ram = memmap.slice(ramstart);\n    snapshot.endmem = self.endmem;\n    snapshot.pc = self.pc;\n    snapshot.stack = [];\n    for (var i = 0; i < stack.length; i++) {\n        push_serialized_stackframe(stack[i], snapshot.stack);\n    }\n\n    if (heap_is_active()) {\n        snapshot.heapstart = heapstart;\n        snapshot.usedlist = [];\n        for (var i = 0; i < usedlist.length; i++) {\n            snapshot.usedlist.push(usedlist[i].addr);\n            snapshot.usedlist.push(usedlist[i].size);\n        }\n    }\n\n    /* Pop off the temporary stack stuff. */\n    valstack.length = origstacklen;\n\n    /* Save miscellaneous VM things which are not part of a standard\n       save state. */\n    snapshot.stringtable = self.stringtable;\n    snapshot.iosysmode = self.iosysmode;\n    snapshot.iosysrock = self.iosysrock;\n    snapshot.protectstart = self.protectstart;\n    snapshot.protectend = self.protectend;\n    if (self.random_func == srand_get_random && srand_table) {\n        snapshot.srand_table = srand_table.slice(0);\n        snapshot.srand_index1 = srand_index1;\n        snapshot.srand_index2 = srand_index2;\n    }\n    snapshot.accel_params = accel_params.slice(0);\n    snapshot.accel_funcnum_map = {};\n    for (var ix in accel_funcnum_map)\n        snapshot.accel_funcnum_map[ix] = accel_funcnum_map[ix];\n\n    /* Tell the Glk API layer to save its own state and pass it back\n       to us. (This includes the glui32-to-Glk-ID table.) */\n    snapshot.glk = self.Glk.save_allstate();\n\n    /* Write the snapshot into an appropriate location, which depends\n       on the game signature. */\n    Dialog.autosave_write(game_signature, snapshot);\n\n    //var timeend = new Date().getTime(); //###stats\n    //qlog(\"### autosave complete; time = \" + (timeend-timestart) + \" ms\");\n}\n\n/* Load a snapshot of the VM state back in. This is called at the end of\n   vm_setup, replacing the vm_restart call.\n*/\nfunction vm_autorestore(snapshot) {\n\n    memmap = game_image.slice(0, endgamefile);\n    memmap = memmap.slice(0, ramstart).concat(snapshot.ram);\n    self.endmem = snapshot.endmem;\n    self.pc = snapshot.pc;\n\n    stack = [];\n\n    var stackchunk = snapshot.stack.slice(0);\n    while (stackchunk.length) {\n        var frm = pop_deserialized_stackframe(stackchunk);\n        if (!frm) {\n            fatal_error(\"vm_autorestore failed: bad stack frame\");\n        }\n        stack.unshift(frm);\n    }\n    for (var i = 0; i < stack.length; i++) {\n        stack[i].depth = i;\n    }\n    self.frame = stack[stack.length - 1];\n\n    if (snapshot.heapstart === undefined) {\n        heapstart = 0;\n        usedlist = [];\n        freelist = [];\n    }\n    else {\n        heapstart = snapshot.heapstart;\n\n        usedlist = [];\n        for (var ix = 0; ix < snapshot.usedlist.length; ix += 2) {\n            var addr = snapshot.usedlist[ix];\n            var size = snapshot.usedlist[ix+1];\n            usedlist.push(new HeapBlock(addr, size));\n        }\n\n        // This list may be out-of-order. Sort it by address.\n        usedlist.sort(function(blk1, blk2) {return blk1.addr - blk2.addr;});\n\n        // Create freelist blocks to fill in the gaps.\n        freelist = [];\n        var heapend = heapstart;\n        for (var i = 0; i < usedlist.length; i++) {\n            var addr = usedlist[i].addr;\n            var size = usedlist[i].size;\n            if (addr < heapend || (addr + size) > self.endmem) {\n                fatal_error(\"vm_autorestore failed: corrupt dynamic heap\");\n            }\n            if (addr > heapend) {\n                freelist.push(new HeapBlock(heapend, addr - heapend));\n            }\n            heapend = addr + size;\n        }\n        if (heapend < self.endmem) {\n            freelist.push(new HeapBlock(heapend, self.endmem - heapend));\n        }\n    }\n\n    ;;;assert_heap_valid(); //assert\n\n    /* Restore miscellaneous VM things which are not part of a standard\n       save state. */\n    set_string_table(snapshot.stringtable);\n    set_iosys(snapshot.iosysmode, snapshot.iosysrock);\n    self.protectstart = snapshot.protectstart;\n    self.protectend = snapshot.protectend;\n\n    if (snapshot.srand_table === undefined) {\n        set_random(0);\n    }\n    else {\n        set_random(1);\n        srand_table = snapshot.srand_table.slice(0);\n        srand_index1 = snapshot.srand_index1;\n        srand_index2 = snapshot.srand_index2;\n    }\n\n    accel_params = snapshot.accel_params.slice(0);\n    for (var ix in snapshot.accel_funcnum_map) {\n        accel_funcnum_map[ix] = snapshot.accel_funcnum_map[ix];\n        accel_address_map[ix] = self.accel_func_map[accel_funcnum_map[ix]];\n    }\n\n    /* Restore Glk API information. */\n    self.Glk.restore_allstate(snapshot.glk);\n\n    /* Pop the callstub, restoring the PC to the @glk opcode (prevpc). */\n    pop_callstub(0);\n}\n\n/* Pushes a snapshot of the VM state onto the undo stack. If there are too\n   many on the stack, throw away the oldest.\n*/\nfunction vm_saveundo() {\n    ;;;if (memmap.length != self.endmem) {\n    ;;;    fatal_error(\"Memory length was incorrect before saveundo.\"); //assert\n    ;;;}\n\n    var snapshot = {};\n    snapshot.ram = memmap.slice(ramstart);\n    snapshot.endmem = self.endmem;\n    snapshot.pc = self.pc;\n    snapshot.stack = [];\n    for (var i = 0; i < stack.length; i++) {\n        snapshot.stack[i] = clone_stackframe(stack[i]);\n    }\n\n    snapshot.heapstart = heapstart;\n    snapshot.usedlist = usedlist.slice(0);\n    snapshot.freelist = freelist.slice(0);\n\n    undostack.push(snapshot);\n    if (undostack.length > 10) {\n        undostack.shift();\n    }\n}\n\n/* Pops a VM state snapshot from the undo stack (if possible) and restores it.\n   Returns true on success.\n*/\nfunction vm_restoreundo() {\n    if (undostack.length == 0) {\n        return false;\n    }\n    var snapshot = undostack.pop();\n    var protect = copy_protected_range();\n\n    memmap = memmap.slice(0, ramstart).concat(snapshot.ram);\n    self.endmem = snapshot.endmem;\n    stack = snapshot.stack;\n    self.frame = stack[stack.length - 1];\n    self.pc = snapshot.pc;\n\n    heapstart = snapshot.heapstart;\n    usedlist = snapshot.usedlist;\n    freelist = snapshot.freelist;\n    \n    paste_protected_range(protect);\n\n    ;;;if (memmap.length != self.endmem) {\n    ;;;    fatal_error(\"Memory length was incorrect after undo.\"); //assert\n    ;;;}\n    ;;;assert_heap_valid(); //assert\n\n    return true;\n}\n\n/* Checks whether there's a snapshot on the undo stack.\n   Returns true if there is.\n*/\nfunction vm_hasundo() {\n    if (undostack.length == 0) {\n        return false;\n    }\n    return true;\n}\n\n/* Pops the most recent snapshot off the undo stack, if there are any.\n*/\nfunction vm_discardundo() {\n    if (undostack.length == 0) {\n        return;\n    }\n    var snapshot = undostack.pop();\n}\n\nself.vm_save = vm_save;\nself.vm_restore = vm_restore;\nself.vm_saveundo = vm_saveundo;\nself.vm_restoreundo = vm_restoreundo;\nself.vm_hasundo = vm_hasundo;\nself.vm_discardundo = vm_discardundo;\n\n/* Change the size of the memory map. The internal flag should be true \n   only when the heap-allocation system is calling.\n*/\nfunction change_memsize(newlen, internal) {\n    var lx;\n\n    if (newlen == self.endmem)\n        return;\n\n    if ((!internal) && heap_is_active())\n        fatal_error(\"Cannot resize Glulx memory space while heap is active.\");\n    if (newlen < origendmem)\n        fatal_error(\"Cannot resize Glulx memory space smaller than it started.\");\n    if (newlen & 0xFF)\n        fatal_error(\"Can only resize Glulx memory space to a 256-byte boundary.\");\n\n    memmap.length = newlen;\n    if (newlen > self.endmem) {\n        for (lx=self.endmem; lx<newlen; lx++) {\n            memmap[lx] = 0;\n        }\n    }\n\n    self.endmem = newlen;    \n}\nself.change_memsize = change_memsize;\n\n/* Return an object which represents the protected-memory range and its\n   contents. This can later be pasted back into the VM. If there is no\n   protection range, this returns null.\n\n   The idea is that you call this before a restore/restart operation, and\n   then call paste_protected_range() afterwards.\n*/\nfunction copy_protected_range() {\n    if (self.protectstart >= self.protectend)\n        return null;\n\n    var len = self.protectend - self.protectstart;\n    var obj = {\n        start: self.protectstart,\n        end: self.protectend,\n        len: len\n    };\n    var arr = memmap.slice(self.protectstart, self.protectend);\n\n    /* It is legal to protect a range that falls outside of memory; the\n       extra bits are presumed to be zero. */\n    while (arr.length < len)\n        arr.push(0);\n    obj.mem = arr;\n\n    return obj;\n}\n\n/* Paste a protected-memory range into the VM. \n*/\nfunction paste_protected_range(obj) {\n    if (!obj)\n        return;\n\n    var ix, addr;\n    var arr = obj.mem;\n    var start = obj.start;\n    var end = obj.end;\n    if (end > self.endmem)\n        end = self.endmem;\n\n    for (ix=0, addr=start; addr<end; ix++, addr++) {\n        memmap[addr] = arr[ix];\n    }\n}\n\n/* The checksum check. */\nfunction perform_verify() {\n    var imagelen = game_image.length;\n    var ix, newsum, checksum;\n\n    if (imagelen < 0x100 || (imagelen & 0xFF) != 0)\n        return 1;\n    if (imagelen != ByteRead4(game_image, 12))\n        return 1;\n\n    checksum = ByteRead4(game_image, 32);\n    /* Allow for the fact that the checksum is computed with the checksum\n       field zeroed. */\n    newsum = (-checksum) >>>0;\n\n    for (ix=0; ix<imagelen; ix+=4) {\n        newsum = (newsum + ByteRead4(game_image, ix)) >>>0;\n    }\n\n    if (newsum != checksum)\n        return 1;\n\n    return 0;\n}\nself.perform_verify = perform_verify;\n\n/* Return the game image signature. This is used as a fingerprint on save\n   files, to ensure that you can't save in one game and restore in a \n   different one.\n*/\nfunction quixe_get_signature() {\n    return game_signature;\n}\n\n/* Return the internal self object. This gives the caller access to\n   the entire VM state, including memory. So use it wisely.\n*/\nfunction quixe_get_vm_self() {\n    return self;\n}\n\n/* Return whatever information seems useful about execution so far.\n   This is not meant to be super-efficient; it does some counting\n   every time you call it.\n*/\nfunction quixe_get_statistics() {\n    var stat = {\n        game_image_length: game_image.length,\n        total_execution_time: total_execution_time,\n        total_function_calls: total_function_calls,\n        accel_function_calls : accel_function_calls,\n        total_path_calls: total_path_calls,\n        paths_cached: paths_cached,\n        paths_compiled: paths_compiled,\n        strings_cached: strings_cached,\n        strings_compiled: strings_compiled\n    };\n\n    return stat;\n}\n\n/* Heap functions. */\n\nfunction heap_clear() {\n    heapstart = 0;\n    usedlist = [];\n    freelist = [];\n}\n\nfunction heap_is_active() {\n    return (usedlist.length > 0);\n}\n\nfunction heap_get_start() {\n    return heapstart;\n}\n\n/* Constructor: HeapBlock\n\n   We never modify heap blocks, to ensure they can be reused safely across\n   saveundo() and restore().\n*/\nfunction HeapBlock(addr, size) {\n    this.addr = addr;\n    this.size = size;\n    this.end = addr + size;\n}\n\n/* Search list of HeapBlock objects for the given address.\n   If the exact address isn't found, return index of next highest address.\n*/\nfunction heap_binary_search(list, addr) {\n    var low = 0;\n    var high = list.length;\n    while (low < high) {\n        var mid = (low + high) >> 1;\n        if (list[mid].addr < addr) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\nfunction heap_malloc(size) {\n    if (!heap_is_active()) {\n        heapstart = self.endmem;\n    }\n    \n    for (var i = 0, max = freelist.length; i < max; i++) {\n        var freeblock = freelist[i];\n        if (freeblock.size >= size) {\n            // Free block is big enough. Off with its head.\n            if (freeblock.size > size) {\n                freelist[i] = new HeapBlock(freeblock.addr + size, freeblock.size - size);\n            } else {\n                freelist.splice(i, 1);\n            }\n            var pos = heap_binary_search(usedlist, freeblock.addr);\n            usedlist.splice(pos, 0, new HeapBlock(freeblock.addr, size));\n            return freeblock.addr;\n        }\n    }\n\n    // No free block is big enough. Grow the heap.\n    var addr = self.endmem;\n    var rounded_up_size = ((size + 0xFF) & 0xFFFFFF00);\n    change_memsize(self.endmem + rounded_up_size, true);\n    if (rounded_up_size > size) {\n        freelist.push(new HeapBlock(addr + size, rounded_up_size - size));\n    }\n    usedlist.push(new HeapBlock(addr, size));\n    return addr;\n}\nself.heap_malloc = heap_malloc;\n\nfunction heap_free(addr) {\n    var pos = heap_binary_search(usedlist, addr);\n    var block = usedlist[pos];\n    if (!block || block.addr != addr) {\n        fatal_error(\"Tried to free non-existent block\");\n    }\n    usedlist.splice(pos, 1);\n    \n    if (usedlist.length == 0) {\n        // No allocated blocks left. Blow away the whole heap.\n        change_memsize(heapstart, true);\n        heap_clear();\n        return;\n    }\n\n    // Find the correct position to insert this block into the freelist.\n    pos = heap_binary_search(freelist, addr);\n\n    // If the next block is free, merge with it.\n    var next = freelist[pos];\n    if (next && next.addr == block.end) {\n        block = new HeapBlock(addr, block.size + next.size);\n        freelist.splice(pos, 1);\n    }\n    \n    // If the previous block is free, merge with it.\n    var prev = freelist[pos - 1];\n    if (prev && prev.end == block.addr) {\n        block = new HeapBlock(prev.addr, prev.size + block.size);\n        freelist.splice(pos - 1, 1);\n        pos -= 1;\n    }\n    \n    freelist.splice(pos, 0, block);\n}\nself.heap_free = heap_free;\n\n/* Check that the heap state is consistent. This is slow, so we only\n   call it in debug assertions.\n*/\nfunction assert_heap_valid() {\n    //qlog(\"### heap check: heapstart \" + heapstart + \", \" + usedlist.length + \" used, \" + freelist.length + \" free\");\n    if (!heap_is_active()) {\n        if (heapstart != 0)\n            fatal_error(\"Heap inconsistency: heapstart nonzero\");\n\n        if (usedlist.length > 0)\n            fatal_error(\"Heap inconsistency: usedlist nonempty\");\n\n        if (freelist.length > 0)\n            fatal_error(\"Heap inconsistency: usedlist nonempty\");\n\n        return;\n    }\n\n    if (heapstart == 0)\n        fatal_error(\"Heap inconsistency: heapstart is zero\");\n\n    var addr = heapstart;\n    var upos = 0, fpos = 0;\n    while (upos < usedlist.length || fpos < freelist.length) {\n        var u = usedlist[upos];\n        var f = freelist[fpos];\n        if (u && u.addr == addr) {\n            //qlog(\"###...\"+u.addr+\" (\"+u.size+\" alloc)\");\n            addr += u.size;\n            upos++;\n        } else if (f && f.addr == addr) {\n            //qlog(\"###...\"+f.addr+\" (\"+f.size+\" free)\");\n            addr += f.size;\n            fpos++;\n        } else {\n            fatal_error(\"Heap inconsistency: no block at address \" + addr);\n        }\n    }\n    \n    if (addr != self.endmem)\n        fatal_error(\"Heap inconsistency: overrun at end of heap\");\n}\nself.assert_heap_valid = assert_heap_valid;\n\nvar debuginfo = {\n    map: {},\n    functions: [],\n    functionmap: {}\n};\n\nfunction quixe_get_debuginfo() {\n    return debuginfo;\n}\n\nfunction parse_inform_debug_data() {\n    if (!self.GiLoad)\n        return;\n    var buf = self.GiLoad.get_debug_info();\n    if (!buf)\n        return;\n    var done;\n    var pos, oldpos;\n    \n    if (!(buf[0] == 0xDE && buf[1] == 0xBF && buf[2] == 0 && buf[3] == 0)) {\n        qlog(\"Dbug chunk did not contain an (old-style) Inform gameinfo.dbg file\");\n        return;\n    }\n    \n    var informversion = (buf[4]<<8) | (buf[5]);\n    pos = 6;\n    done = false;\n\n    while (!done) {\n        var rectype = buf[pos++];\n\n        switch (rectype) {\n            case 0:\n            case undefined:\n                done = true;\n                break;\n\n            case 1: /* file */\n                var filenum = buf[pos++];\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var includename = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var filename = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                break;\n\n            case 2: /* class */\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var classname = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                var linestart = buf.slice(pos, pos+4);\n                pos += 4;\n                var lineend = buf.slice(pos, pos+4);\n                pos += 4;\n                break;\n\n            case 3: /* object */\n                var objnum = (buf[pos++]<<8) | (buf[pos++]);\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var objname = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                var linestart = buf.slice(pos, pos+4);\n                pos += 4;\n                var lineend = buf.slice(pos, pos+4);\n                pos += 4;\n                break;\n\n            case 4: /* global */\n                var num = (buf[pos++]);\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                break;\n\n            case 5: /* attribute */\n                var num = (buf[pos++]<<8) | (buf[pos++]);\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                break;\n\n            case 6: /* property */\n                var num = (buf[pos++]<<8) | (buf[pos++]);\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                break;\n\n            case 7: /* fake action */\n                var num = (buf[pos++]<<8) | (buf[pos++]);\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                break;\n\n            case 8: /* action */\n                var num = (buf[pos++]<<8) | (buf[pos++]);\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                break;\n\n            case 9: /* header */\n                pos += 64;\n                break;\n\n            case 10: /* sequence point */\n                var funcnum = (buf[pos++]<<8) | (buf[pos++]);\n                var seqcount = (buf[pos++]<<8) | (buf[pos++]);\n                pos += seqcount * 6;\n                break;\n\n            case 11: /* function */\n                var funcnum = (buf[pos++]<<8) | (buf[pos++]);\n                var line = buf.slice(pos, pos+4);\n                pos += 4;\n                var funcaddr = (buf[pos++]<<16) | (buf[pos++]<<8) | (buf[pos++]);\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var funcname = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                var locals = [];\n                while (buf[pos]) {\n                    oldpos = pos; while (buf[pos]) { pos++ };\n                    var locname = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                    pos++;\n                    locals.push(locname);\n                }\n                pos++;\n                debuginfo.functions.push({ \n                    num:funcnum, name:funcname, addr:funcaddr,\n                    locals:locals });\n                break;\n\n            case 12: /* array */\n                var arrayaddr = (buf[pos++]<<8) | (buf[pos++]);\n                oldpos = pos; while (buf[pos]) { pos++ };\n                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                pos++;\n                break;\n\n            case 13: /* map */\n                while (buf[pos]) {\n                    oldpos = pos; while (buf[pos]) { pos++ };\n                    var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));\n                    pos++;\n                    var addr = (buf[pos++]<<16) | (buf[pos++]<<8) | (buf[pos++]);\n                    debuginfo.map[name] = addr;\n                }\n                pos++;\n                break;\n\n            case 14: /* function end */\n                var funcnum = (buf[pos++]<<8) | (buf[pos++]);\n                var line = buf.slice(pos, pos+4);\n                pos += 4;\n                var endaddr = (buf[pos++]<<16) | (buf[pos++]<<8) | (buf[pos++]);\n                break;                \n\n            default:\n                qlog(\"Unknown record type in debug data: \" + rectype);\n                done = true;\n                break;\n        }\n    }\n\n    var funcbase = debuginfo.map[\"code area\"];\n    if (funcbase) {\n        var ix;\n        for (ix=0; ix<debuginfo.functions.length; ix++) {\n            var func = debuginfo.functions[ix];\n            debuginfo.functionmap[funcbase+func.addr] = func;\n        }\n    }\n}\n\n/* Dummy value, returned by path functions on @quit or when leave_function()\n   pops the top-level stack frame. */\nself.VMStopped = { dummy: 'The top-level function has returned.' };\n\n/* Begin executing code, compiling as necessary. When glk_select is invoked,\n   or the game ends, this calls self.Glk.update() and exits.\n*/\nfunction execute_loop() {\n    var vmfunc, pathtab, path;\n    var pathstart, pathend;\n\n    if (self.resumefuncop) {\n        //qlog(\"### at resume time, storing value \" + self.resumevalue + \" at funcop \" + self.resumefuncop.key);\n        store_operand_by_funcop(self.resumefuncop, self.resumevalue);\n        self.resumefuncop = null;\n        self.resumevalue = 0;\n    }\n\n    pathstart = new Date().getTime(); //###stats\n\n    while (!self.done_executing) {\n        //qlog(\"### pc now \" + self.pc.toString(16));\n        vmfunc = self.frame.vmfunc;\n        pathtab = vmfunc[self.iosysmode];\n        path = pathtab[self.pc];\n        if (path === undefined) {\n            vmfunc.pathaddrs[self.pc] = true;\n            path = compile_path(vmfunc, self.pc, self.iosysmode);\n            paths_compiled++; //###stats\n            if (self.pc < ramstart) {\n                pathtab[self.pc] = path;\n                paths_cached++; //###stats\n            }\n        }\n        total_path_calls++; //###stats\n        var res = path(self);\n        if (res === self.VMStopped) {\n            self.done_executing = true;\n            self.vm_stopped = true;\n        }\n    }\n\n    pathend = new Date().getTime(); //###stats\n    total_execution_time += (pathend-pathstart) / 1000.0; //###stats\n\n    if (self.vm_stopped) {\n        /* If the library resumes us after exiting, we'll call glk_exit()\n           again. That's the library's problem. */\n        self.Glk.glk_exit();\n    }\n\n    self.Glk.update();\n\n    if (opt_log_execution_time) {\n        qlog(\"event executed in \" + (pathend-pathstart) + \" ms\");\n    }\n}\n\n/* End of Quixe namespace function. Return the object which will\n   become the Quixe global. */\nreturn {\n    classname: 'Quixe',\n    version: '2.2.1', /* Quixe version */\n    init: quixe_init,\n    inited: quixe_inited,\n    getlibrary: quixe_getlibrary,\n    \n    start: quixe_start,\n    resume: quixe_resume,\n    get_signature: quixe_get_signature,\n    get_vm_internals: quixe_get_vm_self,\n    get_statistics: quixe_get_statistics,\n    get_debuginfo: quixe_get_debuginfo,\n\n    ReadByte: ReadArgByte,\n    WriteByte: WriteArgByte,\n    ReadWord: ReadArgWord,\n    WriteWord: WriteArgWord,\n    ReadStructField: ReadStructField,\n    WriteStructField: WriteStructField,\n    SetResumeStore: SetResumeStore,\n\n    do_autosave: vm_autosave\n};\n\n};\n\n/* Quixe is an instance of QuixeClass, ready to init. */\nvar Quixe = new QuixeClass();\n\n// Node-compatible behavior\ntry { exports.Quixe = Quixe; exports.QuixeClass = QuixeClass; } catch (ex) {};\n\n/* End of Quixe library. */\n", "'use strict';\n\n/* GiDispa -- a GlkAPI dispatch layer for Quixe\n * Designed by Andrew Plotkin <erkyrath@eblong.com>\n * <http://eblong.com/zarf/glulx/quixe/>\n * \n * This Javascript library is copyright 2010-2022 by Andrew Plotkin.\n * It is distributed under the MIT license; see the \"LICENSE\" file.\n *\n * This is the code layer that sits in between Quixe and GlkAPI. It provides\n * Glk entry points for every Glk call; Quixe's @glk opcode invokes these. It\n * also translates between Glk opaque objects (windows, streams, filerefs, etc)\n * to Quixe 32-bit numeric IDs.\n *\n * (A few calls, or arguments of calls, are marked \"for autosave/autorestore\n * only\". These exist for the purpose of getting a game displayed in a known\n * state, which is rather more complicated than the usual situation of \n * letting a game start up and run.)\n */\n\n//### Should split WriteWord into a WriteRefWord and WriteArrayWord,\n//### with different handling of -1. Etc.\n\n/* All state is contained in GiDispaClass.\n\n   Within this namespace, \"self\" is an internal secondary namespace. Many\n   of our private variables and functions will be copied into \"self\".\n   The \"self\" will be available inside compiled functions, and will give\n   them access to its contents.\n*/\n/* We find that .bind()-build functions are slower than the original,\n   particularly on Firefox. However, I don't know another way around the\n   \"dynamic variable binding in eval()\" issue, which is *also* an \n   optimization problem. At least GiDispa functions aren't (usually) called \n   that often in (normal) gameplay.\n*/\n\nvar GiDispaClass = function() {\n\n/* Create the \"self\" object. */\nvar self = {};\n\n/* self.VM will store the VM interface object. GiDispa needs this to load and\n   store reference arguments, from and to VM memory. When this layer is used\n   with Quixe, VM is just an alias for the Quixe interface object.\n*/\nself.VM = null;\nself.Glk = null;\n    \n/* Set the VM interface object. This is called by the Glk library, before\n   the VM starts running. \n*/\nfunction gidispa_init(options) {\n    self.VM = options.vm;\n    self.Glk = options.io;\n}\n\n/* Has this module been inited? */\nfunction gidispa_inited() {\n    return (self.VM != null);\n}\n\nfunction gidispa_getlibrary(val) {\n    switch (val) {\n        case 'VM': return self.VM;\n        case 'Glk': return self.Glk;\n    }\n    /* Unrecognized library name. */\n    return null;\n}\n    \n/* A table of the Glk classes, and their index numbers. This is derived from\n   gi_dispa.c, although it's too simple to bother auto-generating.\n*/\nvar class_defs = {\n    0: 'window',\n    1: 'stream',\n    2: 'fileref',\n    3: 'schannel'\n};\n\n/* FuncSpec is a data representation of a Glk function's prototype.\n   The table of FuncSpecs is generated, ultimately, from the Glk\n   prototype description strings in gi_dispa.c.\n*/\nfunction FuncSpec(id, name, proto) {\n    this.id = id;\n    this.name = name;\n    this.proto = proto;\n}\n\n/* A bunch of data classes, used by FuncSpec. */\n\nfunction Prototype(args, retarg) {\n    this.args = args;\n    this.retarg = retarg;\n}\nfunction ArgString() { \n    this.macro = 'Byte';\n    this.refsize = 1;\n    this.serialize = function() {\n        return { type:'ArgString' };\n    };\n}\nfunction ArgUnicode() { \n    this.macro = 'Word';\n    this.refsize = 4;\n    this.serialize = function() {\n        return { type:'ArgUnicode' };\n    };\n}\nfunction ArgChar(signed) {\n    this.signed = signed;\n    this.macro = 'Byte';\n    this.refsize = 1;\n    /* Note that in build_function(), we use the literal field, so\n       'arg_char_unsigned' appears for the \"char native\" case. This is\n       okay, since we only use arg.signed as a condition at that point. */\n    this.literal = (signed ? 'arg_char_signed' : 'arg_char_unsigned');\n    this.serialize = function() {\n        return { type:'ArgChar', signed:signed };\n    };\n}\nfunction ArgInt(signed) {\n    this.signed = signed;\n    this.macro = 'Word';\n    this.refsize = 4;\n    this.literal = (signed ? 'arg_int_signed' : 'arg_int_unsigned');\n    this.serialize = function() {\n        return { type:'ArgInt', signed:signed };\n    };\n}\nfunction ArgClass(name) {\n    this.name = name;\n    this.macro = 'Word';\n    this.refsize = 4;\n}\nfunction ArgStruct(form) {\n    this.form = form;\n}\nfunction ArgRef(arg, passin, passout, nonnull) {\n    this.arg = arg;\n    this.passin = passin;\n    this.passout = passout;\n    this.nonnull = nonnull;\n}\nfunction ArgArray(arg, retained, passin, passout, nonnull) {\n    this.arg = arg;\n    this.retained = retained;\n    this.passin = passin;\n    this.passout = passout;\n    this.nonnull = nonnull;\n}\n\n/* Turn the (JSONable) object generated by ArgX.serialize() back into\n   the ArgX. */\nfunction arg_deserialize(obj) {\n    switch (obj.type) {\n    case 'ArgString':\n        return new ArgString();\n    case 'ArgUnicode':\n        return new ArgUnicode();\n    case 'ArgInt':\n        if (obj.signed)\n            return arg_int_signed;\n        else\n            return arg_int_unsigned;\n    case 'ArgChar':\n        if (obj.signed === null)\n            return arg_char_native;\n        else if (obj.signed)\n            return arg_char_signed;\n        else\n            return arg_char_unsigned;\n    /* The other Arg types should not show up here. I hope. */\n    }\n    throw new Error('arg_deserialize: unknown type: ' + obj.type);\n}\n\n// The following table is auto-generated by parse_dispatch.py.\n// Generated for Glk API version 0.7.4\n/* Some literal ArgInt and ArgChar objects, used to speed\n   up the proto_map construction. These globals are also\n   used in the build_function() call in gi_dispa.js. */\nvar arg_int_unsigned = new ArgInt(false);\nvar arg_int_signed = new ArgInt(true);\nvar arg_char_unsigned = new ArgChar(false);\nvar arg_char_native = new ArgChar(null);\nvar arg_char_signed = new ArgChar(true);\nvar arg_class_window = new ArgClass(\"window\");\nvar arg_class_stream = new ArgClass(\"stream\");\nvar arg_class_fileref = new ArgClass(\"fileref\");\nvar arg_class_schannel = new ArgClass(\"schannel\");\nvar proto_map = {\n// 1 (0x001): exit - 0:\n1 : new FuncSpec(1, \"exit\", new Prototype([], null)),\n// 3 (0x003): tick - 0:\n3 : new FuncSpec(3, \"tick\", new Prototype([], null)),\n// 4 (0x004): gestalt - 3IuIu:Iu\n4 : new FuncSpec(4, \"gestalt\", new Prototype([arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 5 (0x005): gestalt_ext - 4IuIu&#Iu:Iu\n5 : new FuncSpec(5, \"gestalt_ext\", new Prototype([arg_int_unsigned, arg_int_unsigned, new ArgArray(arg_int_unsigned, false, true, true, false)], new ArgRef(arg_int_unsigned, false, true, true))),\n// 32 (0x020): window_iterate - 3Qa<Iu:Qa\n32 : new FuncSpec(32, \"window_iterate\", new Prototype([arg_class_window, new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_class_window, false, true, true))),\n// 33 (0x021): window_get_rock - 2Qa:Iu\n33 : new FuncSpec(33, \"window_get_rock\", new Prototype([arg_class_window], new ArgRef(arg_int_unsigned, false, true, true))),\n// 34 (0x022): window_get_root - 1:Qa\n34 : new FuncSpec(34, \"window_get_root\", new Prototype([], new ArgRef(arg_class_window, false, true, true))),\n// 35 (0x023): window_open - 6QaIuIuIuIu:Qa\n35 : new FuncSpec(35, \"window_open\", new Prototype([arg_class_window, arg_int_unsigned, arg_int_unsigned, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_window, false, true, true))),\n// 36 (0x024): window_close - 2Qa<[2IuIu]:\n36 : new FuncSpec(36, \"window_close\", new Prototype([arg_class_window, new ArgRef(new ArgStruct(new Prototype([arg_int_unsigned, arg_int_unsigned], null)), false, true, false)], null)),\n// 37 (0x025): window_get_size - 3Qa<Iu<Iu:\n37 : new FuncSpec(37, \"window_get_size\", new Prototype([arg_class_window, new ArgRef(arg_int_unsigned, false, true, false), new ArgRef(arg_int_unsigned, false, true, false)], null)),\n// 38 (0x026): window_set_arrangement - 4QaIuIuQa:\n38 : new FuncSpec(38, \"window_set_arrangement\", new Prototype([arg_class_window, arg_int_unsigned, arg_int_unsigned, arg_class_window], null)),\n// 39 (0x027): window_get_arrangement - 4Qa<Iu<Iu<Qa:\n39 : new FuncSpec(39, \"window_get_arrangement\", new Prototype([arg_class_window, new ArgRef(arg_int_unsigned, false, true, false), new ArgRef(arg_int_unsigned, false, true, false), new ArgRef(arg_class_window, false, true, false)], null)),\n// 40 (0x028): window_get_type - 2Qa:Iu\n40 : new FuncSpec(40, \"window_get_type\", new Prototype([arg_class_window], new ArgRef(arg_int_unsigned, false, true, true))),\n// 41 (0x029): window_get_parent - 2Qa:Qa\n41 : new FuncSpec(41, \"window_get_parent\", new Prototype([arg_class_window], new ArgRef(arg_class_window, false, true, true))),\n// 42 (0x02A): window_clear - 1Qa:\n42 : new FuncSpec(42, \"window_clear\", new Prototype([arg_class_window], null)),\n// 43 (0x02B): window_move_cursor - 3QaIuIu:\n43 : new FuncSpec(43, \"window_move_cursor\", new Prototype([arg_class_window, arg_int_unsigned, arg_int_unsigned], null)),\n// 44 (0x02C): window_get_stream - 2Qa:Qb\n44 : new FuncSpec(44, \"window_get_stream\", new Prototype([arg_class_window], new ArgRef(arg_class_stream, false, true, true))),\n// 45 (0x02D): window_set_echo_stream - 2QaQb:\n45 : new FuncSpec(45, \"window_set_echo_stream\", new Prototype([arg_class_window, arg_class_stream], null)),\n// 46 (0x02E): window_get_echo_stream - 2Qa:Qb\n46 : new FuncSpec(46, \"window_get_echo_stream\", new Prototype([arg_class_window], new ArgRef(arg_class_stream, false, true, true))),\n// 47 (0x02F): set_window - 1Qa:\n47 : new FuncSpec(47, \"set_window\", new Prototype([arg_class_window], null)),\n// 48 (0x030): window_get_sibling - 2Qa:Qa\n48 : new FuncSpec(48, \"window_get_sibling\", new Prototype([arg_class_window], new ArgRef(arg_class_window, false, true, true))),\n// 64 (0x040): stream_iterate - 3Qb<Iu:Qb\n64 : new FuncSpec(64, \"stream_iterate\", new Prototype([arg_class_stream, new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_class_stream, false, true, true))),\n// 65 (0x041): stream_get_rock - 2Qb:Iu\n65 : new FuncSpec(65, \"stream_get_rock\", new Prototype([arg_class_stream], new ArgRef(arg_int_unsigned, false, true, true))),\n// 66 (0x042): stream_open_file - 4QcIuIu:Qb\n66 : new FuncSpec(66, \"stream_open_file\", new Prototype([arg_class_fileref, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),\n// 67 (0x043): stream_open_memory - 4&#!CnIuIu:Qb\n67 : new FuncSpec(67, \"stream_open_memory\", new Prototype([new ArgArray(arg_char_native, true, true, true, false), arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),\n// 68 (0x044): stream_close - 2Qb<[2IuIu]:\n68 : new FuncSpec(68, \"stream_close\", new Prototype([arg_class_stream, new ArgRef(new ArgStruct(new Prototype([arg_int_unsigned, arg_int_unsigned], null)), false, true, false)], null)),\n// 69 (0x045): stream_set_position - 3QbIsIu:\n69 : new FuncSpec(69, \"stream_set_position\", new Prototype([arg_class_stream, arg_int_signed, arg_int_unsigned], null)),\n// 70 (0x046): stream_get_position - 2Qb:Iu\n70 : new FuncSpec(70, \"stream_get_position\", new Prototype([arg_class_stream], new ArgRef(arg_int_unsigned, false, true, true))),\n// 71 (0x047): stream_set_current - 1Qb:\n71 : new FuncSpec(71, \"stream_set_current\", new Prototype([arg_class_stream], null)),\n// 72 (0x048): stream_get_current - 1:Qb\n72 : new FuncSpec(72, \"stream_get_current\", new Prototype([], new ArgRef(arg_class_stream, false, true, true))),\n// 73 (0x049): stream_open_resource - 3IuIu:Qb\n73 : new FuncSpec(73, \"stream_open_resource\", new Prototype([arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),\n// 96 (0x060): fileref_create_temp - 3IuIu:Qc\n96 : new FuncSpec(96, \"fileref_create_temp\", new Prototype([arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_fileref, false, true, true))),\n// 97 (0x061): fileref_create_by_name - 4IuSIu:Qc\n97 : new FuncSpec(97, \"fileref_create_by_name\", new Prototype([arg_int_unsigned, new ArgString(), arg_int_unsigned], new ArgRef(arg_class_fileref, false, true, true))),\n// 98 (0x062): fileref_create_by_prompt - 4IuIuIu:Qc\n98 : new FuncSpec(98, \"fileref_create_by_prompt\", new Prototype([arg_int_unsigned, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_fileref, false, true, true))),\n// 99 (0x063): fileref_destroy - 1Qc:\n99 : new FuncSpec(99, \"fileref_destroy\", new Prototype([arg_class_fileref], null)),\n// 100 (0x064): fileref_iterate - 3Qc<Iu:Qc\n100 : new FuncSpec(100, \"fileref_iterate\", new Prototype([arg_class_fileref, new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_class_fileref, false, true, true))),\n// 101 (0x065): fileref_get_rock - 2Qc:Iu\n101 : new FuncSpec(101, \"fileref_get_rock\", new Prototype([arg_class_fileref], new ArgRef(arg_int_unsigned, false, true, true))),\n// 102 (0x066): fileref_delete_file - 1Qc:\n102 : new FuncSpec(102, \"fileref_delete_file\", new Prototype([arg_class_fileref], null)),\n// 103 (0x067): fileref_does_file_exist - 2Qc:Iu\n103 : new FuncSpec(103, \"fileref_does_file_exist\", new Prototype([arg_class_fileref], new ArgRef(arg_int_unsigned, false, true, true))),\n// 104 (0x068): fileref_create_from_fileref - 4IuQcIu:Qc\n104 : new FuncSpec(104, \"fileref_create_from_fileref\", new Prototype([arg_int_unsigned, arg_class_fileref, arg_int_unsigned], new ArgRef(arg_class_fileref, false, true, true))),\n// 128 (0x080): put_char - 1Cu:\n128 : new FuncSpec(128, \"put_char\", new Prototype([arg_char_unsigned], null)),\n// 129 (0x081): put_char_stream - 2QbCu:\n129 : new FuncSpec(129, \"put_char_stream\", new Prototype([arg_class_stream, arg_char_unsigned], null)),\n// 130 (0x082): put_string - 1S:\n130 : new FuncSpec(130, \"put_string\", new Prototype([new ArgString()], null)),\n// 131 (0x083): put_string_stream - 2QbS:\n131 : new FuncSpec(131, \"put_string_stream\", new Prototype([arg_class_stream, new ArgString()], null)),\n// 132 (0x084): put_buffer - 1>+#Cn:\n132 : new FuncSpec(132, \"put_buffer\", new Prototype([new ArgArray(arg_char_native, false, true, false, true)], null)),\n// 133 (0x085): put_buffer_stream - 2Qb>+#Cn:\n133 : new FuncSpec(133, \"put_buffer_stream\", new Prototype([arg_class_stream, new ArgArray(arg_char_native, false, true, false, true)], null)),\n// 134 (0x086): set_style - 1Iu:\n134 : new FuncSpec(134, \"set_style\", new Prototype([arg_int_unsigned], null)),\n// 135 (0x087): set_style_stream - 2QbIu:\n135 : new FuncSpec(135, \"set_style_stream\", new Prototype([arg_class_stream, arg_int_unsigned], null)),\n// 144 (0x090): get_char_stream - 2Qb:Is\n144 : new FuncSpec(144, \"get_char_stream\", new Prototype([arg_class_stream], new ArgRef(arg_int_signed, false, true, true))),\n// 145 (0x091): get_line_stream - 3Qb<+#Cn:Iu\n145 : new FuncSpec(145, \"get_line_stream\", new Prototype([arg_class_stream, new ArgArray(arg_char_native, false, false, true, true)], new ArgRef(arg_int_unsigned, false, true, true))),\n// 146 (0x092): get_buffer_stream - 3Qb<+#Cn:Iu\n146 : new FuncSpec(146, \"get_buffer_stream\", new Prototype([arg_class_stream, new ArgArray(arg_char_native, false, false, true, true)], new ArgRef(arg_int_unsigned, false, true, true))),\n// 160 (0x0A0): char_to_lower - 2Cu:Cu\n160 : new FuncSpec(160, \"char_to_lower\", new Prototype([arg_char_unsigned], new ArgRef(arg_char_unsigned, false, true, true))),\n// 161 (0x0A1): char_to_upper - 2Cu:Cu\n161 : new FuncSpec(161, \"char_to_upper\", new Prototype([arg_char_unsigned], new ArgRef(arg_char_unsigned, false, true, true))),\n// 176 (0x0B0): stylehint_set - 4IuIuIuIs:\n176 : new FuncSpec(176, \"stylehint_set\", new Prototype([arg_int_unsigned, arg_int_unsigned, arg_int_unsigned, arg_int_signed], null)),\n// 177 (0x0B1): stylehint_clear - 3IuIuIu:\n177 : new FuncSpec(177, \"stylehint_clear\", new Prototype([arg_int_unsigned, arg_int_unsigned, arg_int_unsigned], null)),\n// 178 (0x0B2): style_distinguish - 4QaIuIu:Iu\n178 : new FuncSpec(178, \"style_distinguish\", new Prototype([arg_class_window, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 179 (0x0B3): style_measure - 5QaIuIu<Iu:Iu\n179 : new FuncSpec(179, \"style_measure\", new Prototype([arg_class_window, arg_int_unsigned, arg_int_unsigned, new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_int_unsigned, false, true, true))),\n// 192 (0x0C0): select - 1<+[4IuQaIuIu]:\n192 : new FuncSpec(192, \"select\", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_unsigned, arg_class_window, arg_int_unsigned, arg_int_unsigned], null)), false, true, true)], null)),\n// 193 (0x0C1): select_poll - 1<+[4IuQaIuIu]:\n193 : new FuncSpec(193, \"select_poll\", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_unsigned, arg_class_window, arg_int_unsigned, arg_int_unsigned], null)), false, true, true)], null)),\n// 208 (0x0D0): request_line_event - 3Qa&+#!CnIu:\n208 : new FuncSpec(208, \"request_line_event\", new Prototype([arg_class_window, new ArgArray(arg_char_native, true, true, true, true), arg_int_unsigned], null)),\n// 209 (0x0D1): cancel_line_event - 2Qa<[4IuQaIuIu]:\n209 : new FuncSpec(209, \"cancel_line_event\", new Prototype([arg_class_window, new ArgRef(new ArgStruct(new Prototype([arg_int_unsigned, arg_class_window, arg_int_unsigned, arg_int_unsigned], null)), false, true, false)], null)),\n// 210 (0x0D2): request_char_event - 1Qa:\n210 : new FuncSpec(210, \"request_char_event\", new Prototype([arg_class_window], null)),\n// 211 (0x0D3): cancel_char_event - 1Qa:\n211 : new FuncSpec(211, \"cancel_char_event\", new Prototype([arg_class_window], null)),\n// 212 (0x0D4): request_mouse_event - 1Qa:\n212 : new FuncSpec(212, \"request_mouse_event\", new Prototype([arg_class_window], null)),\n// 213 (0x0D5): cancel_mouse_event - 1Qa:\n213 : new FuncSpec(213, \"cancel_mouse_event\", new Prototype([arg_class_window], null)),\n// 214 (0x0D6): request_timer_events - 1Iu:\n214 : new FuncSpec(214, \"request_timer_events\", new Prototype([arg_int_unsigned], null)),\n// 224 (0x0E0): image_get_info - 4Iu<Iu<Iu:Iu\n224 : new FuncSpec(224, \"image_get_info\", new Prototype([arg_int_unsigned, new ArgRef(arg_int_unsigned, false, true, false), new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_int_unsigned, false, true, true))),\n// 225 (0x0E1): image_draw - 5QaIuIsIs:Iu\n225 : new FuncSpec(225, \"image_draw\", new Prototype([arg_class_window, arg_int_unsigned, arg_int_signed, arg_int_signed], new ArgRef(arg_int_unsigned, false, true, true))),\n// 226 (0x0E2): image_draw_scaled - 7QaIuIsIsIuIu:Iu\n226 : new FuncSpec(226, \"image_draw_scaled\", new Prototype([arg_class_window, arg_int_unsigned, arg_int_signed, arg_int_signed, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 232 (0x0E8): window_flow_break - 1Qa:\n232 : new FuncSpec(232, \"window_flow_break\", new Prototype([arg_class_window], null)),\n// 233 (0x0E9): window_erase_rect - 5QaIsIsIuIu:\n233 : new FuncSpec(233, \"window_erase_rect\", new Prototype([arg_class_window, arg_int_signed, arg_int_signed, arg_int_unsigned, arg_int_unsigned], null)),\n// 234 (0x0EA): window_fill_rect - 6QaIuIsIsIuIu:\n234 : new FuncSpec(234, \"window_fill_rect\", new Prototype([arg_class_window, arg_int_unsigned, arg_int_signed, arg_int_signed, arg_int_unsigned, arg_int_unsigned], null)),\n// 235 (0x0EB): window_set_background_color - 2QaIu:\n235 : new FuncSpec(235, \"window_set_background_color\", new Prototype([arg_class_window, arg_int_unsigned], null)),\n// 240 (0x0F0): schannel_iterate - 3Qd<Iu:Qd\n240 : new FuncSpec(240, \"schannel_iterate\", new Prototype([arg_class_schannel, new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_class_schannel, false, true, true))),\n// 241 (0x0F1): schannel_get_rock - 2Qd:Iu\n241 : new FuncSpec(241, \"schannel_get_rock\", new Prototype([arg_class_schannel], new ArgRef(arg_int_unsigned, false, true, true))),\n// 242 (0x0F2): schannel_create - 2Iu:Qd\n242 : new FuncSpec(242, \"schannel_create\", new Prototype([arg_int_unsigned], new ArgRef(arg_class_schannel, false, true, true))),\n// 243 (0x0F3): schannel_destroy - 1Qd:\n243 : new FuncSpec(243, \"schannel_destroy\", new Prototype([arg_class_schannel], null)),\n// 244 (0x0F4): schannel_create_ext - 3IuIu:Qd\n244 : new FuncSpec(244, \"schannel_create_ext\", new Prototype([arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_schannel, false, true, true))),\n// 247 (0x0F7): schannel_play_multi - 4>+#Qd>+#IuIu:Iu\n247 : new FuncSpec(247, \"schannel_play_multi\", new Prototype([new ArgArray(arg_class_schannel, false, true, false, true), new ArgArray(arg_int_unsigned, false, true, false, true), arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 248 (0x0F8): schannel_play - 3QdIu:Iu\n248 : new FuncSpec(248, \"schannel_play\", new Prototype([arg_class_schannel, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 249 (0x0F9): schannel_play_ext - 5QdIuIuIu:Iu\n249 : new FuncSpec(249, \"schannel_play_ext\", new Prototype([arg_class_schannel, arg_int_unsigned, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 250 (0x0FA): schannel_stop - 1Qd:\n250 : new FuncSpec(250, \"schannel_stop\", new Prototype([arg_class_schannel], null)),\n// 251 (0x0FB): schannel_set_volume - 2QdIu:\n251 : new FuncSpec(251, \"schannel_set_volume\", new Prototype([arg_class_schannel, arg_int_unsigned], null)),\n// 252 (0x0FC): sound_load_hint - 2IuIu:\n252 : new FuncSpec(252, \"sound_load_hint\", new Prototype([arg_int_unsigned, arg_int_unsigned], null)),\n// 253 (0x0FD): schannel_set_volume_ext - 4QdIuIuIu:\n253 : new FuncSpec(253, \"schannel_set_volume_ext\", new Prototype([arg_class_schannel, arg_int_unsigned, arg_int_unsigned, arg_int_unsigned], null)),\n// 254 (0x0FE): schannel_pause - 1Qd:\n254 : new FuncSpec(254, \"schannel_pause\", new Prototype([arg_class_schannel], null)),\n// 255 (0x0FF): schannel_unpause - 1Qd:\n255 : new FuncSpec(255, \"schannel_unpause\", new Prototype([arg_class_schannel], null)),\n// 256 (0x100): set_hyperlink - 1Iu:\n256 : new FuncSpec(256, \"set_hyperlink\", new Prototype([arg_int_unsigned], null)),\n// 257 (0x101): set_hyperlink_stream - 2QbIu:\n257 : new FuncSpec(257, \"set_hyperlink_stream\", new Prototype([arg_class_stream, arg_int_unsigned], null)),\n// 258 (0x102): request_hyperlink_event - 1Qa:\n258 : new FuncSpec(258, \"request_hyperlink_event\", new Prototype([arg_class_window], null)),\n// 259 (0x103): cancel_hyperlink_event - 1Qa:\n259 : new FuncSpec(259, \"cancel_hyperlink_event\", new Prototype([arg_class_window], null)),\n// 288 (0x120): buffer_to_lower_case_uni - 3&+#IuIu:Iu\n288 : new FuncSpec(288, \"buffer_to_lower_case_uni\", new Prototype([new ArgArray(arg_int_unsigned, false, true, true, true), arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 289 (0x121): buffer_to_upper_case_uni - 3&+#IuIu:Iu\n289 : new FuncSpec(289, \"buffer_to_upper_case_uni\", new Prototype([new ArgArray(arg_int_unsigned, false, true, true, true), arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 290 (0x122): buffer_to_title_case_uni - 4&+#IuIuIu:Iu\n290 : new FuncSpec(290, \"buffer_to_title_case_uni\", new Prototype([new ArgArray(arg_int_unsigned, false, true, true, true), arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 291 (0x123): buffer_canon_decompose_uni - 3&+#IuIu:Iu\n291 : new FuncSpec(291, \"buffer_canon_decompose_uni\", new Prototype([new ArgArray(arg_int_unsigned, false, true, true, true), arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 292 (0x124): buffer_canon_normalize_uni - 3&+#IuIu:Iu\n292 : new FuncSpec(292, \"buffer_canon_normalize_uni\", new Prototype([new ArgArray(arg_int_unsigned, false, true, true, true), arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),\n// 296 (0x128): put_char_uni - 1Iu:\n296 : new FuncSpec(296, \"put_char_uni\", new Prototype([arg_int_unsigned], null)),\n// 297 (0x129): put_string_uni - 1U:\n297 : new FuncSpec(297, \"put_string_uni\", new Prototype([new ArgUnicode()], null)),\n// 298 (0x12A): put_buffer_uni - 1>+#Iu:\n298 : new FuncSpec(298, \"put_buffer_uni\", new Prototype([new ArgArray(arg_int_unsigned, false, true, false, true)], null)),\n// 299 (0x12B): put_char_stream_uni - 2QbIu:\n299 : new FuncSpec(299, \"put_char_stream_uni\", new Prototype([arg_class_stream, arg_int_unsigned], null)),\n// 300 (0x12C): put_string_stream_uni - 2QbU:\n300 : new FuncSpec(300, \"put_string_stream_uni\", new Prototype([arg_class_stream, new ArgUnicode()], null)),\n// 301 (0x12D): put_buffer_stream_uni - 2Qb>+#Iu:\n301 : new FuncSpec(301, \"put_buffer_stream_uni\", new Prototype([arg_class_stream, new ArgArray(arg_int_unsigned, false, true, false, true)], null)),\n// 304 (0x130): get_char_stream_uni - 2Qb:Is\n304 : new FuncSpec(304, \"get_char_stream_uni\", new Prototype([arg_class_stream], new ArgRef(arg_int_signed, false, true, true))),\n// 305 (0x131): get_buffer_stream_uni - 3Qb<+#Iu:Iu\n305 : new FuncSpec(305, \"get_buffer_stream_uni\", new Prototype([arg_class_stream, new ArgArray(arg_int_unsigned, false, false, true, true)], new ArgRef(arg_int_unsigned, false, true, true))),\n// 306 (0x132): get_line_stream_uni - 3Qb<+#Iu:Iu\n306 : new FuncSpec(306, \"get_line_stream_uni\", new Prototype([arg_class_stream, new ArgArray(arg_int_unsigned, false, false, true, true)], new ArgRef(arg_int_unsigned, false, true, true))),\n// 312 (0x138): stream_open_file_uni - 4QcIuIu:Qb\n312 : new FuncSpec(312, \"stream_open_file_uni\", new Prototype([arg_class_fileref, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),\n// 313 (0x139): stream_open_memory_uni - 4&#!IuIuIu:Qb\n313 : new FuncSpec(313, \"stream_open_memory_uni\", new Prototype([new ArgArray(arg_int_unsigned, true, true, true, false), arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),\n// 314 (0x13A): stream_open_resource_uni - 3IuIu:Qb\n314 : new FuncSpec(314, \"stream_open_resource_uni\", new Prototype([arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),\n// 320 (0x140): request_char_event_uni - 1Qa:\n320 : new FuncSpec(320, \"request_char_event_uni\", new Prototype([arg_class_window], null)),\n// 321 (0x141): request_line_event_uni - 3Qa&+#!IuIu:\n321 : new FuncSpec(321, \"request_line_event_uni\", new Prototype([arg_class_window, new ArgArray(arg_int_unsigned, true, true, true, true), arg_int_unsigned], null)),\n// 336 (0x150): set_echo_line_event - 2QaIu:\n336 : new FuncSpec(336, \"set_echo_line_event\", new Prototype([arg_class_window, arg_int_unsigned], null)),\n// 337 (0x151): set_terminators_line_event - 2Qa>#Iu:\n337 : new FuncSpec(337, \"set_terminators_line_event\", new Prototype([arg_class_window, new ArgArray(arg_int_unsigned, false, true, false, false)], null)),\n// 352 (0x160): current_time - 1<+[3IsIuIs]:\n352 : new FuncSpec(352, \"current_time\", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_unsigned, arg_int_signed], null)), false, true, true)], null)),\n// 353 (0x161): current_simple_time - 2Iu:Is\n353 : new FuncSpec(353, \"current_simple_time\", new Prototype([arg_int_unsigned], new ArgRef(arg_int_signed, false, true, true))),\n// 360 (0x168): time_to_date_utc - 2>+[3IsIuIs]<+[8IsIsIsIsIsIsIsIs]:\n360 : new FuncSpec(360, \"time_to_date_utc\", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_unsigned, arg_int_signed], null)), true, false, true), new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), false, true, true)], null)),\n// 361 (0x169): time_to_date_local - 2>+[3IsIuIs]<+[8IsIsIsIsIsIsIsIs]:\n361 : new FuncSpec(361, \"time_to_date_local\", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_unsigned, arg_int_signed], null)), true, false, true), new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), false, true, true)], null)),\n// 362 (0x16A): simple_time_to_date_utc - 3IsIu<+[8IsIsIsIsIsIsIsIs]:\n362 : new FuncSpec(362, \"simple_time_to_date_utc\", new Prototype([arg_int_signed, arg_int_unsigned, new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), false, true, true)], null)),\n// 363 (0x16B): simple_time_to_date_local - 3IsIu<+[8IsIsIsIsIsIsIsIs]:\n363 : new FuncSpec(363, \"simple_time_to_date_local\", new Prototype([arg_int_signed, arg_int_unsigned, new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), false, true, true)], null)),\n// 364 (0x16C): date_to_time_utc - 2>+[8IsIsIsIsIsIsIsIs]<+[3IsIuIs]:\n364 : new FuncSpec(364, \"date_to_time_utc\", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), true, false, true), new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_unsigned, arg_int_signed], null)), false, true, true)], null)),\n// 365 (0x16D): date_to_time_local - 2>+[8IsIsIsIsIsIsIsIs]<+[3IsIuIs]:\n365 : new FuncSpec(365, \"date_to_time_local\", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), true, false, true), new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_unsigned, arg_int_signed], null)), false, true, true)], null)),\n// 366 (0x16E): date_to_simple_time_utc - 3>+[8IsIsIsIsIsIsIsIs]Iu:Is\n366 : new FuncSpec(366, \"date_to_simple_time_utc\", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), true, false, true), arg_int_unsigned], new ArgRef(arg_int_signed, false, true, true))),\n// 367 (0x16F): date_to_simple_time_local - 3>+[8IsIsIsIsIsIsIsIs]Iu:Is\n367 : new FuncSpec(367, \"date_to_simple_time_local\", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), true, false, true), arg_int_unsigned], new ArgRef(arg_int_signed, false, true, true))),\n// 4352 (0x1100): garglk_set_zcolors - 2IuIu:\n4352 : new FuncSpec(4352, \"garglk_set_zcolors\", new Prototype([arg_int_unsigned, arg_int_unsigned], null)),\n// 4353 (0x1101): garglk_set_zcolors_stream - 3QbIuIu:\n4353 : new FuncSpec(4353, \"garglk_set_zcolors_stream\", new Prototype([arg_class_stream, arg_int_unsigned, arg_int_unsigned], null)),\n// 4354 (0x1102): garglk_set_reversevideo - 1Iu:\n4354 : new FuncSpec(4354, \"garglk_set_reversevideo\", new Prototype([arg_int_unsigned], null)),\n// 4355 (0x1103): garglk_set_reversevideo_stream - 2QbIu:\n4355 : new FuncSpec(4355, \"garglk_set_reversevideo_stream\", new Prototype([arg_class_stream, arg_int_unsigned], null)),\n};\n// End of auto-generated table.\n\n\n/* Make globals available to compiled functions. */\nself.arg_int_unsigned  = arg_int_unsigned;\nself.arg_int_signed    = arg_int_signed;\nself.arg_char_unsigned = arg_char_unsigned;\nself.arg_char_native   = arg_char_native;\nself.arg_char_signed   = arg_char_signed;\n\n/* Convert one simple value (int, char, string, class) from a Glulx\n   value (32-bit unsigned integer) into a Glk library value.\n*/\nfunction convert_arg(arg, passin, val) {\n    if (arg instanceof ArgInt) {\n        if (passin) {\n            if (!arg.signed)\n                return val;\n            else\n                return val + ' & 0xFFFFFFFF';\n        }\n        else {\n            return '0';\n        }\n    }\n    if (arg instanceof ArgChar) {\n        if (passin) {\n            if (!arg.signed)\n                return val + ' & 0xFF';\n            else\n                return 'self.cast_signed_char('+val+')'\n        }\n        else {\n            return '0';\n        }\n    }\n    if (arg instanceof ArgClass) {\n        if (passin) {\n            return 'self.class_obj_from_id(\"'+arg.name+'\", '+val+')';\n        }\n        else {\n            return 'null';\n        }\n    }\n    return '???';\n}\n\n/* Convert one simple value (int, char, string, class) from a Glk library \n   value into a Glulx value (32-bit unsigned integer).\n*/\nfunction unconvert_arg(arg, val) {\n    if (arg instanceof ArgInt) {\n        return val + ' >>> 0';\n    }\n    if (arg instanceof ArgChar) {\n        if (!arg.signed)\n            return val + ' & 0xFF';\n        else\n            return 'self.uncast_signed_char('+val+')'\n    }\n    if (arg instanceof ArgClass) {\n        return 'self.class_obj_to_id(\"'+arg.name+'\", '+val+')';\n    }\n    return '???';\n}\n\n/* Convert a Glulx value into a signed char value. Not a Javascript\n   string, but the bastardized C notion used by the Glk library:\n   a number from -128 to 127.\n*/\nfunction cast_signed_char(val) {\n    val = val & 0xFF;\n    if (val & 0x80)\n        val -= 0x100;\n    return val;\n}\nself.cast_signed_char = cast_signed_char;\n\n/* The converse. */\nfunction uncast_signed_char(val) {\n    val = val & 0xFF;\n    if (val & 0x80)\n        val += 0xFFFFFF00;\n    return val;\n}\nself.uncast_signed_char = uncast_signed_char;\n\n/* Convert an opaque object (a window, stream, or whatever) to a Glulx value\n   (an unsigned 32-bit number).\n*/\nfunction class_obj_to_id(clas, val) {\n    if (!val)\n        return 0;\n    return val.disprock;\n}\nself.class_obj_to_id = class_obj_to_id;\n\n/* The converse. */\nfunction class_obj_from_id(clas, val) {\n    if (val == 0 || !val)\n        return null;\n    return class_map[clas][val];\n}\nself.class_obj_from_id = class_obj_from_id;\n\n/* Convert a FuncSpec object into a Javascript function. The function,\n   when called, should be passed exactly one argument: an array of\n   Glulx values, taken straight from the VM. It will return a Glulx\n   value (zero, if the Glk call does not return a value).\n\n   (This function is for internal use. The VM should call get_function(),\n   which caches built functions.)\n*/\nfunction build_function(func) {\n    var ix, jx;\n    var form, retarg, argpos, argjoin, subargs;\n    var arg, refarg, tmpvar, val, retval, ls;\n    var mayblock;\n\n    /* We will accumulate a list of Javascript lines in the out array. */\n    var out = [];\n    var locals = {};\n    var arraycount = 0;\n\n    out.push('// no local vars');\n    out.push('// ' + func.id + ': ' + func.name);\n    form = func.proto;\n    retarg = null;\n    if (form.retarg)\n        retarg = form.retarg.arg;\n\n    /* The \"self\" object will be bound in via \"this\". */\n    out.push('var self = this;');\n\n    /* If this is true, the call might return DidNotReturn. */\n    mayblock = self.Glk.call_may_not_return(func.id);\n\n    /* Load the argument values into local variables, for use in the\n       call. For array, struct, and reference arguments, we also need\n       to load up the referred-to values. */\n\n    argpos = 0;\n    argjoin = [];\n    for (ix=0; ix<form.args.length; ix++) {\n        arg = form.args[ix];\n        tmpvar = 'glka'+ix;\n        argjoin.push(tmpvar);\n        locals[tmpvar] = true;\n        if ((arg instanceof ArgInt)\n            || (arg instanceof ArgChar)\n            || (arg instanceof ArgClass)) {\n            val = convert_arg(arg, true, 'callargs['+argpos+']');\n            out.push(tmpvar + ' = ' + val + ';');\n            argpos += 1;\n        }\n        else if (arg instanceof ArgRef) {\n            refarg = arg.arg;\n            out.push('if (callargs['+argpos+'] == 0) {');\n            if (arg.nonnull) \n                out.push('  throw new Error(\"glk '+func.name+': null argument\");');\n            else\n                out.push('  '+tmpvar+' = null;');\n            out.push('} else {');\n            if ((refarg instanceof ArgInt)\n                || (refarg instanceof ArgChar)\n                || (refarg instanceof ArgClass)) {\n                out.push('  '+tmpvar+' = new self.Glk.RefBox();');\n                val = convert_arg(refarg, arg.passin, 'self.VM.ReadWord(callargs['+argpos+'])');\n                out.push('  '+tmpvar+'.set_value('+val+');');\n            }\n            else if (refarg instanceof ArgStruct) {\n                subargs = refarg.form.args;\n                out.push('  '+tmpvar+' = new self.Glk.RefStruct('+subargs.length+');');\n                for (jx=0; jx<subargs.length; jx++) {\n                    val = convert_arg(subargs[jx], arg.passin, 'self.VM.ReadStructField(callargs['+argpos+'], '+jx+')');\n                    out.push('  '+tmpvar+'.push_field('+val+');');\n                }\n            }\n            else {\n                throw new Error('buildfunc: unsupported refarg type: ' + func.name);\n            }\n            out.push('}');\n            argpos += 1;\n        }\n        else if (arg instanceof ArgArray) {\n            locals['glklen'] = true;\n            refarg = arg.arg;\n            out.push('if (callargs['+argpos+'] == 0) {');\n            if (arg.nonnull)\n                out.push('  throw new Error(\"glk '+func.name+': null argument\");');\n            else\n                out.push('  '+tmpvar+' = null;');\n            out.push('} else {');\n            out.push('  glklen = callargs['+(argpos+1)+'];');\n            out.push('  '+tmpvar+' = Array(glklen);');\n            if (arg.passin) {\n                locals['ix'] = true;\n                locals['jx'] = true;\n                out.push('  for (ix=0, jx=callargs['+argpos+']; ix<glklen; ix++, jx+='+refarg.refsize+') {');\n                val = convert_arg(refarg, true, 'self.VM.Read'+refarg.macro+'(jx)');\n                out.push('    '+tmpvar+'[ix] = '+val+';');\n                out.push('  }');\n            }\n            if (arg.retained) {\n                if (arraycount == 0)\n                    out.push('  self.temp_arg_arrays.length = 0;');\n                arraycount += 1;\n                out.push('  self.make_arg_array('+tmpvar+', callargs['+argpos+'], glklen, self.'+refarg.literal+');');\n            }\n            out.push('}');\n            argpos += 2;\n        }\n        else if ((arg instanceof ArgString) || (arg instanceof ArgUnicode)) {\n            locals['ix'] = true;\n            locals['jx'] = true;\n            var confunc, checkbyte;\n            if (arg instanceof ArgString) {\n                checkbyte = '0xE0';\n                confunc = 'byte_array_to_string';\n            }\n            else {\n                checkbyte = '0xE2';\n                confunc = 'uni_array_to_string';\n            }\n            out.push(tmpvar+' = Array();');\n            out.push('jx = callargs['+argpos+'];');\n            out.push('if (self.VM.ReadByte(jx) != '+checkbyte+') throw new Error(\"glk '+func.name+': string argument must be unencoded\");');\n            out.push('for (jx+='+arg.refsize+'; true; jx+='+arg.refsize+') {');\n            out.push('  ix = self.VM.Read'+arg.macro+'(jx);');\n            out.push('  if (ix == 0) break;');\n            out.push('  '+tmpvar+'.push(ix);');\n            out.push('}');\n            out.push(tmpvar+' = self.Glk.'+confunc+'('+tmpvar+');');\n            argpos += 1;\n        }\n        else {\n            throw new Error('buildfunc: unsupported arg type: ' + func.name);\n        }\n    }\n\n    out.push('if (callargs.length != '+argpos+') throw \"glk '+func.name+': wrong number of arguments\";');\n\n    /* Perform the call itself. */\n\n    if (retarg || mayblock) {\n        locals['glkret'] = true;\n        retval = 'glkret = ';\n    }\n    else {\n        retval = '';\n    }\n    out.push(retval + ('self.Glk.glk_' + func.name).replace('glk_gar', 'gar') + '(' + argjoin.join(', ') + ');');\n\n    if (mayblock) {\n        /* If the call blocks, we need to stash away the arguments and\n           then return early. */\n        out.push('if (glkret === self.Glk.DidNotReturn) {');\n        out.push('  self.set_blocked_selector(' + func.id + ', callargs);');\n        out.push('  return glkret;');\n        out.push('}');\n    }\n\n    /* For reference/array/struct arguments, unload the referred-to values\n       back out to the VM. */\n\n    argpos = 0;\n    for (ix=0; ix<form.args.length; ix++) {\n        arg = form.args[ix];\n        tmpvar = 'glka'+ix;\n        if ((arg instanceof ArgInt)\n            || (arg instanceof ArgChar)\n            || (arg instanceof ArgClass)) {\n            argpos += 1;\n        }\n        else if (arg instanceof ArgRef) {\n            refarg = arg.arg;\n            if (arg.passout) {\n                out.push('if ('+tmpvar+') {');\n                if ((refarg instanceof ArgInt)\n                    || (refarg instanceof ArgChar)\n                    || (refarg instanceof ArgClass)) {\n                    val = unconvert_arg(refarg, tmpvar+'.get_value()');\n                    out.push('  self.VM.WriteWord(callargs['+argpos+'], '+val+');');\n                }\n                else if (refarg instanceof ArgStruct) {\n                    subargs = refarg.form.args;\n                    for (jx=0; jx<subargs.length; jx++) {\n                        val = unconvert_arg(subargs[jx], tmpvar+'.get_field('+jx+')');\n                        out.push('  self.VM.WriteStructField(callargs['+argpos+'], '+jx+', '+val+');');\n                    }\n                }\n                else {\n                    throw new Error('buildfunc: unsupported refarg type: ' + func.name);\n                }\n                out.push('}');\n            }\n            argpos += 1;\n        }\n        else if (arg instanceof ArgArray) {\n            refarg = arg.arg;\n            if (arg.passout && !arg.retained) {\n                out.push('if ('+tmpvar+') {');\n                locals['ix'] = true;\n                locals['jx'] = true;\n                out.push('  for (ix=0, jx=callargs['+argpos+']; ix<glklen; ix++, jx+='+refarg.refsize+') {');\n                val = unconvert_arg(refarg, tmpvar+'[ix]');\n                out.push('    self.VM.Write'+refarg.macro+'(jx, '+val+')');\n                out.push('  }');\n                out.push('}');\n            }\n            argpos += 2;\n        }\n        else if ((arg instanceof ArgString) || (arg instanceof ArgUnicode)) {\n            argpos += 1;\n        }\n        else {\n            throw new Error('buildfunc: unsupported arg type: ' + func.name);\n        }\n    }\n    \n    /* Discard any argument arrays. (Retained ones have already been\n       added to retained_arrays.) */\n    if (arraycount != 0)\n        out.push('self.temp_arg_arrays.length = 0;');\n\n    /* Return the return value. */\n\n    if (retarg) {\n        val = unconvert_arg(retarg, 'glkret');\n        out.push('return '+val+';');\n    }\n    else {\n        out.push('return 0;');\n    }\n\n    /* Add a line to the beginning which lists all the locals we used. */\n\n    ls = [];\n    for (val in locals)\n        ls.push(val);\n    if (ls.length)\n        out[0] = 'var ' + ls.join(', ') + ';';\n    val = out.join('\\n');\n\n    /* Compile the function and return it. We bind the internal object as\n       its \"this\". */\n    var resfunc = new Function('callargs', val);\n    return resfunc.bind(self);\n}\n\n/* Cache of all the dispatch functions we've compiled. */\nvar function_map = {};\n\n/* Given a Glk selector number, return the dispatch function for it.\n\n   The function, when called, should be passed exactly one argument: \n   an array of Glulx values, taken straight from the VM. It will return\n   a Glulx value (zero, if the Glk call does not return a value).\n\n   If the selector number is not recognized, this throws an exception.\n*/\nfunction get_function(id) {\n    var proto;\n    var func = function_map[id];\n    if (func === undefined) {\n        proto = proto_map[id];\n        if (proto === undefined)\n            throw new Error('dispatch: unknown Glk function: ' + id);\n        func = build_function(proto);\n        function_map[id] = func;\n    }\n    return func;\n}\n\n/* The stashed arguments of the call that blocked. If we are not blocked\n   on a Glk call, these variables will be null. */\nvar blocked_selector = null;\nvar blocked_callargs = null;\n\nvar last_event_type = -1; /* Last event type. */\n\n/* Stash the above arguments. We make a copy of the args list, because\n   we don't trust the argument to be immutable.\n*/\nfunction set_blocked_selector(sel, args) {\n    blocked_selector = sel;\n    blocked_callargs = args.slice(0);\n}\nself.set_blocked_selector = set_blocked_selector;\n\n/* Check whether this is a good time for autosave. This is an awkward\n   API call, but GiDispa is the easiest place to find this information.\n\n   It's a good time for autosave if (a) we're blocked on glk_select\n   (rather than glk_fileref_create_by_prompt or whatever); (b) we did\n   not just launch; (c) we just responded to a keyboard or mouse event\n   (as opposed to timer, resize, etc).\n\n   If it's not a good time, return null. If it is, we return the VM address\n   of the event structure, which the caller needs. (See, I told you it\n   was awkward.)\n*/\nfunction check_autosave() {\n    if (blocked_selector == 0x0C0 && blocked_callargs && blocked_callargs.length > 0) {\n        if (last_event_type == 2 || last_event_type == 3 \n            || last_event_type == 4 || last_event_type == 8) {\n            return blocked_callargs[0];\n        }\n    }\n    return null;\n}\n\n/* Prepare the VM to resume after a blocked function. The argument is\n   the argument to the original blocked call. Our job is to unload\n   that into the VM's memory map.\n\n   We cheat, here, and rely on knowing that only a couple of Glk calls can\n   block. (glk_exit can block too, but of course it doesn't resume.)\n*/\nfunction prepare_resume(glka0) {\n    if (blocked_selector == 0x0C0) {\n        // glk_select\n        if (blocked_callargs[0] != 0) {\n            last_event_type = (glka0.get_field(0) >>> 0);\n            self.VM.WriteStructField(blocked_callargs[0], 0, glka0.get_field(0) >>> 0);\n            self.VM.WriteStructField(blocked_callargs[0], 1, class_obj_to_id(\"window\", glka0.get_field(1)));\n            self.VM.WriteStructField(blocked_callargs[0], 2, glka0.get_field(2) >>> 0);\n            self.VM.WriteStructField(blocked_callargs[0], 3, glka0.get_field(3) >>> 0);\n        }\n    }\n    else if (blocked_selector == 0x062) {\n        // glk_fileref_create_by_prompt\n        self.VM.SetResumeStore(class_obj_to_id(\"fileref\", glka0));\n    }\n    blocked_selector = null;\n    blocked_callargs = null;\n}\n\n/* This lists all the array arguments during a Glk call (but not between\n   calls). */\nvar temp_arg_arrays = [];\nself.temp_arg_arrays = temp_arg_arrays;\n\n/* List of retained arrays -- those that are being held by long-term\n   Glk activities, like line input. Each entry in this list is an\n   object { arr:array, addr:VMaddress, len:length, arg:ArgInt/ArgChar }.\n\n   This storage model assumes that no array will be retained twice\n   at the same time. I think this is safe.\n*/\nvar retained_arrays = [];\nself.retained_arrays = retained_arrays;\n\n/* Create an argument array descriptor. The address and length are where it\n   will go in VM memory. The arg is an ArgInt or ArgChar object, describing the\n   array entries.\n\n   These descriptors are temporary -- they only exist for the duration\n   of a Glk call -- unless the call *retains* the array. Then it's\n   kept around until another call unretains it.\n*/\nfunction make_arg_array(arr, addr, len, arg) {\n    var obj;\n    if (!arr)\n        return;\n    obj = { arr:arr, addr:addr, len:len, arg:arg };\n    temp_arg_arrays.push(obj);\n}\nself.make_arg_array = make_arg_array;\n\n/* Retain one array. This must have been passed to make_arg_array(),\n   earlier in this Glk call.\n\n   If invoked by the autorestore system, there is no previous \n   make_arg_array() call. Instead, the necessary information is provided\n   in useobj. (The array must match.) The useobj argument should *only*\n   be used by autorestore.\n*/\nfunction retain_array(arr, useobj) {\n    var ix, obj;\n    if (!arr)\n        return;\n\n    if (useobj !== undefined) {\n        if (arr !== useobj.arr)\n            throw new Error('retain_array: array does not match useobj');\n        obj = { \n            addr:useobj.addr, len:useobj.len,\n            arr:arr,\n            arg:arg_deserialize(useobj.arg)\n        }\n        if (obj.len != arr.length)\n            throw new Error('retain_array: array length from useobj does not match');\n    }\n    else {\n        obj = undefined;\n        for (ix=0; ix<temp_arg_arrays.length; ix++) {\n            if (temp_arg_arrays[ix].arr === arr) {\n                obj = temp_arg_arrays[ix];\n                break;\n            }\n        }\n    }\n\n    if (obj === undefined)\n        throw new Error('retain_array: array is not an argument');\n\n    for (ix=0; !(retained_arrays[ix] === undefined); ix++) { };\n    retained_arrays[ix] = obj;\n}\n\n/* Return information about one retained array. This is used *only*\n   by the autosave/autorestore system.\n*/\nfunction get_retained_array(arr) {\n    var ix;\n\n    for (ix=0; ix<retained_arrays.length; ix++) {\n        if (retained_arrays[ix] === undefined)\n            continue;\n        if (retained_arrays[ix].arr === arr) {\n            return retained_arrays[ix];\n        }\n    }\n\n    return null;\n}\n\n/* Unretain one array; write its contents back into memory. (We take for\n   granted that a retained array is always pass-out.)\n*/\nfunction unretain_array(arr) {\n    var ix, jx, obj;\n    if (!arr)\n        return;\n\n    obj = undefined;\n    for (ix=0; ix<retained_arrays.length; ix++) {\n        if (retained_arrays[ix] === undefined)\n            continue;\n        if (retained_arrays[ix].arr === arr) {\n            obj = retained_arrays[ix];\n            delete retained_arrays[ix];\n            break;\n        }\n    }\n\n    if (obj === undefined)\n        throw new Error('unretain_array: array was never retained');\n\n    if (obj.arg instanceof ArgInt) {\n        for (ix=0, jx=obj.addr; ix<obj.len; ix++, jx+=4) {\n            self.VM.WriteWord(jx, obj.arr[ix] >>> 0);\n        }\n    }\n    else if (obj.arg instanceof ArgChar) {\n        if (!obj.arg.signed) {\n            for (ix=0, jx=obj.addr; ix<obj.len; ix++, jx++) {\n                self.VM.WriteByte(jx, obj.arr[ix] & 0xFF);\n            }\n        }\n        else {\n            for (ix=0, jx=obj.addr; ix<obj.len; ix++, jx++) {\n                self.VM.WriteByte(jx, uncast_signed_char(obj.arr[ix]));\n            }\n        }\n    }\n    else {\n        throw new Error('unretain_array: unsupported refarg type');\n    }\n}\n\n/* Table of tables of registered Glk objects. class_map['window'] is the\n   table of windows, and so on.\n*/\nvar class_map = {};\n/* Source of numeric ids that are used to identify Glk objects. */\nvar last_used_id;\n\n/* Note a newly-created Glk object. The clas argument must be one of\n   the type name strings: \"window\", \"stream\", etc. \n\n   This is called by the Glk library. The object's disprock field is\n   set to a 32-bit number.\n\n   If usedisprock is set, we use that value instead of picking a new one.\n   (And bump last_used_id so that it won't collide with it in the future.)\n   This is *only* used by the autorestore feature. In this case, the\n   obj's disprock must already be set to the provided value.\n*/\nfunction class_register(clas, obj, usedisprock) {\n    if (usedisprock === undefined) {\n        /* Normal case */\n        if (obj.disprock)\n            throw new Error('class_register: object is already registered');\n        obj.disprock = last_used_id;\n        last_used_id++;\n    }\n    else {\n        /* Autorestore case */\n        if (obj.disprock != usedisprock)\n            throw new Error('class_register: object is not already registered');\n        if (last_used_id <= usedisprock)\n            last_used_id = usedisprock + 1;\n    }\n\n    class_map[clas][obj.disprock] = obj;\n}\n\n/* Note a just-destroyed Glk object.\n*/\nfunction class_unregister(clas, obj) {\n    if (!obj.disprock || class_map[clas][obj.disprock] === undefined)\n        throw new Error('class_unregister: object is not registered');\n    \n    delete class_map[clas][obj.disprock];\n    obj.disprock = undefined;\n}\n\n/* This is called as soon as the GiDispa module is loaded. It sets up some\n   internal tables. This does not rely on any other module.\n*/\nfunction init_module() {\n    var ix, key;\n\n    last_used_id = 1 + Math.round(Math.random() * 1000);\n\n    for (ix in class_defs) {\n        key = class_defs[ix];\n        class_map[key] = {};\n    }\n};\n\ninit_module();\n\n/* End of GiDispa namespace function. Return the object which will\n   become the GiDispa global. */\nreturn {\n    classname: 'GiDispa',\n    init: gidispa_init,\n    inited: gidispa_inited,\n    getlibrary: gidispa_getlibrary,\n    \n    get_function: get_function,\n    prepare_resume: prepare_resume,\n    check_autosave: check_autosave,\n    class_register: class_register,\n    class_unregister: class_unregister,\n    class_obj_to_id: class_obj_to_id,\n    class_obj_from_id: class_obj_from_id,\n    retain_array: retain_array,\n    unretain_array: unretain_array,\n    get_retained_array: get_retained_array\n};\n\n};\n\n/* I'm breaking the rule about creating a predefined instance. This is\n   only used by Quixe via GiLoad, which always creates a new instance.\n   I don't know of any other projects which need the backwards\n   compatibility support.\n*/\n// var GiDispa = new GiDispaClass();\n\n// Node-compatible behavior\ntry { exports.GiDispaClass = GiDispaClass; } catch (ex) {};\n\n/* End of GiDispa library. */\n", "'use strict';\n\n/* GiLoad -- a game-file loader for Quixe\n * Designed by Andrew Plotkin <erkyrath@eblong.com>\n * <http://eblong.com/zarf/glulx/quixe/>\n *\n * \n * This Javascript library is copyright 2010-2022 by Andrew Plotkin.\n * It is distributed under the MIT license; see the \"LICENSE\" file.\n *\n * This library loads a game image (by one of several possible methods)\n * and then starts up the display layer and game engine. It also extracts\n * data from a Blorb image, if that's what's provided. It is distributed\n * as part of the Quixe engine, but can also be used by IFVMS. Thus it is\n * equipped to handle both Glulx and Z-code games (naked or Blorbed).\n *\n * (This code makes use of the jQuery library, which therefore must be\n * available.)\n *\n * When you are putting together a Quixe installation page, you call\n * GiLoad.load_run() to get the game started. You should do this in the\n * document's \"onload\" handler, or later. (If you call it before \"onload\" \n * time, it may not work.)\n *\n * You can do this in a couple of different ways:\n *\n * GiLoad.load_run(OPTIONS) -- load and run the game using the options\n *   passed as the argument. If OPTIONS is null or not provided, the\n *   global \"game_options\" object is considered. (The various options are\n *   described below.) This invocation assumes Glulx format.\n *\n * GiLoad.load_run(OPTIONS, IMAGE, IMAGEOPTIONS) -- run the game with the\n *   given options. The IMAGE argument, if not null, should be the game\n *   file itself (a glulx, zcode, or blorb file). The IMAGEOPTIONS describe\n *   how the game file is encoded. It should contain:\n *\n *   IMAGEOPTIONS.format: Describes how the game file is encoded:\n *     \"base64\": a base64-encoded binary file\n *     \"raw\": a binary file stored in a string\n *     \"array\": an array of (numeric) byte values\n *\n *   If the third argument is a string rather than an object, it is taken\n *   to be IMAGEOPTIONS.format.\n *\n *   If OPTIONS is null, the global \"game_options\" object is considered.\n *\n * These are the game options. Most have default values, so you only have\n * to declare the ones you want to change.\n *\n *   use_query_story: If this is true, you (or the player) can use a\n *     \"?story=...\" URL parameter to load any game file. If it is false,\n *     this parameter is ignored. (default: true)\n *   set_page_title: If true, the loader will change the document title\n *     to describe the game being loaded. If false, the document title\n *     will be left alone. (default: true)\n *   default_page_title: A default label for the game, if none could be\n *     extracted from the metadata or URL. (default: \"Game\")\n *   engine_name: Label used in the page title along with default_page_title.\n *     (default: \"Quixe\" or \"IFVMS\")\n *   default_story: The URL of the game file to load, if not otherwise\n *     provided.\n *   proxy_url: The URL of the web-app service which is used to convert\n *     binary data to Javascript, if the browser needs that. (default:\n *     https://zcode.appspot.com/proxy/)\n *   resources: An object which describes all the available resources\n *     if they are provided as static URL data. (If this is not provided,\n *     we rely on Blorb resources.) This can be an object or a string;\n *     in the latter case, we look up a global object with that name.\n *     (See the gi_blorb.js library for the format.)\n *   image_info_map: Same as resources, but the data only describes\n *     image data. (This is an older format, still supported.)\n *   exit_warning: A message to display (in a blue warning pane) when\n *     the game exits. If empty or null, no message is displayed.\n *     (default: \"The game session has ended.\")\n *   do_vm_autosave: If set, the VM will check for a snapshot when\n *     launching, and load it if present. The VM will also save a snapshot\n *     after every move. (default: false)\n *   clear_vm_autosave: If set, the VM will clear any snapshot at launch\n *     (so will not load one even if do_vm_autosave is set). (default:\n *     false)\n *   game_format_name: Label used in loading error messages. (default:\n *     \"Glulx\" for Quixe, \"\" otherwise)\n *   blorb_gamechunk_type: Chunk type to extract from a Blorb file.\n *     (default: \"GLUL\" for Quixe, null otherwise)\n *   vm: The game engine interface object. (default: Quixe)\n *   io: The display layer interface object. (default: Glk)\n *   \n *   You can also include any of the display options used by the GlkOte\n *   library, such as gameport, windowport, spacing, ...\n *   And also the interpreter options used by the Quixe library, such as\n *   rethrow_exceptions, ...\n *\n *   For backwards compatibility, if options.vm is omitted or is the\n *   windows.Quixe object, then several other options (engine_name,\n *   blorb_gamechunk_type, game_format_name) are set up with values\n *   appropriate for Glulx game files.\n *\n */\n\n/* All state is contained in GiLoadClass. */\n\nvar GiLoadClass = function() {\n\n/* Start with the defaults. These can be modified later by the game_options\n   defined in the HTML file.\n\n   Note that the \"vm\" and \"io\" entries are not filled in here, because\n   we don't know whether the Quixe or Glk libraries were loaded before\n   this one. We'll fill them in at load_run() time.\n*/\nvar all_options = {\n    vm: null,              // default game engine (Quixe)\n    io: null,              // default display layer (Glk)\n    spacing: 4,            // default spacing between windows\n    use_query_story: true, // use the ?story= URL parameter (if provided)\n    default_story: null,   // story URL to use if not otherwise set\n    set_page_title: true,  // set the window title to the game name\n    default_page_title: 'Game', // fallback game name to use for title\n    game_format_name: '',  // used in error messages\n    exit_warning: 'The game session has ended.',\n    resources: null,       // look for resources in Blorb data\n    image_info_map: null,  // look for images in Blorb data\n    proxy_url: 'https://zcode.appspot.com/proxy/'\n};\n\nvar gameurl = null;  /* The URL we are loading. */\nvar started = false; /* True once start_game() runs */\n    \nvar GlkOte = null; /* imported API object -- for GlkOte.log */\n\n/* Begin the loading process. This is what you call to start a game;\n   it takes care of starting the Glk and Quixe modules, when the game\n   file is available.\n*/\nfunction load_run(optobj, image, imageoptions) {\n\n    /* There are a couple of different calling conventions that we have\n       to distinguish here. */\n\n    if (!imageoptions) {\n        // None provided. (There should be no image argument either.)\n        imageoptions = {};\n    }\n    else if (typeof(imageoptions) == 'string') {\n        // An image_format string. (Old calling format.)\n        imageoptions = { format:imageoptions };\n    }\n    else {\n        // A map of image options, including image_format.\n    }\n\n    /* Now look at the provided arguments. */\n\n    var image_format = imageoptions.format;\n    if (!image_format)\n        image_format = 'array';\n\n    /* Set the default entries for the interface objects that come from\n       other libraries. (If no such libraries have been loaded, then\n       these do nothing. The game_options passed in can override each of\n       these references!)\n    */\n    all_options.io = window.Glk;\n    all_options.vm = window.Quixe;\n    all_options.GiLoad = this;\n    all_options.GlkOte = null;\n    all_options.GiDispa = null;\n    all_options.Blorb = null;\n    \n    /* The game_options object could be provided via an argument. If not,\n       we use the global game_options. */\n    if (!optobj)\n        optobj = window.game_options;\n\n    if (optobj && window.Quixe\n        && ((!optobj.vm) || optobj.vm === window.Quixe)) {\n        /* If we are going to wind up with the Quixe engine -- either from\n           game_options or as a default -- we throw in some more defaults. */\n        all_options.engine_name = 'Quixe';\n        all_options.blorb_gamechunk_type = 'GLUL';\n        all_options.game_format_name = 'Glulx';\n    }\n\n    /* Pull in the values from the game_options, which override the defaults\n       set above. */\n    if (optobj) {\n        jQuery.extend(all_options, optobj);\n    }\n\n    /* If the GlkOte, GiDispa, Blorb classes were not provided, create\n       them now (if possible). */\n    if ((!all_options.GlkOte) && window.GlkOteClass) {\n        all_options.GlkOte = new window.GlkOteClass();\n    }\n    if ((!all_options.GiDispa) && window.GiDispaClass) {\n        all_options.GiDispa = new window.GiDispaClass();\n    }\n    if ((!all_options.Blorb) && window.BlorbClass) {\n        all_options.Blorb = new window.BlorbClass();\n    }\n    \n    GlkOte = all_options.GlkOte; /* our copy of the reference */\n\n    /* If the resources is a string, look for a global object of\n       that name. If there isn't one, delete that option. (The \n       resources could also be an object already, in which case\n       we leave it as is.) */\n    if (all_options.resources != undefined) {\n        if (jQuery.type(all_options.resources) === 'string') {\n            if (window[all_options.resources])\n                all_options.resources = window[all_options.resources];\n            else\n                delete all_options.resources;\n        }\n    }\n    /* Same deal for image_info_map. (You wouldn't usually have both,\n       mind you.) */\n    if (all_options.image_info_map != undefined) {\n        if (jQuery.type(all_options.image_info_map) === 'string') {\n            if (window[all_options.image_info_map])\n                all_options.image_info_map = window[all_options.image_info_map];\n            else\n                delete all_options.image_info_map;\n        }\n    }\n\n    /* The first question is, what's the game file URL? */\n\n    gameurl = null;\n\n    if (all_options.use_query_story) {\n        /* Use ?story= URL parameter, if present and accepted. */\n        var qparams = get_query_params();\n        gameurl = qparams['story'];\n    }\n\n    if (!gameurl && image) {\n        /* The story data is already loaded -- it's not an a URL at all. \n           Decode it, and then fire it off. */\n        GlkOte.log('GiLoad: trying pre-loaded load (' + image_format + ')...');\n        switch (image_format) {\n        case 'base64':\n            image = decode_base64(image);\n            break;\n        case 'raw':\n            image = decode_raw_text(image);\n            break;\n        case 'array':\n            /* Leave image alone */\n            break;\n        default:\n            all_options.io.fatal_error(\"Could not decode story file data: \" + image_format);\n            return;\n        }\n\n        start_game(image);\n        return;\n    }\n\n    if (!gameurl) {\n        /* Go with the \"default_story\" option parameter, if present. */\n        gameurl = all_options.default_story;\n    }\n\n    if (!gameurl) {\n        all_options.io.fatal_error(\"No story file specified!\");\n        return;\n    }\n\n    //GlkOte.log('GiLoad: gameurl: ' + gameurl);\n    /* The gameurl is now known. (It should not change after this point.)\n       The next question is, how do we load it in? */\n\n    /* If an image file was passed in, we didn't use it. So we might as\n       well free its memory at this point. */\n    image = null;\n\n    /* The logic of the following code is adapted from Parchment's\n       file.js. It's probably obsolete at this point -- I suspect\n       that binary_supported and crossorigin_supported will wind up\n       true in all modern browsers. Why throw away code, though... */\n\n    var xhr = new XMLHttpRequest(); /* ### not right on IE? */\n    var binary_supported = (xhr.overrideMimeType !== undefined);\n    /* I'm told that Opera's overrideMimeType() doesn't work, but\n       I'm not inclined to worry about it these days. */\n    var crossorigin_supported = (xhr.withCredentials !== undefined);\n    xhr = null;\n\n    var regex_urldomain = /^(file:|(\\w+:)?\\/\\/[^\\/?#]+)/;\n    var page_domain = regex_urldomain.exec(location)[0];\n    var data_exec = regex_urldomain.exec(gameurl);\n    var is_relative = data_exec ? false : true;\n    var data_domain = data_exec ? data_exec[0] : page_domain;\n\n    var same_origin = (page_domain == data_domain);\n    if (navigator.userAgent.match(/chrome/i) && data_domain == 'file:') {\n        /* Chrome enforces a stricter same-origin policy for file: URLs --\n           it doesn't want to trawl your hard drive for random files.\n           Other browsers may pick this up someday, but for now, it's\n           only Chrome. */\n        same_origin = false;\n    }\n\n    /* Crude test for whether the URL is a Javascript file -- just\n       check for a \".js\" suffix. */\n    var old_js_url = gameurl.match(/[.]js$/i);\n\n    GlkOte.log('GiLoad: is_relative=' + is_relative + ', same_origin=' + same_origin + ', binary_supported=' + binary_supported + ', crossorigin_supported=' + crossorigin_supported);\n\n    if (old_js_url && same_origin) {\n        /* Old-fashioned Javascript file -- the output of Parchment's\n           zcode2js tool. When loaded and eval'ed, this will call\n           a global function processBase64Zcode() with base64 data\n           as the argument. */\n        GlkOte.log('GiLoad: trying old-fashioned load...');\n        window.processBase64Zcode = function(val) { \n            start_game(decode_base64(val));\n        };\n        jQuery.ajax(gameurl, {\n                'type': 'GET',\n                dataType: 'script',\n                cache: true,\n                error: function(jqxhr, textstatus, errorthrown) {\n                    all_options.io.fatal_error(\"The story could not be loaded. (\" + gameurl + \"): Error \" + textstatus + \": \" + errorthrown);\n                }\n        });\n        return;\n    }\n\n    if (old_js_url) {\n        /* Javascript file in a different domain. We'll insert it as a <script>\n           tag; that will force it to load, and invoke a processBase64Zcode()\n           function as above. */\n        GlkOte.log('GiLoad: trying script load...');\n        window.processBase64Zcode = function(val) { \n            start_game(decode_base64(val));\n        };\n        var headls = $('head');\n        if (!headls.length) {\n            all_options.io.fatal_error(\"This page has no <head> element!\");\n            return;\n        }\n        var script = $('<script>', \n            { src:gameurl, 'type':\"text/javascript\" });\n        /* jQuery is now sensitive about this, and will not allow it as\n          a Chrome work-around. We use a raw DOM method instead. */\n        // headls.append(script);\n        headls.get(0).appendChild(script.get(0));\n        return;\n    }\n\n    if (binary_supported && same_origin) {\n        /* We can do an Ajax GET of the binary data. */\n        GlkOte.log('GiLoad: trying binary load...');\n        jQuery.ajax(gameurl, {\n                'type': 'GET',\n                    beforeSend: function(jqxhr, settings) {\n                    /* This ensures that the data doesn't get decoded or\n                       munged in any way. */\n                    jqxhr.overrideMimeType('text/plain; charset=x-user-defined');\n                },\n                success: function(response, textstatus, errorthrown) {\n                    start_game(decode_raw_text(response));\n                },\n                error: function(jqxhr, textstatus, errorthrown) {\n                    all_options.io.fatal_error(\"The story could not be loaded. (\" + gameurl + \"): Error \" + textstatus + \": \" + errorthrown);\n                }\n        });\n        return;\n    }\n\n    if (data_domain == 'file:') {\n        /* All the remaining options go through the proxy. But the proxy\n           can't get at the local hard drive, so it's hopeless.\n           (This case occurs only on Chrome, with its restrictive\n           same-origin-file: policy.) */\n        all_options.io.fatal_error(\"The story could not be loaded. (\" + gameurl + \"): A local file cannot be sent to the proxy.\");\n        return;\n    }\n\n    /* All the remaining options go through the proxy. But the proxy doesn't\n       understand relative URLs, so we absolutize it if necessary. */\n    var absgameurl = gameurl;\n    if (is_relative) {\n        absgameurl = absolutize(gameurl);\n        GlkOte.log('GiLoad: absolutize ' + gameurl + ' to ' + absgameurl);\n    }\n\n    if (crossorigin_supported) {\n        /* Either we can't load binary data, or the data is on a different\n           domain. Either way, we'll go through the proxy, which will\n           convert it to base64 for us. The proxy gives the right headers\n           to make cross-origin Ajax work. */\n        GlkOte.log('GiLoad: trying proxy load... (' + all_options.proxy_url + ')');\n        jQuery.ajax(all_options.proxy_url, {\n                'type': 'GET',\n                data: { encode: 'base64', url: absgameurl },\n                error: function(jqxhr, textstatus, errorthrown) {\n                    /* I would like to display the responseText here, but\n                       most servers return a whole HTML page, and that doesn't\n                       fit into fatal_error. */\n                    all_options.io.fatal_error(\"The story could not be loaded. (\" + gameurl + \"): Error \" + textstatus + \": \" + errorthrown);\n                },\n                success: function(response, textstatus, errorthrown) {\n                    start_game(decode_base64(response));\n                }\n        });\n        return;\n    }\n\n    if (true) {\n        /* Cross-origin Ajax isn't available. We can still use the proxy,\n           but we'll have to insert a <script> tag to do it. */\n        var fullurl = all_options.proxy_url + '?encode=base64&callback=processBase64Zcode&url=' + absgameurl;\n        GlkOte.log('GiLoad: trying proxy-script load... (' + fullurl + ')');\n        window.processBase64Zcode = function(val) { \n            start_game(decode_base64(val));\n        };\n        var headls = $('head');\n        if (!headls.length) {\n            all_options.io.fatal_error(\"This page has no <head> element!\");\n            return;\n        }\n        var script = $('<script>', \n            { src:fullurl, 'type':\"text/javascript\" });\n        headls.append(script);\n        return;\n    }\n\n    all_options.io.fatal_error(\"The story could not be loaded. (\" + gameurl + \"): I don't know how to load this data.\");\n}\n\n/* Take apart the query string of the current URL, and turn it into\n   an object map.\n   (Adapted from querystring.js by Adam Vandenberg.)\n*/\nfunction get_query_params() {\n    var map = {};\n\n    var qs = location.search.substring(1, location.search.length);\n    if (qs.length) {\n        var args = qs.split('&');\n\n        qs = qs.replace(/\\+/g, ' ');\n        for (var ix = 0; ix < args.length; ix++) {\n            var pair = args[ix].split('=');\n            var name = decodeURIComponent(pair[0]);\n            \n            var value = (pair.length==2)\n                ? decodeURIComponent(pair[1])\n                : name;\n            \n            map[name] = value;\n        }\n    }\n\n    return map;\n}\n\n/* Turn a relative URL absolute, based on document.location.\n   (This doesn't make sense in a headless Node environment,\n   but this function shouldn't be called in such environments.)\n*/\nfunction absolutize(url) {\n    var res = new URL(url, document.location.href);\n    return res.href;\n}\n\n/* In the following functions, \"decode\" means turning native string data\n   into an array of numbers; \"encode\" is the other direction. That's weird,\n   I know. It's because an array of byte values is the natural data format\n   of Glulx code.\n*/\n\n/* Convert a byte string into an array of numeric byte values. */\nfunction decode_raw_text(str) {\n    var arr = Array(str.length);\n    var ix;\n    for (ix=0; ix<str.length; ix++) {\n        arr[ix] = str.charCodeAt(ix) & 0xFF;\n    }\n    return arr;\n}\n\n/* Convert a base64 string into an array of numeric byte values.\n*/\nfunction decode_base64(base64data)\n{\n    var data = atob(base64data);\n    var image = Array(data.length);\n    var ix;\n    \n    for (ix=0; ix<data.length; ix++)\n        image[ix] = data.charCodeAt(ix);\n    \n    return image;\n}\n\n/* Start the game (after de-blorbing, if necessary).\n   This is invoked by whatever callback received the loaded game file.\n*/\nfunction start_game(image) {\n    if (image.length == 0) {\n        all_options.io.fatal_error(\"No game file was loaded. (Zero-length response.)\");\n        return;\n    }\n\n    if (image[0] == 0x46 && image[1] == 0x4F && image[2] == 0x52 && image[3] == 0x4D) {\n        var formtype = String.fromCharCode(image[8], image[9], image[10], image[11]);\n\n        if (formtype == 'IFZS') {\n            all_options.io.fatal_error(\"This is a saved-game file, not a \"+all_options.game_format_name+\" game file. You must launch the game first, then restore your save.\");\n            return;\n        }\n\n        if (formtype != 'IFRS') {\n            all_options.io.fatal_error(\"This IFF file is not a Blorb file!\");\n            return;\n        }\n\n        if (all_options.blorb_gamechunk_type) {\n            if (!all_options.Blorb) {\n                all_options.io.fatal_error(\"Blorb file could not be parsed because no BlorbClass is available.\");\n                return;\n            }\n            try {\n                // Normally we are only interested in the game file and images.\n                var retainuses = { 'exec':true, 'pict':true, 'data':true };\n                if (all_options.retainuses !== undefined) {\n                    retainuses = all_options.retainuses;\n                }\n                all_options.Blorb.init(image, { format:'blorbbytes', retainuses:retainuses });\n                image = all_options.Blorb.get_exec_data(all_options.blorb_gamechunk_type);\n            }\n            catch (ex) {\n                all_options.io.fatal_error(\"Blorb file could not be parsed: \" + ex);\n                return;\n            }\n        }\n        if (!image) {\n            all_options.io.fatal_error(\"Blorb file contains no \"+all_options.game_format_name+\" game!\");\n            return;\n        }\n    }\n\n    /* If Blorb wasn't inited from the image data, we try to init it\n       some other way. */\n    if (all_options.Blorb && !all_options.Blorb.inited()) {\n        if (all_options.image_info_map) {\n            all_options.Blorb.init(all_options.image_info_map, { format:'infomap' });\n        }\n        else if (all_options.resources) {\n            all_options.Blorb.init(all_options.resource_array);\n        }\n        else {\n            /* Init with no resources. */\n            all_options.Blorb.init([]);\n        }\n    }\n\n    /* Figure out the title. */\n    {\n        var title = null;\n        if (all_options.Blorb)\n            title = all_options.Blorb.get_metadata('title');\n        if (!title && gameurl) \n            title = gameurl.slice(gameurl.lastIndexOf(\"/\") + 1);\n        if (!title)\n            title = all_options.default_page_title;\n        if (!title)\n            title = 'Game';\n\n        if (!all_options.recording_label)\n            all_options.recording_label = title;\n\n        if (all_options.set_page_title)\n            document.title = title + \" - \" + all_options.engine_name;\n    }\n\n    /* Pass the game image file along to the VM engine. */\n    // Convert a Uint8Array into an Array\n    const image_array = Array.from(image)\n    all_options.vm.init(image_array, all_options);\n\n    started = true;\n    \n    /* Now fire up the display library. This will take care of starting\n       the VM engine, once the window is properly set up. */\n    all_options.io.init(all_options);\n}\n\n/* Has load_run() been called (successfully)? Success means we made it\n   all the way through start_game(). */\nfunction is_inited() {\n    return started;\n}\n\nfunction get_library(val) {\n    switch (val) {\n        case 'GlkOte': return GlkOte;\n        case 'GiDispa': return all_options.GiDispa;\n        case 'Blorb': return all_options.Blorb;\n        case 'VM': return all_options.vm; // typically Quixe\n        case 'IO': return all_options.io; // normally Glk\n    }\n    /* Unrecognized library name. */\n    return null;\n}\n    \n/* End of GiLoad namespace function. Return the object which will\n   become the GiLoad global. */\nreturn {\n    classname: 'GiLoad',\n    load_run: load_run,\n    inited: is_inited,\n    getlibrary: get_library,\n};\n\n};\n\n/* GiLoad is an instance of GiLoadClass, ready to init.\n   (The BASESIXTYFOURTOP in I7's Quixe template relies on GiLoad\n   existing in the global environment.) */\nvar GiLoad = new GiLoadClass();\n\n// Node-compatible behavior\ntry { exports.GiLoad = GiLoad; exports.GiLoadClass = GiLoadClass; } catch (ex) {};\n\n/* End of GiLoad library. */\n", "// Export Quixe engine\n\nimport QuixeModule from '../upstream/quixe/src/quixe/quixe.js'\nimport QuixeDispatch from '../upstream/quixe/src/quixe/gi_dispa.js'\nimport QuixeLoad from '../upstream/quixe/src/quixe/gi_load.js'\n\nexport const Quixe = QuixeModule.Quixe\nexport const GiDispa = QuixeDispatch.GiDispaClass\nexport const GiLoad = QuixeLoad.GiLoad"],
  "mappings": "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",
  "names": ["require_quixe", "__commonJSMin", "exports", "QuixeClass", "self", "quixe_init", "image", "all_options", "game_image", "ls", "ix", "val", "game_signature", "opt_log_execution_time", "opt_rethrow_exceptions", "opt_do_vm_autosave", "opt_clear_vm_autosave", "parse_inform_debug_data", "quixe_inited", "quixe_getlibrary", "quixe_start", "setup_bytestring_table", "setup_operandlist_table", "setup_vm", "execute_loop", "ex", "qlog", "qstackdump", "show_exception", "quixe_resume", "argument", "res", "msg", "qobjdump", "obj", "depth", "key", "proplist", "v", "stack", "debugfunc", "frm", "debuginfo", "a", "b", "ah", "al", "bh", "bl", "bytestring_table", "quotechar_table", "ByteRead4", "arr", "addr", "ByteRead2", "ByteRead1", "Mem1", "memmap", "Mem2", "Mem4", "MemSlice", "length", "MemW1", "MemW2", "MemW4", "BytePushString", "str", "BytePush4", "BytePush2", "BytePush1", "ByteWrite4", "ByteReadString", "len", "QuoteMem1", "QuoteMem2", "QuoteMem4", "ReadArgByte", "WriteArgByte", "ReadArgWord", "WriteArgWord", "ReadStructField", "fieldnum", "WriteStructField", "SetResumeStore", "CharToString", "QuoteCharToString", "val2", "QuoteStr1ToString", "regexp_string_unsafe", "QuoteEscapeString", "fatal_error", "make_code", "funcname", "arg1", "arg2", "func", "VMFunc", "funcaddr", "startpc", "localsformat", "rawformat", "jx", "locallen", "form", "StackFrame", "vmfunc", "clone_stackframe", "frame", "other", "push_serialized_stackframe", "i", "pop_deserialized_stackframe", "frameptr", "framelen", "localspos", "loctype", "locnum", "pos", "VMTextEnv", "dectab", "operandlist_table", "OperandList", "formlist", "argsize", "list_none", "list_L", "list_LL", "list_LLL", "list_LLLL", "list_LLLLL", "list_LLLLLLL", "list_LS", "list_LLS", "list_LLLLLLS", "list_LLLLLLLS", "list_LSS", "list_LLSS", "list_LLLLSS", "list_LC", "list_LLC", "list_LLLC", "list_LLLLC", "list_ES", "list_LES", "list_EES", "list_F", "list_LF", "list_LLF", "list_EF", "list_1EF", "list_2EF", "list_S", "list_SS", "list_CL", "list_C", "oputil_record_funcop", "funcop", "oputil_store", "context", "operand", "holdvar", "opchar", "push_offstack_holdvar", "alloc_holdvar", "store_offloc_value", "oputil_push_callstub", "oputil_push_substring_callstub", "oputil_unload_offstate", "keepstack", "oputil_flush_string", "oputil_signify_operand", "hold", "quot_isconstant", "oputil_decode_float", "decode_float", "oputil_decode_double", "ophi", "oplo", "valhi", "vallo", "decode_double", "oputil_perform_jump", "unconditional", "newpc", "opcode_table", "operands", "sign0", "sign1", "argc", "pop_offstack_holdvar", "bitx", "addrx", "bitnum", "mask", "count", "temp", "transfer_to_offstack", "expr", "encode_float", "valf", "valf0", "valf1", "valf2", "valpair", "encode_double", "vald", "vald1", "vald2", "vald0", "mayblock", "use", "value", "inchold", "oldvar", "quot_isholdvar", "parse_operands", "cp", "oplist", "modeaddr", "modeval", "mode", "optype", "ramstart", "compile_func", "functype", "rawstart", "compile_path", "startaddr", "startiosys", "opcode", "opcodecp", "ophandler", "enter_function", "argcount", "total_function_calls", "accelfunc", "accel_address_map", "accel_function_calls", "pop_callstub", "vmfunc_table", "newframe", "leave_function", "olddepth", "pop_stack_to", "destaddr", "desttype", "valstack", "vallen", "framestart", "stream_string", "stream_num", "store_operand", "store_operand_by_funcop", "parse_partial_operand", "set_random", "srand_set_seed", "srand_get_random", "srand_table", "srand_index1", "srand_index2", "seed", "ii", "k", "loop", "accel_funcnum_map", "accel_params", "accel_print_error", "accel_func_map", "argv", "tb", "id", "otab", "max", "binary_search", "prop", "accel_helper_get_prop", "zr", "inlist", "inlistlen", "cla", "accel_helper_obj_in_class", "indiv_prop_start", "accel_helper_get_prop_new", "accel_helper_temp_args", "set_string_table", "decoding_tree", "vmstring_table", "textenv", "vmtextenv_table", "tablelen", "rootaddr", "cache_stringtable", "tmparray", "build_decoding_tree", "set_iosys", "rock", "cablist", "nodeaddr", "type", "cab", "depthbit", "leftaddr", "rightaddr", "nextcp", "inmiddle", "charnum", "buf", "ch", "substring", "addrkey", "strop", "compile_string", "strings_compiled", "strings_cached", "curiosys", "startbitnum", "retval", "bits", "numbits", "readahead", "tmpaddr", "done", "newbyte", "node", "byt", "nodetype", "do_gestalt", "heap_get_start", "fetch_search_key", "options", "linear_search", "keysize", "start", "structsize", "numstructs", "keyoffset", "match", "bytes", "retindex", "zeroterm", "keybuf", "top", "bot", "cmp", "byt2", "linked_search", "nextoffset", "sign", "expo", "absval", "fbits", "mant", "manthi", "mantlo", "fhi", "flo", "endgamefile", "origendmem", "stacksize", "startfuncaddr", "origstringtable", "checksum", "undostack", "heapstart", "usedlist", "freelist", "total_execution_time", "total_path_calls", "paths_cached", "paths_compiled", "version", "Dialog", "snapshot", "vm_autorestore", "vm_restart", "heap_clear", "protect", "copy_protected_range", "change_memsize", "paste_protected_range", "compress_bytes", "result", "zeroes", "decompress_bytes", "j", "pack_iff_chunks", "chunks", "chunk", "unpack_iff_chunks", "size", "vm_save", "streamid", "cmem", "stkschunk", "heap_is_active", "mallchunk", "payload_bytes", "quetzal", "vm_restore", "buffer", "newendmem", "ram_xor", "stackchunk", "heapchunk", "numblocks", "HeapBlock", "blk1", "blk2", "heapend", "assert_heap_valid", "vm_autosave", "eventaddr", "opmodes", "origstacklen", "vm_saveundo", "vm_restoreundo", "vm_hasundo", "vm_discardundo", "newlen", "internal", "lx", "end", "perform_verify", "imagelen", "newsum", "quixe_get_signature", "quixe_get_vm_self", "quixe_get_statistics", "stat", "heap_binary_search", "list", "low", "high", "mid", "heap_malloc", "freeblock", "rounded_up_size", "heap_free", "block", "next", "prev", "upos", "fpos", "u", "f", "quixe_get_debuginfo", "oldpos", "informversion", "rectype", "filenum", "includename", "filename", "classname", "linestart", "lineend", "objnum", "objname", "num", "name", "funcnum", "seqcount", "line", "locals", "locname", "arrayaddr", "endaddr", "funcbase", "pathtab", "path", "pathstart", "pathend", "Quixe", "require_gi_dispa", "__commonJSMin", "exports", "GiDispaClass", "self", "gidispa_init", "options", "gidispa_inited", "gidispa_getlibrary", "val", "class_defs", "FuncSpec", "id", "name", "proto", "Prototype", "args", "retarg", "ArgString", "ArgUnicode", "ArgChar", "signed", "ArgInt", "ArgClass", "ArgStruct", "form", "ArgRef", "arg", "passin", "passout", "nonnull", "ArgArray", "retained", "arg_deserialize", "obj", "arg_int_signed", "arg_int_unsigned", "arg_char_native", "arg_char_signed", "arg_char_unsigned", "arg_class_window", "arg_class_stream", "arg_class_fileref", "arg_class_schannel", "proto_map", "convert_arg", "unconvert_arg", "cast_signed_char", "uncast_signed_char", "class_obj_to_id", "clas", "class_obj_from_id", "class_map", "build_function", "func", "ix", "jx", "argpos", "argjoin", "subargs", "refarg", "tmpvar", "retval", "ls", "mayblock", "out", "locals", "arraycount", "confunc", "checkbyte", "resfunc", "function_map", "get_function", "blocked_selector", "blocked_callargs", "last_event_type", "set_blocked_selector", "sel", "check_autosave", "prepare_resume", "glka0", "temp_arg_arrays", "retained_arrays", "make_arg_array", "arr", "addr", "len", "retain_array", "useobj", "get_retained_array", "unretain_array", "last_used_id", "class_register", "usedisprock", "class_unregister", "init_module", "key", "require_gi_load", "__commonJSMin", "exports", "GiLoadClass", "all_options", "gameurl", "started", "GlkOte", "load_run", "optobj", "image", "imageoptions", "image_format", "qparams", "get_query_params", "decode_base64", "decode_raw_text", "start_game", "xhr", "binary_supported", "crossorigin_supported", "regex_urldomain", "page_domain", "data_exec", "is_relative", "data_domain", "same_origin", "old_js_url", "val", "jqxhr", "textstatus", "errorthrown", "headls", "script", "settings", "response", "absgameurl", "absolutize", "fullurl", "map", "qs", "args", "ix", "pair", "name", "value", "url", "res", "str", "arr", "base64data", "data", "formtype", "retainuses", "ex", "title", "image_array", "is_inited", "get_library", "GiLoad", "import_quixe", "import_gi_dispa", "import_gi_load", "Quixe", "QuixeModule", "GiDispa", "QuixeDispatch", "GiLoad", "QuixeLoad"]
}
